(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9065],{89065:n=>{n.exports="### 生命周期\n\n先来回顾 React 的生命周期, 用流程图表示如下:\n\n![](http://with.muyunyun.cn/77e8b5ceaa1d697f280053be91a87bb3.jpg)\n\n该流程图比较清晰地呈现了 react 的生命周期。其分为 3 个阶段 —— 生成期, 存在期, 销毁期。\n\n因为生命周期钩子函数存在于自定义组件中, 将之前 _render 函数作些调整如下:\n\n```js\n// 原来的 _render 函数, 为了将职责拆分得更细, 将 virtual dom 转为 real dom 的函数单独抽离出来\nfunction vdomToDom(vdom) {\n  if (_.isFunction(vdom.nodeName)) {        // 为了更加方便地书写生命周期逻辑, 将解析自定义组件逻辑和一般 html 标签的逻辑分离开\n    const component = createComponent(vdom) // 构造组件\n    setProps(component)                     // 更改组件 props\n    renderComponent(component)              // 渲染组件, 将 dom 节点赋值到 component\n    return component.base                   // 返回真实 dom\n  }\n  ...\n}\n```\n\n我们可以在 setProps 函数内（渲染前）加入 `componentWillMount`, `componentWillReceiveProps` 方法, setProps 函数如下:\n\n```js\nfunction setProps(component) {\n  if (component && component.componentWillMount) {\n    component.componentWillMount()\n  } else if (component.base && component.componentWillReceiveProps) {\n    component.componentWillReceiveProps(component.props) // 后面待实现\n  }\n}\n```\n\n而后我们在 renderComponent 函数内加入 `componentDidMount`、`shouldComponentUpdate`、`componentWillUpdate`、`componentDidUpdate` 方法\n\n```js\nfunction renderComponent(component) {\n  if (component.base && component.shouldComponentUpdate) {\n    const bool = component.shouldComponentUpdate(component.props, component.state)\n    if (!bool && bool !== undefined) {\n      return false // shouldComponentUpdate() 返回 false, 则生命周期终止\n    }\n  }\n  if (component.base && component.componentWillUpdate) {\n    component.componentWillUpdate()\n  }\n\n  const rendered = component.render()\n  const base = vdomToDom(rendered)\n\n  if (component.base && component.componentDidUpdate) {\n    component.componentDidUpdate()\n  } else if (component && component.componentDidMount) {\n    component.componentDidMount()\n  }\n\n  if (component.base && component.base.parentNode) { // setState 进入此逻辑\n    component.base.parentNode.replaceChild(base, component.base)\n  }\n\n  component.base = base  // 标志符\n}\n```\n\n### 测试生命周期\n\n测试如下用例:\n\n```jsx\nclass A extends Component {\n  componentWillReceiveProps(props) {\n    console.log('componentWillReceiveProps')\n  }\n\n  render() {\n    return (\n      <div>{this.props.count}</div>\n    )\n  }\n}\n\nclass B extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 1\n    }\n  }\n\n  componentWillMount() {\n    console.log('componentWillMount')\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount')\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('shouldComponentUpdate', nextProps, nextState)\n    return true\n  }\n\n  componentWillUpdate() {\n    console.log('componentWillUpdate')\n  }\n\n  componentDidUpdate() {\n    console.log('componentDidUpdate')\n  }\n\n  click() {\n    this.setState({\n      count: ++this.state.count\n    })\n  }\n\n  render() {\n    console.log('render')\n    return (\n      <div>\n        <button onClick={this.click.bind(this)}>Click Me!</button>\n        <A count={this.state.count} />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <B />,\n  document.getElementById('root')\n)\n```\n\n页面加载时输出结果如下:\n\n```\ncomponentWillMount\nrender\ncomponentDidMount\n```\n\n点击按钮时输出结果如下:\n\n```\nshouldComponentUpdate\ncomponentWillUpdate\nrender\ncomponentDidUpdate\n```\n\n### React 16.3 生命周期调研\n\n在这个版本中, 新加入了两个生命周期:\n\n```\ngetDerivedStateFromProps(nextProps, prevState): 更加语义化, 可以代替 componentWillMount、componentWillReceiveProps(nextProps);\n\ngetSnapshotBeforeUpdate(prevProps, prevState): 可以将结果传入 componentDidUpdate 里, 从而达到 dom 数据统一, 可以替代 componentWillUpdate()（缺点就是前面讲的 react 开启异步渲染, componentWillUpdate() 与 componentDidUpdate() 间获取的 dom 会不统一）。\n```\n\n后文考虑实现上述 api。\n\nReact 16.3 生命周期相关文献\n\n* [React v16.3 版本新生命周期函数浅析及升级方案](https://zhuanlan.zhihu.com/p/36062486)\n* [中文官方文档](https://react.docschina.org/docs/react-component.html)"}}]);