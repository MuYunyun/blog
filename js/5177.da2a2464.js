(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5177],{5177:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>c});var a=t(59713),u=t.n(a),o=t(6479),r=t.n(o),s=(t(67294),t(3905));function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){u()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var m={};function c(n){var e=n.components,t=r()(n,["components"]);return(0,s.kt)("wrapper",i(i(i({},m),t),{},{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h3",null,"213.House_Robber_II"),(0,s.kt)("p",null,"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are ",(0,s.kt)("inlineCode",{parentName:"p"},"arranged in a circle"),". That means ",(0,s.kt)("inlineCode",{parentName:"p"},"the first house is the neighbor of the last one"),". Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night."),(0,s.kt)("p",null,"Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police."),(0,s.kt)("p",null,"Example 1:"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"Input: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n")),(0,s.kt)("p",null,"Example 2:"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"Input: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n")),(0,s.kt)("p",null,"Example 3:"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"Input: nums = [0]\nOutput: 0\n")),(0,s.kt)("p",null,"Constraints:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"1 <= nums.length <= 100"),(0,s.kt)("li",{parentName:"ul"},"0 <= nums","[i]"," <= 1000")),(0,s.kt)("h3",null,"Analyze"),(0,s.kt)("p",null,"思考🤔: 将 4 2 3 5 拆成 4 2 3 与 2 3 5 两种情形。如此便将其转化为题目 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/main/LeetCode/198.House_Robber.md"}),"198.House Robber")),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"                                    [0, n - 2] || [1, n - 1]\n            /        |          \\          \\                                  /        |  ...      \\\n      [2, n - 2]   [3, n - 2]  [4, n - 2]    ...   [n - 2]                 [3, n - 1]     [4, n - 1]  ...  [n - 1]\n      /\n[4, n - 2]: 此时找到了重复子项\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"状态的定义"),"(即函数的定义): 考虑偷取 ",(0,s.kt)("inlineCode",{parentName:"li"},"[m, n - 2] || [z, n - 1]")," 范围内的房子"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"状态转移"),": f(0) = ",(0,s.kt)("inlineCode",{parentName:"li"},"Math.max(v(0) + f(2), v(1) + f(3), v(2) + f(4), ..., v(n - 3) + f(n - 1), v(n - 2), v(n - 1))"))),(0,s.kt)("p",null,"递归:"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n  if (nums.length === 1) {\n    return nums[0]\n  }\n  const nums1 = nums.slice(0, nums.length - 1)\n  const nums2 = nums.slice(1, nums.length)\n  return Math.max(robPosition(nums1, 0, {}), robPosition(nums2, 0, {}))\n}\n\nvar robPosition = function(nums, start, cache) {\n  let sum = 0\n\n  if (typeof nums[start] !== 'number') return 0\n  // the for loop can be optimized here.\n  for (let i = start; i < nums.length; i++) {\n    if (typeof cache[i] !== 'number') {\n      cache[i] = robPosition(nums, i + 2, cache)\n    }\n    sum = Math.max(sum, nums[i] + cache[i])\n  }\n\n  return sum\n}\n")),(0,s.kt)("p",null,"动态规划:"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n  if (nums.length === 0) return 0\n  if (nums.length === 1) {\n    return nums[0]\n  }\n  if (nums.length === 2) {\n    return Math.max(nums[0], nums[1])\n  }\n  const nums1 = nums.slice(0, nums.length - 1)\n  const nums2 = nums.slice(1, nums.length)\n  return Math.max(robPosition(nums1), robPosition(nums2))\n}\n\nvar robPosition = (nums) => {\n  const lastDigit = nums[nums.length - 1]\n  const lastSecondDigit = nums[nums.length - 2]\n  const cache = {\n    0: lastDigit,\n    1: Math.max(lastSecondDigit, lastDigit)\n  }\n  let sum = Math.max(lastSecondDigit, lastDigit)\n  for (let i = 2; i < nums.length; i++) {\n    if (typeof cache[i] !== 'number') {\n      const point = nums.length - (i + 1)\n      cache[i] = Math.max(nums[point] + cache[i - 2], cache[i - 1])\n    }\n    sum = Math.max(sum, cache[i])\n  }\n\n  return sum\n}\n")))}c.isMDXComponent=!0}}]);