(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2234],{52234:n=>{n.exports="### partition 划分算法\n\n算法思路:\n\n* 第一步: 找一个`枢纽值` pivot;\n* 第二步: 使用一个`指针去遍历数组`, 小于 pivot 的值都放在数组左侧(pivot 的右侧);\n* 第三步: 将 pivot 移到数组的`中间位置`, pivot 左侧都是比 pivot 小的值, pivot 右侧都是比 pivot 大的值; 返回 pivot 的下标;\n\n比如针对数组 `[5,9,2,7,3]`, 分解算法步骤图:\n\n![](http://with.muyunyun.cn/f86a764f83302f8d5bba02024e0dcb04.jpg)\n\n### 算法实现\n\n用了双指针。\n\n```js\n/* 分区算法 */\nfunction partition(nums, left, right) {\n  const pivot = nums[left] // 枢纽值\n  let pos = left           // 用来记住最后枢纽值 pivot 应该置于的位置\n  for (let i = left + 1; i <= right; i++) {\n    if (nums[i] < pivot) {\n      pos++\n      swap(nums, pos, i)\n    }\n  }\n  swap(nums, pos, left)\n  return pos\n}\n\n/* 交换位置\n  nums 数组, a, b 为下标\n*/\nvar swap = function(nums, a, b) {\n  const tmp = nums[a]\n  nums[a] = nums[b]\n  nums[b] = tmp\n}\n```\n\n测试\n\n```js\nvar testArr = [5, 9, 2, 7, 3]\nvar result = partition(testArr, 0, 4)\n\nresult === 2\nconsole.log(testArr) // [3, 2, 5, 7, 9]\n```\n\n### partition 算法的作用\n\n见 leetcode 215: 数组中的第 K 个最大元素"}}]);