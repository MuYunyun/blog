(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6600],{86600:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n(59713),a=n.n(r),p=n(6479),l=n.n(p),i=(n(67294),n(3905));function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var u={};function c(e){var t=e.components,n=l()(e,["components"]);return(0,i.kt)("wrapper",o(o(o({},u),n),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"测试的动机"),(0,i.kt)("p",null,"测试用例的书写是一个风险驱动的行为, 每当收到 Bug 报告时, 先写一个单元测试来暴露这个 Bug, 在日后的代码提交中, 若该测试用例是通过的, 开发者就能更为自信地确保程序不会再次出现此 bug。"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"测试的动机是有效地提高开发者的自信心。")),(0,i.kt)("h3",null,"前端现代化测试模型"),(0,i.kt)("p",null,"前端测试中有两种模型, ",(0,i.kt)("inlineCode",{parentName:"p"},"金字塔模型"),"与",(0,i.kt)("inlineCode",{parentName:"p"},"奖杯模型"),"。"),(0,i.kt)("p",null,"金字塔模型摘自 ",(0,i.kt)("a",o({parentName:"p"},{href:"https://martinfowler.com/bliki/TestPyramid.html"}),"Martin Fowler's blog"),", 模型示意图如下:"),(0,i.kt)("p",null,(0,i.kt)("img",o({parentName:"p"},{src:"http://with.muyunyun.cn/d97821c98ca86b161ac650198e6b44fd.jpg-300",alt:null}))),(0,i.kt)("p",null,"金字塔模型自下而上分为单元测试、集成测试、UI 测试, 之所以是金字塔结构是因为单元测试的成本最低, 与之相对, UI 测试的成本最高。所以单元测试写的数量最多, UI 测试写的数量最少。同时需注意的是越是上层的测试, 其通过率给开发者带来的信心是越大的。"),(0,i.kt)("p",null,"奖杯模型摘自 Kent C. Dodds 提出的 ",(0,i.kt)("a",o({parentName:"p"},{href:"https://twitter.com/kentcdodds/status/960723172591992832?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E960723172591992832&ref_url=https%3A%2F%2Fkentcdodds.com%2Fblog%2Fwrite-tests"}),"The Testing Trophy"),", 该模型是笔者比较认可的前端现代化测试模型, 模型示意图如下:"),(0,i.kt)("p",null,(0,i.kt)("img",o({parentName:"p"},{src:"http://with.muyunyun.cn/0453d50194dfa1cbf7a4aeb70252c438.jpg-300",alt:null}))),(0,i.kt)("p",null,"奖杯模型中自下而上分为静态测试、单元测试、集成测试、e2e 测试, 它们的职责大致如下:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"静态测试"),": 在编写代码逻辑阶段时进行报错提示。(代表库: eslint、flow、TypeScript)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"单元测试"),": 在奖杯模型中, 单元测试的职责是对一些边界情况或者特定的算法进行测试。(代表库: ",(0,i.kt)("a",o({parentName:"li"},{href:"https://github.com/facebook/jest"}),"jest"),"、",(0,i.kt)("a",o({parentName:"li"},{href:"https://github.com/mochajs/mocha"}),"mocha"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"集成测试"),": 模拟用户的行为进行测试, 对网络请求、获取数据库的数据等依赖第三方环境的行为进行 mock。(代表库: ",(0,i.kt)("a",o({parentName:"li"},{href:"https://github.com/facebook/jest"}),"jest"),"、",(0,i.kt)("a",o({parentName:"li"},{href:"https://github.com/testing-library/react-testing-library"}),"react-testing-library"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"e2e 测试"),": 模拟用户在真实环境上操作行为(包括网络请求、获取数据库数据等)的测试。(代表库: ",(0,i.kt)("a",o({parentName:"li"},{href:"https://github.com/cypress-io/cypress"}),"cypress"),")")),(0,i.kt)("p",null,"越是上层的测试给开发者带来的自信是越大的, 与此同时, 越是下层的测试测试的效率是越高的。奖杯模型综合考虑了这两点因素, 可以看到其在集成测试中的占比是最高的。"),(0,i.kt)("h3",null,"基于用户行为去测试"),(0,i.kt)("p",null,"书写测试用例是为了提高开发者对程序的自信心的, 但是很多时候书写测试用例给开发者带来了觉得在做无用功的沮丧。导致沮丧的感觉出现往往是因为开发者对组件的具体实现细节进行了测试, 如果换个角度站在用户的行为上进行测试则能极大提高测试效率。"),(0,i.kt)("p",null,"测试组件的具体细节会带来的两个问题:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"测试用例对代码",(0,i.kt)("inlineCode",{parentName:"li"},"错误否定"),";"),(0,i.kt)("li",{parentName:"ol"},"测试用例对代码",(0,i.kt)("inlineCode",{parentName:"li"},"错误肯定"),";")),(0,i.kt)("p",null,"以",(0,i.kt)("inlineCode",{parentName:"p"},"轮播图组件"),"为例, 依次来看上述问题。轮播图组件伪代码如下:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"class Carousel extends React.Component {\n  state = {\n    index: 0\n  }\n\n  /* 跳转到指定的页数 */\n  jump = (to: number) => {\n    this.setState({\n      index: to\n    })\n  }\n\n  render() {\n    const { index } = this.state\n    return <>\n      <Swipe currentPage={index} />\n      <button onClick={() => this.jump(index + 1)}>下一页</button>\n      <span>`当前位于第${index}页`</span>\n    </>\n  }\n}\n")),(0,i.kt)("p",null,"如下是基于 ",(0,i.kt)("inlineCode",{parentName:"p"},"enzyme")," 的 api 写的测试用例:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"import { mount } from 'enzyme'\n\ndescribe('Carousel Test', () => {\n  it('test jump', () => {\n    const wrapper = mount(<Carousel>\n      <div>第一页</div>\n      <div>第二页</div>\n      <div>第三页</div>\n    </Carousel>)\n\n    expect(wrapper.state('index')).toBe(0)\n    wrapper.instance().jump(2)\n    expect((wrapper.state('index')).toBe(2)\n  })\n})\n")),(0,i.kt)("p",null,"恭喜, 测试通过✅。某一天开发者觉得 ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," 的命名不妥, 对其重构将 ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," 更名为 ",(0,i.kt)("inlineCode",{parentName:"p"},"currentPage"),", 此时代码如下:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"class Carousel extends React.Component {\n  state = {\n    currentPage: 0\n  }\n\n  /* 跳转到指定的页数 */\n  jump = (to: number) => {\n    this.setState({\n      currentPage: to\n    })\n  }\n\n  render() {\n    const { currentPage } = this.state\n    return <>\n      <Swipe currentPage={currentPage} />\n      <button onClick={() => this.jump(currentPage + 1)}>下一页</button>\n      <span>`当前位于第${currentPage}页`</span>\n    </>\n  }\n}\n")),(0,i.kt)("p",null,"再次跑测试用例, 此时在 ",(0,i.kt)("inlineCode",{parentName:"p"},"expect(wrapper.state('index')).toBe(0)")," 的地方抛出了错误❌, 这就是所谓的测试用例对代码进行了",(0,i.kt)("inlineCode",{parentName:"p"},"错误否定"),"。因为这段代码对于使用方来说是不存在问题的, 但是测试用例却抛出错误, 此时开发者不得不做'无用功'来调整测试用例适配新代码。调整后的测试用例如下:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-diff"}),"describe('Carousel Test', () => {\n  it('test jump', () => {\n    ...\n\n-   expect(wrapper.state('index')).toBe(0)\n+   expect(wrapper.state('currentPage')).toBe(0)\n    wrapper.instance().jump(2)\n-   expect((wrapper.state('index')).toBe(2)\n+   expect((wrapper.state('currentPage')).toBe(2)\n  })\n})\n")),(0,i.kt)("p",null,"然后在某一天粗心的小明同学对代码做了以下改动:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-diff"}),"class Carousel extends React.Component {\n  state = {\n    currentPage: 0\n  }\n\n  /* 跳转到指定的页数 */\n  jump = (to: number) => {\n    this.setState({\n      currentPage: to\n    })\n  }\n\n  render() {\n    const { currentPage } = this.state\n    return <>\n      <Swipe currentPage={currentPage} />\n-     <button onClick={() => this.jump(currentPage + 1)}>下一页</button>\n+     <button onClick={this.jump(currentPage + 1)}>下一页</button>\n      <span>`当前位于第${index}页`</span>\n    </>\n  }\n}\n")),(0,i.kt)("p",null,"小明同学跑了上述单测, 测试通过✅, 于是开心地提交了代码。结果上线后线上出现了问题! 这就是所谓测试用例对代码进行了",(0,i.kt)("inlineCode",{parentName:"p"},"错误肯定"),"。因为测试用例测试了组件内部细节(此处为 ",(0,i.kt)("inlineCode",{parentName:"p"},"jump")," 函数), 让小明误以为已经覆盖了全部场景。"),(0,i.kt)("p",null,"测试用例",(0,i.kt)("inlineCode",{parentName:"p"},"错误否定"),"以及",(0,i.kt)("inlineCode",{parentName:"p"},"错误肯定"),"都给开发者带来了挫败感与困扰, 究其原因是测试了组件内部的具体细节所至。而一个稳定可靠的测试用例应该脱离组件内部的实现细节, 越接近用户行为的测试用例能给开发者带来越充足的自信。相较于 enzyme, ",(0,i.kt)("a",o({parentName:"p"},{href:"https://github.com/testing-library/react-testing-library"}),"react-testing-library")," 所提供的 api 更加贴近用户的使用行为, 使用其对上述测试用例进行重构:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"import { render, fireEvent } from '@testing-library/react'\n\ndescribe('Carousel Test', () => {\n  it('test jump', () => {\n    const { getByText } = render(<Carousel>\n      <div>第一页</div>\n      <div>第二页</div>\n      <div>第三页</div>\n    </Carousel>)\n\n    expect(getByText(/当前位于第一页/)).toBeInTheDocument()\n    fireEvent.click(getByText(/下一页/))\n    expect(getByText(/当前位于第一页/)).not.toBeInTheDocument()\n    expect(getByText(/当前位于第二页/)).toBeInTheDocument()\n  })\n})\n")),(0,i.kt)("p",null,"关于 ",(0,i.kt)("inlineCode",{parentName:"p"},"react-testing-Library")," 的用法总结将在下一章节 ",(0,i.kt)("a",o({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/master/React/%E6%B5%8B%E8%AF%95/Jest%E4%B8%8EReactTestingLibrary.md"}),"Jest 与 react-testing-Library")," 具体介绍。如果对 React 技术栈感兴趣, 欢迎关注",(0,i.kt)("a",o({parentName:"p"},{href:"https://github.com/MuYunyun/blog"}),"个人博客"),"。"),(0,i.kt)("h3",null,"相关链接"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",o({parentName:"li"},{href:"https://kentcdodds.com/blog/write-tests"}),"write-tests")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",o({parentName:"li"},{href:"https://reactjs.org/docs/testing-recipes.html"}),"Testing")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",o({parentName:"li"},{href:"https://kentcdodds.com/blog/testing-implementation-details"}),"Testing Implementation Details")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",o({parentName:"li"},{href:"https://kentcdodds.com/blog/why-i-never-use-shallow-rendering"}),"why-i-never-use-shallow-rendering")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",o({parentName:"li"},{href:"https://blog.sapegin.me/all/react-testing-1-best-practices/"}),"react-testing-1-best-practices"))))}c.isMDXComponent=!0}}]);