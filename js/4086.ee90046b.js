(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4086],{14086:n=>{n.exports='### 37. Sudoku Solver\n\nWrite a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n\n1. Each of the digits 1-9 must occur exactly once in each row.\n2. Each of the digits 1-9 must occur exactly once in each column.\n3. Each of the digits 1-9 must occur exactly once in each of the 9 `3 x 3` sub-boxes of the grid.\n\n> The \'.\' character indicates empty cells.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)\n\n```js\nInput:\nboard =\n[\n  ["5","3",".",".","7",".",".",".","."],\n  ["6",".",".","1","9","5",".",".","."],\n  [".","9","8",".",".",".",".","6","."],\n  ["8",".",".",".","6",".",".",".","3"],\n  ["4",".",".","8",".","3",".",".","1"],\n  ["7",".",".",".","2",".",".",".","6"],\n  [".","6",".",".",".",".","2","8","."],\n  [".",".",".","4","1","9",".",".","5"],\n  [".",".",".",".","8",".",".","7","9"]\n]\n\nOutput:\n[\n  ["5","3","4","6","7","8","9","1","2"],\n  ["6","7","2","1","9","5","3","4","8"],\n  ["1","9","8","3","4","2","5","6","7"],\n  ["8","5","9","7","6","1","4","2","3"],\n  ["4","2","6","8","5","3","7","9","1"],\n  ["7","1","3","9","2","4","8","5","6"],\n  ["9","6","1","5","3","7","2","8","4"],\n  ["2","8","7","4","1","9","6","3","5"],\n  ["3","4","5","2","8","6","1","7","9"]\n]\n```\n\n> Explanation: The input board is shown above and the only valid solution is shown below:\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)\n\nConstraints:\n\n* board.length == 9\n* board[i].length == 9\n* board[i][j] is a digit or \'.\'.\n\nIt is guaranteed that the input board has only one solution.\n\n### Analyze\n\n```js\n[\n  ["5","3","1",".","7",".",".",".","."],\n  ["6",".",".","1","9","5",".",".","."],\n  [".","9","8",".",".",".",".","6","."],\n  ["8",".",".",".","6",".",".",".","3"],\n  ["4",".",".","8",".","3",".",".","1"],\n  ["7",".",".",".","2",".",".",".","6"],\n  [".","6",".",".",".",".","2","8","."],\n  [".",".",".","4","1","9",".",".","5"],\n  [".",".",".",".","8",".",".","7","9"]\n]\n```\n\n```js\n/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n  const obj = {}\n  const used = {}\n  for (let x = 0; x < 9; x++) {\n    for (let y = 0; y < 9; y++) {\n      if (board[x][y] !== \'.\') {\n        // init used sudu.\n        used[`${x}、${y}`] = true\n\n        if (!obj[`rows ${x}`]) obj[`rows ${x}`] = []\n        if (!obj[`columns ${y}`]) obj[`columns ${y}`] = []\n        const blockX = Math.floor(x / 3)\n        const blockY = Math.floor(y / 3)\n        if (!obj[`block ${blockX}${blockY}`]) obj[`block ${blockX}${blockY}`] = []\n        obj[`rows ${x}`].push(board[x][y])\n        obj[`columns ${y}`].push(board[x][y])\n        obj[`block ${blockX}${blockY}`].push(board[x][y])\n      }\n    }\n  }\n\n  for (let x = 0; x < 9; x++) {\n    for (let y = 0; y < 9; y++) {\n      dfs(board, x, y, obj, used)\n    }\n  }\n};\n\nvar directions = [[1, 0], [0, 1], [-1, 0], [0, -1]]\n\nvar dfs = function(board, x, y, obj, used) {\n  if (used[`${x}、${y}`]) {\n    return\n  } else {\n    // data source\n    for (let i = 1; i <= 9; i++) {\n      const blockX = Math.floor(x / 3)\n      const blockY = Math.floor(y / 3)\n      if (\n        obj[`rows ${x}`].indexOf(i) > -1\n        || obj[`columns ${y}`].indexOf(i) > -1\n        || obj[`block ${blockX}${blockY}`].indexOf(i) > -1\n      ) {\n        continue\n      } else {\n\n      }\n    }\n  }\n}\n```'}}]);