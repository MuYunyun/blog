(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4620],{24620:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),s=t.n(r),a=t(6479),p=t.n(a),o=(t(67294),t(3905));function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){s()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var d={};function c(e){var n=e.components,t=p()(e,["components"]);return(0,o.kt)("wrapper",i(i(i({},d),t),{},{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",null,"Render Props"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"概要: 属性中传入函数, 函数返回组件"),(0,o.kt)("li",{parentName:"ul"},"目的: 封装行为")),(0,o.kt)("h3",null,"demo"),(0,o.kt)("p",null,"在如下例子中, 组件 ",(0,o.kt)("inlineCode",{parentName:"p"},"PassState")," 即为承载公用逻辑的载体。组件 ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," 和 ",(0,o.kt)("inlineCode",{parentName:"p"},"UseState")," 为使用方。"),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"class PassState extends Component {\n  constructor() {\n    super()\n    this.state = { name: 'muyy' }\n  }\n\n  render() {\n    return (\n      <>{this.props.render(this.state)}</>\n    )\n  }\n}\n\nclass UseState extends Component {\n  render() {\n    const { state } = this.props\n    return <>{state.name}</>\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <PassState\n        render={(state) => (\n          <UseState state={state} />\n        )}\n      />\n    )\n  }\n}\n")),(0,o.kt)("p",null,"这是官方摘取的 render Props 例子, 只要将 render 进行替换成 children, 可以发现日常使用它的情形就很寻常了。"),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"class PassState extends Component {\n  constructor() {\n    super()\n    this.state = { name: 'muyy' }\n  }\n\n  render() {\n    return (\n      <>{this.props.children(this.state)}</>\n    )\n  }\n}\n\nclass UseState extends Component {\n  render() {\n    const { state } = this.props\n    return <>{state.name}</>\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <PassState>\n        {(state) => (\n          <UseState state={state} />\n        )}\n      </PassState>\n    )\n  }\n}\n")),(0,o.kt)("p",null,"比如 beast-mobile 中 Matrix 组件就是这种形式。"),(0,o.kt)("h3",null,"render props 是否都适合转化为 Hooks"),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"<Matrix dataSources={dataSources}>\n  {({ src, index }) => {\n    return (\n      <div\n        style={{\n          padding: 10,\n          background: '#ebebeb',\n          borderRadius: 4,\n          fontSize: '12px',\n          color: '#666'\n        }}\n      >\n        <div style={{ fontSize: '12px' }}> name: {src.name}</div>\n        <div style={{ fontSize: '12px' }}> age: {src.age}</div>\n        <div style={{ fontSize: '12px' }}> address: {src.address}</div>\n        <div style={{ fontSize: '12px' }}> index: {index}</div>\n      </div>\n    )\n  }}\n</Matrix>\n")),(0,o.kt)("p",null,(0,o.kt)("img",i({parentName:"p"},{src:"http://with.muyunyun.cn/e99997d480a89b1c5f244d19bd67404a.jpg-400",alt:null}))),(0,o.kt)("p",null,"Matrix 组件用于在项目中自动调整行内布局, 该组件中 render props 的参数是和当前排列数有关, 与",(0,o.kt)("inlineCode",{parentName:"p"},"排列数相关"),"的 render props 没有很好的办法转化为 Hooks, 因此 Render Props 还是有用武之地的。"))}c.isMDXComponent=!0}}]);