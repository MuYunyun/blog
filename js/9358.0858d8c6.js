(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9358],{59358:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>s});var r=t(59713),o=t.n(r),c=t(6479),a=t.n(c),i=(t(67294),t(3905));function u(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?u(Object(t),!0).forEach((function(e){o()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var p={};function s(n){var e=n.components,t=a()(n,["components"]);return(0,i.kt)("wrapper",l(l(l({},p),t),{},{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"适配者模式"),(0,i.kt)("p",null,"适配者模式: 主要用于解决两个接口之间不匹配的问题。"),(0,i.kt)("h3",null,"demo"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-js"}),"// 老接口\nconst zhejiangCityOld = (function() {\n  return [\n    {\n      name: 'hangzhou',\n      id: 11,\n    },\n    {\n      name: 'jinhua',\n      id: 12\n    }\n  ]\n}())\n\nconsole.log(getZhejiangCityOld())\n\n// 新接口希望是下面形式\n{\n  hangzhou: 11,\n  jinhua: 12,\n}\n\n// 这时候就可采用适配者模式\nconst adaptor = (function(oldCity) {\n  const obj = {}\n  for (let city of zhejiangCityOld) {\n    obj[city.name] = city.id\n  }\n  return obj\n}())\n")))}s.isMDXComponent=!0}}]);