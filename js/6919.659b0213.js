(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6919],{66919:n=>{n.exports="## React 特性剪辑(版本 16.0 ~ 16.9)\n\n> Before you're going to hate it, then you're going to love it.\n\n![](http://with.muyunyun.cn/18be54d827e9dde7d9e29d029e329334.jpg-400)\n\n### Concurrent Render(贯穿 16)\n\n在 18 年的 [JSConf Iceland](https://www.youtube.com/watch?v=v6iR3Zk4oDY) 上, Dan 神提到 Concurrent Render 涉及到 CPU 以及 IO 这两方面。\n\n![](http://with.muyunyun.cn/1daa3d783a4a7ed7f742882a08a3aa09.jpg-400)\n\nTime Slicing 对应解决左侧的问题, Suspense 对应解决了右侧的问题。它们共同要解决的是的提升用户体验, 在更多的场景下都可以做到`可交互`。而 Fiber 架构是上述两者的基石。\n\n#### Time Slicing\n\n在 16 之前的版本的渲染过程可以想象成一次性潜水 30 米, 在这期间做不了其它事情(Stack Reconciler);\n\n![](http://with.muyunyun.cn/39db8e34ec1ce048695c3bde132a739e.jpg-200)\n\n痛点概括:\n\n* 一次性渲染到底\n* 中途遇到优先级更高的事件无法调整相应的顺序\n\n接着拿上面的潜水例子为例, 现在变为可以每次潜 10 米, 分 3 个 chunk 进行; chunk 和 chunk 之间通过链表连接; chunk 间插入优先级更高的任务, 先前的任务被抛弃。\n\n![](http://with.muyunyun.cn/02a6b5ac36b12b3c676157ef3985fe4a.jpg-200)\n\n> 开启 Fiber 后, 获取异步数据的方法应放到 render 后面的生命周期钩子里(phase 2 阶段)进行, 因为 render 前面的生命周期钩子(phase 1 阶段)会被执行多次\n\n> 注意: 并没有缩短原先组件的渲染时间(甚至还加长了), 但用户却能感觉操作变流畅了。\n\n> [requestIdleCallback()](https://developers.google.com/web/updates/2015/08/using-requestidlecallback): 借力此 api, 浏览器能在空闲的时间处理低优先级的事。\n\n#### Suspense(16.6, 16.8, 16.9)\n\nSuspense 意思是能暂停当前组件的渲染, 当完成某件事以后再继续渲染。\n\n* `code splitting`(16.6, 已上线): 文件懒加载。在此之前的实现方式是 [react-loadable](https://github.com/jamiebuilds/react-loadable);\n* `Concurrent mode`(2019 年 Q1 季度): 并发模式;\n* `data fetching`(2019 年中): 可以控制等所有数据都加载完再呈现出数据; `Suspense` 提供一个时间参数, 若小于这个值则不进行 `loading` 加载, 若超过这个值则进行 `loading` 加载;\n\n```js\nimport React, { lazy, Suspense } from 'react'\nconst OtherComponent = lazy(() => import('./OtherComponent'))\n\nfunction MyComponent() {\n  return (\n    <Suspense fallback={<div>loading...</div>}>\n      <OtherComponent />\n    </Suspense>\n  )\n}\n```\n\n一种简单的预加载思路, 可参考 [preload](https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d)\n\n```js\nconst OtherComponentPromise = import('./OtherComponent');\nconst OtherComponent = React.lazy(() => OtherComponentPromise);\n```\n\n### render 新增的返回类型\n\n在 React16 版本中 render() 增加了一些返回类型, 到目前为止支持的返回类型如下:\n\n* React elements.\n* Arrays and fragments.\n* Portals.\n* String and numbers.\n* Booleans or null.\n\n> [render](https://reactjs.org/docs/react-component.html#render)\n\n其中 render() 支持返回 Arrays 能让我们少写一个父节点, 如下所示:\n\n```js\nconst renderArray = () => [\n  <div key=\"A\">A</div>\n  <div key=\"B\">B</div>\n]\n```\n\n> render() 支持返回数组的特性类似 [Fragments](https://reactjs.org/docs/fragments.html)(16.2), 使用 Fragments 可以不用写 key。\n\n### Portals(传送门)\n\n将 React 子节点渲染到指定的节点上\n\n案例: 实现一个 Modal 组件, [demo](https://codepen.io/gaearon/pen/yzMaBd)\n\n另外关于 Portals 做到冒泡到父节点的兄弟节点这个现象, [demo](https://codepen.io/gaearon/pen/jGBWpE), 我想可以这样子实现: 如果组件返回是 Portal 对象, 则将该组件的父组件的上的事件 copy 到该组件上。其实并不是真的冒泡到了父节点的兄弟节点上。\n\n### Error Boundaries\n\nReact 16 提供了一个新的错误捕获钩子 `componentDidCatch(error, errorInfo)`, 它能将子组件生命周期里所抛出的错误捕获, 防止页面全局崩溃。[demo](https://codepen.io/gaearon/pen/wqvxGa?editors=0010)\n\ncomponentDidCatch 并不会捕获以下几种错误\n\n* 事件机制抛出的错误(事件里的错误并不会影响渲染)\n* Error Boundaries 自身抛出的错误\n* 异步产生的错误\n* 服务端渲染\n\n### 服务端渲染\n\n服务端渲染一般是作为最后的优化手段, 这里浅显(缺乏经验)谈下 React 16 在其上的优化。\n\n在 React 16 版本中引入了 `React.hydrate()`, 它的作用主要是将相关的事件`注水`进 `html` 页面中, 同时会比较前端生成的 `html` 和服务端传到前端的 `html` 的文本内容的差异, 如果两者不一致将前端产生的文本内容替换服务端生成的(忽略属性)。\n\n### 支持自定义属性\n\n在 React 16 版本中, 支持自定义属性(推荐 `data-xxx`), 因而 React 可以少维护一份 attribute 白名单, 这也是 React 16 体积减少的一个重要因素。\n\n### Context(16.3、16.6)\n\nContext 相当于是用组件化的方式使用 global, 使用其可以共享认证的用户、首选语言(国际化)等一些全局的信息, 而不必通过组件一层层传递。\n\n以下是比较冗余的传递:\n\n```js\n<Page riderId={riderId} />\n// ... which renders ...\n<RiderDetail riderId={riderId} />\n// ... which renders ...\n<RiderLevel riderId={riderId} />\n// ... which renders ...\n<Avatar riderId={riderId} />\n```\n\n在 `Context` 之前可以传递 `<Avatar>` 本身(Component Composition 的思想), 写法如下:\n\n```js\nfunction Page(props) {\n  const avatar = <Avatar riderId={props.riderId} />\n  return <RiderDetail avatar={avatar} />\n}\n\n<Page riderId={riderId} />\n// ... which renders ...\n<RiderDetail avatar={avatar} />\n// ... which renders ...\n<RiderLevel avatar={avatar} />\n// ... which renders ...\n{ props.avatar }\n```\n\n接着是使用 `Context` 书写的例子, 写法如下:\n\n```js\nconst RiderContext = React.createContext(1) // 这里为默认值\n\nfunction Page(props) {\n  const riderId = props.riderId\n  return (\n    <RiderContext.Provider value={riderId}>\n      <RiderDetail />\n    </RiderContext.Provider>\n  )\n}\n\nfunction RiderDetail() {\n  return <RiderLevel />\n}\n\nclass RiderLevel extends React.Component {\n  static contextType = RiderContext\n  render() {\n    return <Avatar avatar={this.context} />;\n  }\n}\n```\n\n### 新的生命周期(16.3)\n\n![](https://user-images.githubusercontent.com/12389235/41266906-b6a6e75a-6e2b-11e8-8266-9597b2d57f11.png)\n\n在未来 17 的版本中, 将移除的生命周期钩子如下:\n\n* `componentWillMount()`: 移除这个 api 基于以下两点考虑:\n  * 服务端渲染: 在服务端渲染的情景下, componentWillMount 执行完立马执行 render 会导致 componentWillMount 里面执行的方法(获取数据, 订阅事件) 并不一定执行完;\n  * Concurrent Render: 在 fiber 架构下, render 前的钩子会被多次调用, 在 componentWillMount 里执行订阅事件就会产生内存泄漏;\n\n> 迁移思路, 将以前写在 `componentWillMount` 的获取数据、时间订阅的方法写进 `componentDidMount` 中;\n\n* `componentWillReceiveProps(nextProps)`: 移除这个 api 基于如下考虑:\n  * 语义不太契合逻辑\n  * phase1 阶段会多次调用\n\n新的钩子 `getDerivedStateFromProps()` 更加纯粹, 它做的事情是将新传进来的属性和当前的状态值进行对比, 若不一致则更新当前的状态。\n\n```js\ngetDerivedStateFromProps(nextProps, prevState) {\n  if (nextProps.riderId !== prevState.riderId) {\n    return {\n      riderId: nextProps.riderId\n    }\n  }\n  // 返回 null 则表示 state 不用作更新\n  return null\n}\n```\n\n另外关于 componentWillReceiveProps() 在 15 里大量使用的一个场景: 比如切换 tab 时都要重新获取当前页面的数据, 之前通常会这么做:\n\n```js\ncomponentWillReceiveProps(nextProps) {\n  if (nextProps.riderId !== this.props.riderId) {\n    fetchData(nextProps.riderId)\n  }\n}\n```\n\n在 16 中可以使用 memoize 来代替, 写法如下:\n\n```js\nimport memoize from \"memoize-one\"\n\nclass Demo extends React.Component {\n  fetchDataDemo = memoize((riderId) => fetchData(riderId))\n\n  componentDidUpdate() {\n    fetchDataDemo(this.props.riderId)\n  }\n}\n```\n\n* `componentWillUpdate()`: 目前将其理解为和 `componentWillMount` 一样的情况\n\n在 React 16.3 的版本中, 新加入了两个生命周期:\n\n* `getDerivedStateFromProps(nextProps, prevState)`: 更加语义化, 用来替代 `componentWillMount()` 和 `componentWillReceiveProps(nextProps)`;\n\n* `getSnapshotBeforeUpdate(prevProps, prevState)`: 可以将该钩子返回的结果传入 componentDidUpdate 的第三个参数中, 从而达到 dom 数据统一。用来替代 componentWillUpdate();\n\n> 具体 demo 可见 [Update on Async Rendering](https://react.docschina.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state)\n\n### React.memo(16.6)\n\n`React.memo` 是一个高阶组件, 它使无状态组件拥有有状态组价中的 `shouldComponentUpdate()` 以及 `PureComponent` 的能力。\n\n```js\nconst MyComponent = React.memo(function MyComponent(props) {\n  ...\n})\n```\n\n### Hooks(16.7)\n\n在 React 16.7 之前, React 有两种形式的组件, 有状态组件(类)和无状态组件(函数)。Hooks 的意义就是赋能先前的无状态组件, 让之变为有状态。这样一来更加契合了 React 所推崇的函数式编程。\n\n接下来梳理 Hooks 中最核心的 2 个 api, `useState` 和 `useEffect`\n\n#### useState\n\nuseState 返回状态和一个更新状态的函数\n\n```js\nconst [count, setCount] = useState(initialState)\n```\n\n使用 Hooks 相比之前用 class 的写法最直观的感受是更为简洁\n\n```js\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  )\n}\n```\n\n#### useEffect(fn)\n\n在每次 render 后都会执行这个钩子。可以将它当成是 `componentDidMount`、`componentDidUpdate`、`componentWillUnmount` 的合集。因此使用 useEffect 比之前优越的地方在于:\n\n1. 可以避免在 `componentDidMount、componentDidUpdate` 书写重复的代码;\n2. 可以将关联逻辑写进一个 `useEffect`(在以前得写进不同生命周期里);\n\n### React 的未来\n\n![](http://with.muyunyun.cn/fd1dd7ca2ba34bebef2d489c63befa25.jpg-200)\n\n今年的 React Conf 的一张图, 可以看到 React 从出来到现在势头呈稳健上升趋势, 并在 2018 年这个节点上把 Jquery 拉下了王座。但可以看见 React 未来还有一段很长的路要走。\n\n### 相关链接\n\n* [reactjs.org](https://reactjs.org/blog/all.html)"}}]);