(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5766],{65766:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>m});var r=t(59713),a=t.n(r),l=t(6479),u=t.n(l),i=(t(67294),t(3905));function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){a()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var c={};function m(e){var n=e.components,t=u()(e,["components"]);return(0,i.kt)("wrapper",o(o(o({},c),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"343. Integer Break"),(0,i.kt)("p",null,"Given an integer n, break it into the sum of k ",(0,i.kt)("inlineCode",{parentName:"p"},"positive integers"),", where k >= 2, and ",(0,i.kt)("inlineCode",{parentName:"p"},"maximize")," the product of those integers."),(0,i.kt)("p",null,"Return the maximum product you can get."),(0,i.kt)("p",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"Input: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 × 1 = 1.\n")),(0,i.kt)("p",null,"Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"Input: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Constraints:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"2 <= n <= 58")))),(0,i.kt)("h3",null,"Analyze"),(0,i.kt)("p",null,"n 拆分若干数后的乘积可拆分为: ",(0,i.kt)("inlineCode",{parentName:"p"},"1 * integerBreak(n - 1)"),"、",(0,i.kt)("inlineCode",{parentName:"p"},"2 * integerBreak(n - 2)")," ...,  ",(0,i.kt)("inlineCode",{parentName:"p"},"x * integerBreak(n - x)"),"。"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"n === 2\n1 * 1\n\nn === 3\n1 * integerBreak(2)\n\nn === 4\n1 * integerBreak(3)\n2 * integerBreak(2)\n\nn === 5\n1 * integerBreak(4)\n2 * integerBreak(3)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"递归思路(自顶向下)如下")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number} n\n * @return {number}\n */\nvar cache = {}\nvar integerBreak = function(n) {\n  if (n === 1) return 1\n  if (cache[n]) return cache[n]\n  let result = 0\n  // here the i means for the value to be subtracted\n  for (let i = 1; i < n; i++) {\n    if (i > n - i) {\n      break\n    }\n    result = Math.max(result, i * Math.max(integerBreak(n - i), n - i))\n  }\n  return cache[n] = result\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"接着使用动态规划(自底向上)思路实现:")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number} n\n * @return {number}\n */\nvar cache = {\n  1: 1\n}\nvar integerBreak = function(n) {\n  if (n === 1) return 1\n\n  let result = 0\n  // here the i means for the value to calc\n  for (let i = 2; i <= n; i++) {\n    // here the m means for the value to be subtracted\n    for (let m = 1; m < i; m++) {\n      result = Math.max(result, m * Math.max(cache[i - m], i - m))\n    }\n    cache[i] = result\n  }\n\n  return result\n}\n")))}m.isMDXComponent=!0}}]);