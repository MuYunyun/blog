(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1130],{1130:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>s});var r=n(59713),o=n.n(r),l=n(6479),i=n.n(l),p=(n(67294),n(3905));function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var h={};function s(t){var e=t.components,n=i()(t,["components"]);return(0,p.kt)("wrapper",u(u(u({},h),n),{},{components:e,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"111. Minimum Depth of Binary Tree"),(0,p.kt)("p",null,"Given a binary tree, find its minimum depth."),(0,p.kt)("p",null,"The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node."),(0,p.kt)("p",null,"Note: A leaf is a node with no children."),(0,p.kt)("p",null,"Example:"),(0,p.kt)("p",null,"Given binary tree ","[3,9,20,null,null,15,7]",","),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nreturn its minimum depth = 2.\n")),(0,p.kt)("h3",null,"Analyze"),(0,p.kt)("p",null,"Way1: recursive"),(0,p.kt)("p",null,"陷阱: 需注意的是其中一个子节点为空, 另外一个子节点不为空, 需要以不为空的子节点那边来计数。比如"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"    0\n   / \\\n  1  null\n")),(0,p.kt)("p",null,"此时最短路径为 2 而不是 1。"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *   this.val = val;\n *   this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function(root) {\n  if (!root) return 0\n  const leftRootMinDepth = minDepth(root.left)\n  const rightRootMinDepth = minDepth(root.right)\n  if (leftRootMinDepth === 0 || rightRootMinDepth === 0) {\n    return Math.max(leftRootMinDepth, rightRootMinDepth) + 1\n  }\n  return Math.min(leftRootMinDepth, rightRootMinDepth) + 1\n};\n")),(0,p.kt)("h3",null,"Sister title"),(0,p.kt)("p",null,"104"))}s.isMDXComponent=!0}}]);