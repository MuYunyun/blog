(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6572],{66572:n=>{n.exports="### 199.Binary Tree Right Side View\n\nGiven a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered `from top to bottom`.\n\nExample:\n\n```js\nInput: [1, 2, 3, null, 5, null, 4]\nOutput: [1, 3, 4]\n```\n\nExplanation:\n\n   1            <---\n /   \\\n2     3         <---\n \\     \\\n  5     4       <---\n\n### Analyze\n\n将题目表述转化下为: 展示当前行的最右侧元素即可; 该题考察的是`树的广度遍历(BFS)`, 运用到了`队列`相关知识。\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar rightSideView = function(root) {\n  const printList = []\n  if (!root) { return [] }\n  const list = []\n  list.push({ level: 0, node: root })\n\n  while(list.length > 0) {\n    const { level, node } = list.shift()\n    if (!printList[level]) {\n      printList[level] = []\n    }\n    printList[level].push(node.val)\n\n    node.left && list.push({ level: level + 1, node: node.left })\n    node.right && list.push({ level: level + 1, node: node.right })\n  }\n\n  const result = []\n  printList.map(printListArr => {\n    result.push(printListArr[printListArr.length - 1])\n  })\n  return result\n}\n```\n\n### Similar Title\n\n102(Sister Title)、107、103"}}]);