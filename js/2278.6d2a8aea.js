(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2278],{42278:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>m});var r=n(59713),a=n.n(r),l=n(6479),o=n.n(l),p=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var c={};function m(e){var t=e.components,n=o()(e,["components"]);return(0,p.kt)("wrapper",u(u(u({},c),n),{},{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"事件类型"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"load: window/img/script")),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"img 标签上设置 src 属性, 就开始请求资源; script 设置完 src 要加载到 dom 上才开始请求资源。")),(0,p.kt)("h3",null,"事件委托"),(0,p.kt)("p",null,"在 ",(0,p.kt)("inlineCode",{parentName:"p"},"document")," 上使用事件委托, 好处如下:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"添加时机不受限(在 dom 任何生命周期的里都可添加)"),(0,p.kt)("li",{parentName:"ul"},"添加事件更快"),(0,p.kt)("li",{parentName:"ul"},"内存消耗也更小"),(0,p.kt)("li",{parentName:"ul"},"减少事件的垃圾回收(如果绑定在低层级的标签上, 标签内容消失时, 还需要手动执行清空事件内存)")),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},(0,p.kt)("a",u({parentName:"p"},{href:"https://github.com/MuYunyun/cpreact/issues/13"}),"事件机制优化"))),(0,p.kt)("h4",null,"区分 target 和 currentTarget"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"currentTarget")," 可以用于确定是",(0,p.kt)("inlineCode",{parentName:"li"},"具体元素"),"上触发的事件;"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"target")," 用于事件委托;")),(0,p.kt)("p",null,"具体差异可以看以下 ",(0,p.kt)("inlineCode",{parentName:"p"},"demo"),", 当点击 ",(0,p.kt)("inlineCode",{parentName:"p"},"你好")," 时, 控制台输出两个 ",(0,p.kt)("inlineCode",{parentName:"p"},"true"),"; 当点击 ",(0,p.kt)("inlineCode",{parentName:"p"},"muyunyun")," 时, 控制台输出一个 ",(0,p.kt)("inlineCode",{parentName:"p"},"true")," 和一个 ",(0,p.kt)("inlineCode",{parentName:"p"},"false"),"。"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-html"}),"<body>\n    <p id=\"test\">你好, <span>muyunyun</span></p>\n    <script>\n        const content = document.getElementById('test')\n        content.addEventListener('click', function(e) {\n            console.log('currentTarget', e.currentTarget, 'target', e.target)\n            console.log(this === e.currentTarget) // true\n            console.log(this === e.target)        // false\n        })\n    <\/script>\n</body>\n")),(0,p.kt)("h3",null,"自定义事件"),(0,p.kt)("p",null,"(笔者认为)自定义事件可以归类到发布订阅模式下。"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-html"}),"<input id=\"sec\" />\n<script>\n  // 订阅\n  document.getElementById('sec').addEventListener('custom', function (obj) {\n    console.log(obj.detail) // { demo: this ia a demo }\n  })\n\n  // 发布\n  var ev = new CustomEvent('custom', { detail: { demo: 'this is a demo' } })\n  document.getElementById('sec').dispatchEvent(ev)\n<\/script>\n")),(0,p.kt)("h3",null,"stopPropagation vs stopImmediatePropagation"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"stopPropagation: stop propagation ",(0,p.kt)("inlineCode",{parentName:"li"},"from child element to parent element"),";"),(0,p.kt)("li",{parentName:"ul"},"stopImmediatePropagation: stop propagation ",(0,p.kt)("inlineCode",{parentName:"li"},"the remaining same event type in one element"),";")))}m.isMDXComponent=!0}}]);