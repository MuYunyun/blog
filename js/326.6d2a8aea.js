(self.webpackChunkblog=self.webpackChunkblog||[]).push([[326],{326:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),l=t.n(r),a=t(6479),o=t.n(a),i=(t(67294),t(3905));function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var s={};function c(e){var n=e.components,t=o()(e,["components"]);return(0,i.kt)("wrapper",p(p(p({},s),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"110. Balanced Binary Tree"),(0,i.kt)("p",null,"Given a binary tree, determine if it is height-balanced."),(0,i.kt)("p",null,"For this problem, a height-balanced binary tree is defined as:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"a binary tree in which the left and right subtrees of every node differ in height by no more than 1.")),(0,i.kt)("p",null,"Example 1:"),(0,i.kt)("p",null,"Given the following tree ","[3,9,20,null,null,15,7]",":"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,i.kt)("p",null,"Return true."),(0,i.kt)("p",null,"Example 2:"),(0,i.kt)("p",null,"Given the following tree ","[1,2,2,3,3,null,null,4,4]",":"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n")),(0,i.kt)("p",null,"Return false."),(0,i.kt)("h3",null,"Analyze"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"自顶向下",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"终止条件: 当前访问节点为 null;"),(0,i.kt)("li",{parentName:"ul"},"循环逻辑: 当前节点的左、右子节点都为 height-balanced;")))),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced = function(root) {\n  if (!root) return true\n  return isBalanced(root.left) && isBalanced(root.right) && Math.abs(deep(root.left) - deep(root.right)) <= 1\n};\n\n// the thought is same as [104.Maximum Depth of Binary Tree](https://github.com/MuYunyun/blog/blob/master/LeetCode/104.Maximum_Depth_of_Binary_Tree.md)\nvar deep = (node) => {\n  if (!node) return 0\n  return Math.max(deep(node.left), deep(node.right)) + 1\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"自底向上",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"策略: 提前终止")))),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n")),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced = function(root) {\n  return deep(root) === -1 ? false : true\n};\n\nvar deep = (node) => {\n  if (!node) return 0\n  const leftNode = deep(node.left)\n  if (leftNode === -1) return -1\n  const rightNode = deep(node.right)\n  if (rightNode === -1) return -1\n  return Math.abs(leftNode - rightNode) <= 1 ? Math.max(leftNode, rightNode) + 1 : -1\n}\n")))}c.isMDXComponent=!0}}]);