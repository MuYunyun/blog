(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2750],{62750:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r(59713),c=r.n(n),o=r(6479),i=r.n(o),a=(r(67294),r(3905));function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){c()(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var p={};function u(e){var t=e.components,r=i()(e,["components"]);return(0,a.kt)("wrapper",s(s(s({},p),r),{},{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"// ---- some useful fn to do with linked_list ----\n\n/**\n * create tree node through tree array\n * this way supports three level tree temperaryly\n * becalse most test case in leetcode is less than 3 level.\n * input: [3, 9, 20, 6, null, 15, 7]\n * output:\n         3\n        / \\\n       9  20\n     /   /  \\\n    6   15   7\n */\nfunction createTree(treeArr) {\n  function TreeNode(val) {\n    this.val = val\n    this.left = this.right = null\n  }\n  const cacheObj = {}\n  for (let i = 0; i < treeArr.length; i++) {\n    cacheObj[`tree${i}`] = typeof treeArr[i] === 'number' && new TreeNode(treeArr[i])\n  }\n\n  for (let i = 0; i < treeArr.length; i++) {\n    cacheObj[`tree${2 * i + 1}`] && (cacheObj[`tree${i}`].left = cacheObj[`tree${2 * i + 1}`])\n    cacheObj[`tree${2 * i + 2}`] && (cacheObj[`tree${i}`].right = cacheObj[`tree${2 * i + 2}`])\n  }\n\n  return cacheObj['tree0']\n}\n")))}u.isMDXComponent=!0}}]);