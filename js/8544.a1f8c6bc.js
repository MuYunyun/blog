(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8544],{88544:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>i});var r=t(59713),a=t.n(r),l=t(6479),u=t.n(l),s=(t(67294),t(3905));function p(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function m(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?p(Object(t),!0).forEach((function(e){a()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var c={};function i(n){var e=n.components,t=u()(n,["components"]);return(0,s.kt)("wrapper",m(m(m({},c),t),{},{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h3",null,"Contains Duplicate II"),(0,s.kt)("p",null,"Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums","[i]"," = nums","[j]"," and the absolute difference between i and j is at most k."),(0,s.kt)("pre",null,(0,s.kt)("code",m({parentName:"pre"},{className:"language-js"}),"Example 1:\n\nInput: nums = [1,2,3,1], k = 3\nOutput: true\n")),(0,s.kt)("pre",null,(0,s.kt)("code",m({parentName:"pre"},{className:"language-js"}),"Example 2:\n\nInput: nums = [1,0,1,1], k = 1\nOutput: true\n")),(0,s.kt)("pre",null,(0,s.kt)("code",m({parentName:"pre"},{className:"language-js"}),"Example 3:\n\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false\n")),(0,s.kt)("h3",null,"解法"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"遍历当前 nums, 维护一个队列 arr 来存储 k 个数值, 判断该队列 arr 中是否包含当前遍历值 nums","[l]",";",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"若有, 则返回 true;"))),(0,s.kt)("li",{parentName:"ul"},"若遍历结束, 则返回 false;")),(0,s.kt)("pre",null,(0,s.kt)("code",m({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n  const arr = []\n\n  let l = 0\n  let r = nums.length\n\n  while (l < r) {\n    if (arr.indexOf(nums[l]) > -1) {\n      return true\n    }\n    if (arr.length < k) {\n      arr.push(nums[l])\n    } else if (arr.length >= k && k > 0) {\n      arr.shift(arr[0])\n      arr.push(nums[l])\n    }\n    l++\n  }\n\n  return false\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",m({parentName:"p"},{src:"http://with.muyunyun.cn/db151c5e5eef41a30b2e8cbca9fd417e.jpg-400",alt:null}))),(0,s.kt)("p",null,"算法时间复杂度是 NlogN 级别的, 执行时间花了 1800ms。"),(0,s.kt)("pre",null,(0,s.kt)("code",m({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n  const temSet = new Set()\n\n  let l = 0\n  let r = nums.length\n\n  while (l < r) {\n    if (temSet.has(nums[l])) {\n      return true\n    }\n    if (temSet.size < k) {\n      temSet.add(nums[l])\n    } else if (temSet.size >= k && k > 0) {\n      temSet.delete(nums[l - k])\n      temSet.add(nums[l])\n    }\n    l++\n  }\n\n  return false\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",m({parentName:"p"},{src:"http://with.muyunyun.cn/c756eba46d7c18d4fe4acfbc011e3a78.jpg-400",alt:null}))),(0,s.kt)("p",null,"使用 Set 用同样的思路实验, 时间复杂度为 O(N), 其执行时间比之前用数组队列的实现快了很多。"),(0,s.kt)("h3",null,"Sister Title"),(0,s.kt)("p",null,"217、220"))}i.isMDXComponent=!0}}]);