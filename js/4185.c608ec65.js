(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4185],{4185:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>i});var a=t(59713),r=t.n(a),o=t(6479),u=t.n(o),l=(t(67294),t(3905));function m(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?m(Object(t),!0).forEach((function(e){r()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var c={};function i(n){var e=n.components,t=u()(n,["components"]);return(0,l.kt)("wrapper",s(s(s({},c),t),{},{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h3",null,"198.House Robber"),(0,l.kt)("p",null,"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that ",(0,l.kt)("inlineCode",{parentName:"p"},"adjacent houses have security systems connected")," and it will automatically contact the police if two adjacent houses were broken into on the same night."),(0,l.kt)("p",null,"Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police."),(0,l.kt)("p",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Input: nums = [1,2,3,1]\nOutput: 4\n")),(0,l.kt)("p",null,"Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."),(0,l.kt)("p",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Input: nums = [2,7,9,3,1]\nOutput: 12\n")),(0,l.kt)("p",null,"Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Constraints:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"1 <= nums.length <= 100"),(0,l.kt)("li",{parentName:"ul"},"0 <= nums","[i]"," <= 400")))),(0,l.kt)("h3",null,"Analyze"),(0,l.kt)("p",null,"思考🤔:"),(0,l.kt)("pre",null,(0,l.kt)("code",s({parentName:"pre"},{className:"language-js"}),"                                [0, n - 1]\n                            /       |  ...       \\             \\\n                    [2, n - 1]     [3, n - 1]    [4, n - 1]  ...  [n - 1]\n              /\n      [4, n - 1]: 此时找到了重复子项\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"状态的定义"),"(即函数的定义): 考虑偷取 ",(0,l.kt)("inlineCode",{parentName:"li"},"[m, n - 1]")," 范围内的房子"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"状态转移"),": f(0) = ",(0,l.kt)("inlineCode",{parentName:"li"},"Math.max(v(0) + f(2), v(1) + f(3), v(2) + f(4), ..., v(n - 3) + f(n - 1), v(n - 2), v(n - 1))"))),(0,l.kt)("p",null,"记忆化递归:"),(0,l.kt)("pre",null,(0,l.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n  return find(nums, {}, 0)\n}\n\nvar find = function(nums, cache, start) {\n  if (typeof nums[start] !== 'number') return 0\n  const length = nums.length\n  let sum = 0\n  for (let i = start; i < length; i++) {\n    if (typeof cache[i] !== 'number') {\n      cache[i] = find(nums, cache, i + 2)\n    }\n    sum = Math.max(sum, nums[i] + cache[i])\n  }\n  return sum\n}\n")),(0,l.kt)("p",null,"动态规划:"),(0,l.kt)("pre",null,(0,l.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n  const length = nums.length\n  const cache = {}\n  let max = 0\n  for (let i = length - 1; i >= 0; i--) {\n    for (let m = i; m <= length - 1; m++) {\n      if (typeof cache[m] !== 'number') {\n        cache[m] = Math.max(nums[m] + (cache[m + 2] || 0), cache[m + 1] || 0)\n      }\n      max = Math.max(max, cache[m])\n    }\n  }\n  return max\n}\n")))}i.isMDXComponent=!0}}]);