(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1398],{31398:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>u});var a=t(59713),l=t.n(a),i=t(6479),r=t.n(i),o=(t(67294),t(3905));function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var c={};function u(e){var n=e.components,t=r()(e,["components"]);return(0,o.kt)("wrapper",s(s(s({},c),t),{},{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",null,"Tabs 组件"),(0,o.kt)("p",null,"Tabs 组件在 Swipe 的组件上开发。"),(0,o.kt)("h3",null,"心得"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"在开发基础组件时(涉及到滚动、动画), ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," 这个钩子还是会被大量用到的。在 ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidMount/componentDidUpdate")," 中使用 ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," 能勾静默刷新(即不再次走生命周期) dom 元素。")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"为了实现下划线平缓滑动的效果, 将其设计为单独一个 div。这里踩了个坑: 最开始是计算下划线的长度以及距离左侧的位置时在父节点使用 ",(0,o.kt)("inlineCode",{parentName:"p"},"getBoundingClientRect"),", 此时为了得到子节点的宽度以及子节点间相关距离必须要减去相应的 ",(0,o.kt)("inlineCode",{parentName:"p"},"margin、padding")," 属性的值。后来修正为在子节点上使用 ",(0,o.kt)("inlineCode",{parentName:"p"},"getBoundingClientRect")," 减少了大量的代码。"))),(0,o.kt)("h3",null,"Tab 的平滑滚动"),(0,o.kt)("p",null,"场景: 当 tabs 的数量大于 4 时可以滑动, 点击对应的 tab 项时将相应的 tab 移动到屏幕中间。"),(0,o.kt)("p",null,"首先使用 ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollTo")," 这个 api, 并使用了 ",(0,o.kt)("inlineCode",{parentName:"p"},"behavior: 'smooth'")," 来完成平滑过渡效果。"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"if (tabs.length > 4) {\n  (this as any)[`tabScroll`].scrollTo({\n    left: this.tabMiddleDistance(),\n    top: 0,\n    behavior: 'smooth'\n  })\n}\n")),(0,o.kt)("p",null,"但是 ",(0,o.kt)("inlineCode",{parentName:"p"},"behavior: 'smooth'")," 在 ios 机子上是没有效果的, 所以结合 ",(0,o.kt)("inlineCode",{parentName:"p"},"requestAnimationFrame")," 产生相应的兜底方案。"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/* 平滑滚动处理代码, 兼容 IOS */\n// elm: 移动元素\n// distance: 移动距离\n// direction: 移动方向 horizontal: 水平 vertical: 竖直\n// const scrollHorizontalTo = (elm: any, distance: number, direction = 'horizontal') => {\nconst scrollTo = (elm: any, distance: number, direction = 'horizontal') => {\n  let position: number = 0\n\n  if (direction === 'horizontal') {\n    position = elm.scrollLeft\n  } else if (direction === 'vertical') {\n    position = elm.scrollTop\n  }\n  const diff = distance - position\n\n  const callback = () => {\n    position = position + diff / 20\n    if (direction === 'horizontal') {\n      elm.scrollTo(position, 0)\n    } else {\n      elm.scrollTo(0, position)\n    }\n\n    // 若距离目标距离小于 5, 则直接跳到目标位置。\n    if (Math.abs(distance - position) < 5) {\n      if (direction === 'horizontal') {\n        elm.scrollTo(distance, 0)\n      } else if (direction === 'vertical') {\n        elm.scrollTo(0, distance)\n      }\n    } else {\n      requestAnimationFrame(callback)\n    }\n  }\n\n  requestAnimationFrame(callback)\n}\n")),(0,o.kt)("p",null,"这写法有如下坑"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"scrollTo 也是异步行为, 因此 requestAnimationFrame 动画是失效的;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"基于距离"),"判断精度不是很准确")),(0,o.kt)("p",null,"因此改用为 scrollLeft, 以及基于时间来调整"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"function scrollToX(value: number, node: HTMLElement) {\n  const scrollLeft = node.scrollLeft\n  const startTime = Date.now()\n  const frameFunc = () => {\n    const timestamp = Date.now()\n    const time = timestamp - startTime\n    node.scrollLeft = easeInOutCubic(time, scrollLeft, value, 450)\n    if (time < 450) {\n      requestAnimationFrame(frameFunc)\n    } else {\n      setScrollTop(value, node)\n    }\n  }\n  requestAnimationFrame(frameFunc)\n}\n")),(0,o.kt)("h4",null,"缓动动画"),(0,o.kt)("p",null,"缓动动画公式参数:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"time: 当前已运动的时间;"),(0,o.kt)("li",{parentName:"ul"},"begin: 距离的初始值;"),(0,o.kt)("li",{parentName:"ul"},"change: 目标值和初始值差值;"),(0,o.kt)("li",{parentName:"ul"},"duration: 运动总时间;")),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"function linear(time, begin, change, duration) {\n  return change * (time / duration) + begin\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Linear"),": 线性匀速运动效果;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Quadratic"),": 二次方的缓动（t^2）;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Cubic"),": 三次方的缓动（t^3）;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Quartic"),": 四次方的缓动（t^4）;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Quintic"),": 五次方的缓动（t^5）;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Sinusoidal"),": 正弦曲线的缓动（sin(t)）;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Exponential"),": 指数曲线的缓动（2^t）;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Circular"),": 圆形曲线的缓动（sqrt(1-t^2)）;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Elastic"),": 指数衰减的正弦曲线缓动;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Back"),": 超过范围的三次方缓动（(s+1)",(0,o.kt)("em",{parentName:"li"},"t^3 – s"),"t^2）;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Bounce"),": 指数衰减的反弹缓动;")),(0,o.kt)("p",null,"除了 Linear 外, 其余每个效果都分三个缓动方式, 分别是:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"easeIn"),": 从 0 开始加速的缓动, 也就是先慢后快;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"easeOut"),": 减速到 0 的缓动, 也就是先快后慢;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"easeInOut"),": 前半段从 0 开始加速, 后半段减速到 0 的缓动;")),(0,o.kt)("p",null,"以 ",(0,o.kt)("inlineCode",{parentName:"p"},"Quadratic")," 为例, ",(0,o.kt)("a",s({parentName:"p"},{href:"https://github.com/tweenjs/tween.js/blob/master/src/Tween.js#L534-L558"}),"源码"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/* k 取值范围为 [0, 1] */\nTWEEN.Easing = {\n    Quadratic: {\n        In: function (k) {\n            return k * k;\n        },\n        Out: function (k) {\n            return k * (2 - k);\n    },\n    // k 为 [0, 0.5) 时, 使用 In 公式;\n    // k 为 [0.5, 1] 时, 使用 out 公式;\n        InOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k;\n            }\n            return - 0.5 * (--k * (k - 2) - 1);\n        }\n    },\n}\n")),(0,o.kt)("p",null,"in:"),(0,o.kt)("p",null,(0,o.kt)("img",s({parentName:"p"},{src:"http://with.muyunyun.cn/ac0ce9fe36c1169eec182b16aa9307b0.jpg",alt:null}))),(0,o.kt)("p",null,"out:"),(0,o.kt)("p",null,(0,o.kt)("img",s({parentName:"p"},{src:"http://with.muyunyun.cn/281a10bf309065e0d879ee087be5ce10.jpg",alt:null}))),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"const easeInOutCubic = (time: number, begin: number, change: number, d: number) => {\n  const cc = change - begin\n  time /= d / 2\n  if (time < 1) {\n    return (cc / 2) * time * time * time + begin\n  } else {\n    return (cc / 2) * ((time -= 2) * time * time + 2) + begin\n  }\n}\n")),(0,o.kt)("h3",null,"贝塞尔曲线和缓动动画的关系?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",s({parentName:"li"},{href:"https://juejin.im/post/5b854e1451882542fe28a53d"}),"贝塞尔曲线的推导"))),(0,o.kt)("p",null,"目前的理解: 贝塞尔的方程式和缓动动画的公式是两条并列的主线, 使用它们中的任意一个都可以完成 JavaScript 的动画效果。"),(0,o.kt)("h3",null,"When click tab, how to move it center?"),(0,o.kt)("p",null,(0,o.kt)("img",s({parentName:"p"},{src:"http://with.muyunyun.cn/71c277598fff27600479ba12c8cd04aa.jpg",alt:null}))),(0,o.kt)("h3",null,"开发坑点"),(0,o.kt)("p",null,"背景: ",(0,o.kt)("inlineCode",{parentName:"p"},"Tab")," 下划线随着内容栏的滑动而动态滑动。"),(0,o.kt)("p",null,"难点: 如何达到原生的顺滑效果。目前的方案是减少 ",(0,o.kt)("inlineCode",{parentName:"p"},"getBoundingClientRect")," 的调用次数, 将需多次获取的值进行缓存。"),(0,o.kt)("h3",null,"开发坑点(五星)"),(0,o.kt)("p",null,"背景坑点: ",(0,o.kt)("inlineCode",{parentName:"p"},"tab")," 栏是可以滑动的, 在使用 ",(0,o.kt)("inlineCode",{parentName:"p"},"this.contentRectLeft = elm.getBoundingClientRect().left")," 进行缓存时, 在 ",(0,o.kt)("inlineCode",{parentName:"p"},"tab")," 滑动后期待取得的是 ",(0,o.kt)("inlineCode",{parentName:"p"},"tab")," 距离",(0,o.kt)("inlineCode",{parentName:"p"},"当前视口"),"左侧的值, 但是实际获取到的是当前 ",(0,o.kt)("inlineCode",{parentName:"p"},"tab")," 距离滚动条最左侧的值。相关代码如下:"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"afterChangeTab = (index: number) => {\n  const { tabDirection } = this.props\n  if (tabDirection === 'horizontal') {\n    ...\n    this.tabMove(this.tabMiddleDistance) // ①\n    this.contentRectLeft = (this as any)[`tab${index}`].getBoundingClientRect().left // ②\n    console.log(this.contentRectLeft) // 这个地方打印的是当前 `tab` 距离滚动条最左侧的值\n  }\n}\n\ntabMove = (distance: number) => {\n  const { tabs, tabDirection } = this.props\n  // 如果是水平滑动时且 tab 栏的数量大于 4, tab 栏可滑动\n  if (tabDirection === 'horizontal' && tabs.length > 4) {\n    scrollTo((this as any)[`tabScroll`], distance, 'horizontal')\n  }\n  ...\n}\n")),(0,o.kt)("p",null,"造成的原因是调用 ",(0,o.kt)("inlineCode",{parentName:"p"},"this.tabMove")," 中的 ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollTo")," 方法里调用了 ",(0,o.kt)("inlineCode",{parentName:"p"},"requestAnimationFrame"),", 其也是一个异步的钩子。所以 ② 的代码执行是由于 ",(0,o.kt)("inlineCode",{parentName:"p"},"requestAnimationFrame")," 的执行的！目前的解决方法只能取消 ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollTo")," 方法的调用尽管 tab 的滚动比较僵硬, 但是确保了 ",(0,o.kt)("inlineCode",{parentName:"p"},"this.contentRectLeft")," 缓存的值的准确性。"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"tabMove = (distance: number) => {\n  const { tabs, tabDirection } = this.props\n  // 如果是水平滑动时且 tab 栏的数量大于 4, tab 栏可滑动\n  if (tabDirection === 'horizontal' && tabs.length > 4) {\n    // scrollTo 里面有了 requestAnimationFrame 方法, 以及 scrollTo 都是一个异步的钩子, 会造成缓存\n    // scrollTo((this as any)[`tabScroll`], distance, 'horizontal')\n    // ;(this as any)[`tabScroll`].scrollTo({\n    //   left: distance,\n    //   top: 0,\n    //   behavior: 'smooth',\n    // })\n    ;(this as any)[`tabScroll`].scrollLeft = distance\n  }\n  ...\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"多使用小黄鸭笔记法, 就能理出眉目, 理逻辑的时候可能觉得浪费时间, 但是这往往是解决问题最高效的方法。")),(0,o.kt)("h3",null,"关于设计模式"),(0,o.kt)("p",null,"在开发组件 Tabs\\Checkbox\\Radio... 有以下两种模式可以选择"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"配置模式，标签的标题和内容放在 options/children")),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"<Tabs options={[{\n  content: [],\n  disabled: true,\n}]} />\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"children 模式：")),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"<Tab>\n  <Tab.item>标签一</Tab.item>\n  <Tab.item>标签二</Tab.item>\n</Tab>\n")),(0,o.kt)("p",null,"相对配置模式, children 模式更加贴近 React 的组件化编程。但是使用者可能对以下写法不生效会产生困惑。因为大多数组件库只会支持 Tab.Item 在 Tab 后面的情况。"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"renderChildren = () => {\n  return <>\n    <Tab.item>标签一</Tab.item>\n    <Tab.item>标签二</Tab.item>\n  </>\n}\n\nrender() {\n  return (\n    <Tab>\n      {this.renderChildren}\n    </Tab>\n  )\n}\n")),(0,o.kt)("h3",null,"Tabs 支持传入自定义组件"),(0,o.kt)("p",null,"使用 React.cloneElement 对传入的子组件进行处理是会有问题的, 因为此时只能接受 HTML 节点, 而不接受自定义组件的传入;"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"return React.cloneElement(reactElement, {\n  className: cx(),\n  style: {}\n})\n")),(0,o.kt)("p",null,"只要做如下改造便可以完成接受自定义组件的传入"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"return (\n  <div className={cx()} style={}>\n    { React.cloneElement(reactElement }\n  </div>\n)\n")),(0,o.kt)("h3",null,"一列长度特别长, 一列特别短的特殊处理"),(0,o.kt)("h3",null,"性能优化"),(0,o.kt)("p",null,"默认情况下, 当进一个页面的时候就将 tabs 每一块内容区数据都请求了一遍, 如果每个 tab 页面接口数非常多的时候, 可能会有卡顿问题, 提供两种模式来进行优化:"),(0,o.kt)("p",null,"方式一: 在 Tabs 组件切换 tab 时, 在触发的 onChange 中获取相应数据传入对应组件。"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"<Tabs\n  tabs={tabs}\n  activeTab={page}\n  onChange={(index, _e) => {\n    if (index === 0) {\n      /* 伪代码: 获取数据 A */\n    } else if (index === 1) {\n      /* 伪代码: 获取数据 B */\n    } else if (index === 2) {\n      /* 伪代码: 获取数据 C */\n    }\n    setPage(index)\n  }}\n>\n  <A data={dataA} />\n  <B data={dataB} />\n  <C data={dataC} />\n</Tabs>\n")),(0,o.kt)("p",null,"方式二: 维护逻辑变量, 这里以 ifRead 是否已读(多多圈为例), 控制 A、B、C 组件的显示。"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"<Tabs\n  tabs={tabs}\n  activeTab={page}\n  onChange={(index, _e) => setPage(index)}\n>\n  <div>{ifRead0 || page === 0 ? <A /> : null}</div>\n  <div>{ifRead1 || page === 1 ? <B /> : null}</div>\n  <div>{ifRead2 || page === 2 ? <C /> : null}</div>\n</Tabs>\n")),(0,o.kt)("p",null,"相比较一的方式, 方式二的优势是将请求数据的逻辑被拆分到 A、B、C 各个子组件中, 劣势是需要维护逻辑变量。"),(0,o.kt)("h3",null,"Hooks 的闭包问题"),(0,o.kt)("p",null,"2020-03-24 记录: 今天遇到了一个 bug, 花的事件比较久, 值得记录下修复心得:"),(0,o.kt)("p",null,(0,o.kt)("img",s({parentName:"p"},{src:"http://with.muyunyun.cn/0b1ee2a477d39ec2550a1ef88c63987a.jpg",alt:null}))),(0,o.kt)("p",null,"川穹说只有安卓机有问题, ios 没问题! 很是奇怪, 就围绕聚焦和安卓机查资料得到 ",(0,o.kt)("inlineCode",{parentName:"p"},"在安卓机下聚焦会触发 resize 事件, ios 则不会触发 resize 的结论"),", 因此定位到罪魁祸首"),(0,o.kt)("pre",null,(0,o.kt)("code",s({parentName:"pre"},{className:"language-js"}),"window.addEventListener('resize', () => {})\n")),(0,o.kt)("p",null,"又由于在 hooks 中进行使用, 犯下了闭包陷阱; 最终使用 useRef 解决了问题;"))}u.isMDXComponent=!0}}]);