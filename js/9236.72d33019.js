(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9236],{89236:n=>{n.exports="### 101. Symmetric Tree\n\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n```js\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n```\n\nBut the following [1,2,2,null,3,null,3] is not:\n\n```js\n    1\n   / \\\n  2   2\n   \\   \\\n    3   3\n```\n\nFollow up: Solve it both recursively and iteratively.\n\n### Analyze\n\n解法一: 递归解法。\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function (root) {\n  if (root === null) {\n    return true\n  }\n  return isMirror(root.left, root.right)\n};\n\nfunction isMirror(leftNode, rightNode) {\n  if (leftNode === null && rightNode === null) {\n    return true\n  }\n\n  if (leftNode === null || rightNode === null) {\n    return false\n  }\n\n  if (leftNode.val === rightNode.val) {\n    return isMirror(leftNode.left, rightNode.right) && isMirror(leftNode.right, rightNode.left)\n  } else {\n    return false\n  }\n}\n```\n\n解法二: 迭代解法:\n\n```js\n        1\n      /   \\\n    2       2\n   / \\     / \\\n  3   4   4   3\n / \\ / \\ / \\ / \\\n5  6 7 8 8 7 6  5\n```\n\n解析:\n\n* 第一步: `stack = [2, 2]`;\n* 第二步: 取出 `[2, 2]`, 推入 `[3, 3, 4, 4]`;\n* 第三步: 取出 `[4, 4]`, 推入 `[7, 7, 8, 8]`;\n* 第四步: 取出 `[8, 8]`;\n* 第五步: 取出 `[7, 7]`, 取出 `[3, 3]`;\n* 第六步: 推入 `[5, 5, 6, 6]`;\n* 第七步: 取出 `[6, 6]`;\n* 第八步: 取出 `[5, 5]`;\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function (root) {\n  if (!root) return true\n  if (!root.left && !root.right) return true\n  if (root.left && root.right && root.left.val !== root.right.val) return false\n\n  const stack = []\n\n  stack.push(root.right)\n  stack.push(root.left)\n\n  while (stack.length > 0) {\n    const popItemLeft = stack.pop()\n    const popItemRight = stack.pop()\n\n    if (!popItemLeft && !popItemRight) continue\n    if (!popItemLeft || !popItemRight || popItemLeft.val !== popItemRight.val) return false\n\n    stack.push(popItemRight.right, popItemLeft.left, popItemRight.left, popItemLeft.right)\n  }\n\n  return true\n};\n```"}}]);