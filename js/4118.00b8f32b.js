(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4118],{44118:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var a=n(59713),r=n.n(a),l=n(6479),p=n.n(l),s=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var i={};function c(e){var t=e.components,n=p()(e,["components"]);return(0,s.kt)("wrapper",u(u(u({},i),n),{},{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",null,"精读 extends"),(0,s.kt)("h2",null,"用于条件判断时的 extends"),(0,s.kt)("p",null,"当 extends 用于表示条件判断时，可以总结出以下规律"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"同一类型的子类型在使用 extends 时，extends 语义可解释为等于。")),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type result1 = 'a' extends 'abc' ? true : false // false\ntype result2 = 123 extends 1 ? true : false // false\n")),(0,s.kt)("ol",u({},{start:2}),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"狭窄类型 extends 宽泛类型"),"且",(0,s.kt)("inlineCode",{parentName:"li"},"宽泛类型中包含狭窄类型"),"时结果为 true，反之为 false。")),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type result3 = string extends string | number ? true : false // true\n")),(0,s.kt)("ol",u({},{start:3}),(0,s.kt)("li",{parentName:"ol"},"当 extends 作用于对象时，若在对象中指定的 key 越多，则其类型定义的范围越狭窄，可以参考如下例子。")),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type result4 = { a: true, b: false } extends { a: true } ? true : false // true\n")),(0,s.kt)("h2",null,"泛型类型中的 extends"),(0,s.kt)("p",null,"考虑如下 Demo 类型定义:"),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type Demo<T, U> = T extends U ? never : T\n")),(0,s.kt)("p",null,"因为 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c' extends 'a'")," 是 false, 所以 ",(0,s.kt)("inlineCode",{parentName:"p"},"Demo<'a' | 'b' | 'c', 'a'>")," 结果是 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c'")," 么?"),(0,s.kt)("p",null,"查阅",(0,s.kt)("a",u({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"}),"官网"),"，其中有提到:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"When conditional types act on a generic type, they become distributive when given a union type.")),(0,s.kt)("p",null,"即当条件类型作用于泛型类型时，它们在给定联合类型时成为分配类型。用 JavaScript 来表达 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c' extends 'a'")," 的结果类似于:"),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-js"}),"function Demo(T, U) {\n  return T.map(val => {\n    if (val !== U) return val\n    return 'never'\n  })\n}\n\nDemo(['a', 'b', 'c'], 'a') // ['never', 'b', 'c']\n")),(0,s.kt)("p",null,"此外根据 ",(0,s.kt)("a",u({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type"}),"never 类型"),"的定义 —— never 类型可分配给每种类型，但是没有类型可以分配给 never（除了 never 本身）。即 ",(0,s.kt)("inlineCode",{parentName:"p"},"never | 'b' | 'c'")," 等价于 ",(0,s.kt)("inlineCode",{parentName:"p"},"'b' | 'c'"),"。"),(0,s.kt)("p",null,"因此 ",(0,s.kt)("inlineCode",{parentName:"p"},"Demo<'a' | 'b' | 'c', 'a'>")," 结果并不是 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c'")," 而是 ",(0,s.kt)("inlineCode",{parentName:"p"},"'b' | 'c'"),"。而 Demo 类型的声明其实就是 TS 官方提供的 ",(0,s.kt)("inlineCode",{parentName:"p"},"Exclude<Type, ExcludedUnion>"),"。"),(0,s.kt)("h3",null,"逃离舱"),(0,s.kt)("p",null,"如果想让 ",(0,s.kt)("inlineCode",{parentName:"p"},"Demo<'a' | 'b' | 'c', 'a'>")," 的结果为 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c'")," 是否可以实现呢? 根据",(0,s.kt)("a",u({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types"}),"官网"),"描述:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Typically, distributivity is the desired behavior. To avoid that behavior, you can surround each side of the extends keyword with square brackets.")),(0,s.kt)("p",null,"如果不想遍历泛型中的每一个类型，可以用方括号将 extends 关键字的每一侧括起来。"),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type Demo<T, U> = [T] extends [U] ? never : T\n\n// result 此时类型为 'a' | 'b' | 'c'\ntype result = Demo<'a' | 'b' | 'c', 'a'>\n")),(0,s.kt)("h2",null,"在箭头函数中使用 extends"),(0,s.kt)("p",null,"在箭头函数中使用三元表达式时，从左向右的阅读习惯导致函数内容区若不加括号则会让使用方感到困惑。比如下方代码中 x 是函数类型还是布尔类型呢？"),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-js"}),"// The intent is not clear.\nvar x = a => 1 ? true : false;\n")),(0,s.kt)("p",null,"在 eslint 规则 ",(0,s.kt)("a",u({parentName:"p"},{href:"https://eslint.org/docs/rules/no-confusing-arrow"}),"no-confusing-arrow")," 中，推荐如下写法："),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-js"}),"var x = a => (1 ? true : false);\n")),(0,s.kt)("p",null,"在 TypeScript 的类型定义中若在箭头函数中使用 extends 也是同理，一眼看如下代码也是比较绕，"),(0,s.kt)("p",null,"Todo: 换一个 Demo"),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type CurryV0<P extends any[], R> =\n  (arg0: Head<P>) => HasTail<P> extends true ? CurryV0<Tail<P>, R> : R\n")),(0,s.kt)("p",null,"因此在箭头函数中使用 extends 建议加上括号，对 code review 很有帮助。"),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type CurryV0<P extends any[], R> =\n  (arg0: Head<P>) => (HasTail<P> extends true ? CurryV0<Tail<P>, R> : R)\n")),(0,s.kt)("h2",null,"结合类型推导使用 extends"),(0,s.kt)("p",null,"TypeScript 中有一个语法 ",(0,s.kt)("a",u({parentName:"p"},{href:""}),"infer"),"，使用它可以实现推导类型的目的。一般会结合 extends 来使用 infer。比如："),(0,s.kt)("p",null,"todo:"),(0,s.kt)("h3",null,"使用 extends 来判断两个类型完全相等"),(0,s.kt)("pre",null,(0,s.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"// https://github.com/Microsoft/TypeScript/issues/27024#issuecomment-421529650. understanding it is difficult.\nexport type Equal<X, Y> =\n  (<T>() => T extends X ? 1 : 2) extends\n  (<U>() => U extends Y ? 1 : 2) ? true : false\n")))}c.isMDXComponent=!0}}]);