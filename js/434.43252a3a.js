(self.webpackChunkblog=self.webpackChunkblog||[]).push([[434],{60434:n=>{n.exports='### title\n\n给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。\n\n字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。\n\n说明：\n\n`字母异位词指字母相同，但排列不同的字符串`。\n不考虑答案输出的顺序。\n\n示例 1:\n\n```js\n输入:\ns: "cbaebabacd" p: "abc"\n\n输出:\n[0, 6]\n```\n\n解释:\n起始索引等于 0 的子串是 "cba", 它是 "abc" 的字母异位词。\n起始索引等于 6 的子串是 "bac", 它是 "abc" 的字母异位词。\n\n示例 2:\n\n```js\n输入:\ns: "abab" p: "ab"\n\n输出:\n[0, 1, 2]\n```\n\n示例 3:\n\n```js\n输入:\ns: "baa" p: "aa"\n\n输出:\n[1]\n```\n\n解释:\n起始索引等于 0 的子串是 "ab", 它是 "ab" 的字母异位词。\n起始索引等于 1 的子串是 "ba", 它是 "ab" 的字母异位词。\n起始索引等于 2 的子串是 "ab", 它是 "ab" 的字母异位词。\n\n### 题解\n\n花了半天, 用类似滑动窗口的思想地解决了该题。思路如下:\n\n1. 首先将 p 字符串中各字母出现的频率统计在 `targetObj`;\n2. 针对 s 字符创声明双指针 left、right\n   1. 如若当前 right 的位置在 targetObj `有对应字段且其不大于` targetObj 对应字段的值, 则向右偏移 right 指针的位置;\n   2. 如若当前 right 指针的位置在 targetObj `无对应字段`, 则将 left 的位置移到 right 字段的位置;\n   3. 如若当前 right 指针的位置在 targetObj `有对应字段且大于` targetObj 对应字段的值, 则向右偏移 left 指针的位置;\n\n> 需要考虑的点, `字符串是否会重复`。比如 s 为 \'baa\', p 为 \'aa\'。\n\n```js\n/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n  const pLength = p.length\n  const initHashObj = {} // 初始化 hash 对象\n  let hashObj = {}\n  const targetObj = {}\n  for (let i = 0; i < p.length; i++) {\n    targetObj[p[i]] = typeof(targetObj[p[i]]) === \'number\' ? targetObj[p[i]] + 1 : 0\n    initHashObj[p[i]] = 0\n    hashObj[p[i]] = 0\n  }\n\n  const result = [] // 存储结果\n\n  let left = 0, right = 0\n\n  while (left < s.length && right < s.length) {\n    if (typeof(hashObj[s[right]]) === \'number\' && hashObj[s[right]] <= targetObj[s[right]]) {\n      hashObj[s[right]] = hashObj[s[right]] + 1\n      if (right - left + 1 === pLength) result.push(left)\n      right++\n    } else if (typeof(hashObj[s[right]]) !== \'number\') {\n      right++\n      left = right\n      hashObj = JSON.parse(JSON.stringify(initHashObj))\n    } else {\n      hashObj[s[left]] !== initHashObj[s[left]] && (hashObj[s[left]] = hashObj[s[left]] - 1)\n      left++\n    }\n  }\n\n  return result\n};\n```\n\n### Sister Title\n\n76'}}]);