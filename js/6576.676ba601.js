(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6576],{46576:n=>{n.exports="### Binary Tree Postorder Traversal\n\nGiven a binary tree, return the postorder traversal of its nodes' values.\n\nExample:\n\n```js\nInput: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n```\n\n```js\nOutput: [3,2,1]\n```\n\nFollow up: Recursive solution is trivial, could you do it iteratively?\n\n```js\nfunction TreeNode(val) {\n  this.val = val\n  this.left = this.right = null\n}\n\nvar tree1 = new TreeNode(1)\nvar tree2 = new TreeNode(2)\nvar tree3 = new TreeNode(3)\ntree2.left = tree3\ntree1.left = null\ntree1.right = tree2\n```\n\n### 递归法\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function(root) {\n  if (root) {\n    return [...postorderTraversal(root.left), ...postorderTraversal(root.right), root.val]\n  } else {\n    return []\n  }\n}\n```\n\n### 颜色标记法(迭代法, 模拟系统栈)\n\n使用`颜色标记法`剖析树在中序遍历下的递归操作, 思路如下:\n\n1. 将访问过的元素标记为灰色, 未访问过的元素标记为白色;\n2. 从栈顶取出访问元素:\n   1. 若为灰色元素, 则打印之;\n   2. 若为白色元素, 按照`中 -> 右 -> 左`的顺序推入栈, 同时将白色元素标记为灰色元素;\n\n> 推荐使用颜色标记法, 它的解题思路适用于解前序、中序、后序遍历。\n\n```js\n     1\n    / \\\n   2   5\n  / \\\n 3   4\n```\n\n在如上所示树中, 模拟系统栈图解其执行过程如下:\n\n```js\ngray  1\nwhite 2\nwhite 5\n\nwhite 2\nwhite 5\n\ngray  2\nwhite 3\nwhite 4\nwhite 5\n```\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const stack = []\n  stack.push({ color: 'white', node: root })\n\n  while (stack.length > 0) {\n    const { color, node } = stack.pop()\n    if (color === 'gray') {\n      printArr.push(node.val)\n    } else {\n      stack.push({ color: 'gray', node })\n      node.right && stack.push({ color: 'white', node: node.right })\n      node.left && stack.push({ color: 'white', node: node.left })\n    }\n  }\n\n  return printArr\n}\n```\n\n### Sister Title\n\n94、144"}}]);