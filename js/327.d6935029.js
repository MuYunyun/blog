(self.webpackChunkblog=self.webpackChunkblog||[]).push([[327],{70327:n=>{n.exports="### 102.Binary Tree Level Order Traversal\n\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n\n```js\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\nreturn its level order traversal as:\n\n```js\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n```\n\n### Analyze\n\n解析: 该题考察的是`树的广度遍历(BFS)`, 运用到了`队列`相关知识;\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const list = []\n  list.push({ node: root, level: 0 })\n  while (list.length > 0) {\n    const { node, level } = list.shift()\n    if (!printArr[level]) {\n      printArr[level] = []\n    }\n    printArr[level].push(node.val)\n    node.left && list.push({ node: node.left, level: level + 1 })\n    node.right && list.push({ node: node.right, level: level + 1 })\n  }\n  return printArr\n}\n```\n\n![](http://with.muyunyun.cn/d668eecd2648eeb7345ed85e3f4d5316.jpg)\n\n### Similar Title\n\n107(Sister Title)、103、199"}}]);