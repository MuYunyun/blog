(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3109],{43109:n=>{n.exports="### Generator 使用规律\n\n从一道题目开始:\n\n```js\nfunction* gen() {\n  const a = yield 1\n  console.log(a)\n}\n```\n\n为了让其能成功打印出 1, 设计如下函数:\n\n```js\nfunction step(gen) {\n  const it = gen()\n  let result\n  return function() {\n    result = it.next(result).value\n  }\n}\n```\n\n进行如下调用:\n\n```js\nvar a = step(gen)\na()\na() // 1\n```\n\n从这个题目总结出规律:\n\n* `next` 的调用数比 `yield` 的调用数多 1;\n* 第一个 `next` 传参无效, 从第二个 `next` 开始传参有效并会作为 `yield` 的结果返回;\n\n生成器中的 `yield/next` 除了控制能力外还有双向的消息通知能力:\n\n* `yield` 后面跟的值能通过 `it.next().value` 取到\n* `it.next()` 括号中的值又能作为 `yield` 的结果返回\n\n### yield 暂停的位置\n\n```js\nfunction* foo(url) {\n  try {\n    const value = yield request(url)\n    console.log(value)\n  } catch (err) {\n    ...\n  }\n}\n\nconst it = foo('http://some.url.1')\n```\n\n`yield` 后面跟着的语句执行完再进入暂停状态的, 在如上代码中, 当执行 `it.next()` 时, 可以稍加转换为如下形式:\n\n```js\nfunction* foo(url) {\n  try {\n    const promise = request(url) // 当执行 it.next() 时, 这里是被执行的\n    const value = yield promise  // 这里被暂停\n    console.log(value)\n  } catch (err) {\n    ...\n  }\n}\n```\n\n### 遇到 return/throw\n\n* 遇到 `return`\n\n```js\nfunction* gen() {\n  yield 1\n  return 2\n  console.log('是否执行')\n}\n\nconst it = gen()\nit.next() // {value: 1, done: false}\nit.next() // {value: 2, done: true}\nit.next() // {value: undefined, done: true}\n```\n\n总结: 遇到 `return`, `generator` 函数结束中断, `done` 变为 `true`;\n\n* 遇到 `iterator` 的 `throw`\n\n```js\nfunction* gen() {\n  yield 1\n  console.log('是否执行')\n}\n\nvar it = gen()\nit.throw(new Error('boom')) // Error: boom\nit.next()                   // {value: undefined, done: true}\n```\n\n总结: 遇到 `iterator` 的 `throw`, `generator` 函数运行中断, `done` 变为 `true`;\n\n### Generator 的简单实现\n\n`Generator` 是一个返回迭代器的函数, 下面是其简版实现:\n\n```js\nfunction foo(url) {\n  var state\n  var val\n  function process(v) {\n    switch (state) {\n      case 1:\n        console.log('requesting:', url)\n        return request(url)\n      case 2:\n        val = v\n        console.log(val)\n        return\n      case 3:\n        var err = val\n        console.log('Oops:', err)\n        return false\n    }\n  }\n  return {\n    next: function(v) {\n      if (!state) {\n        state = 1\n        return {\n          done: false,\n          value: process()\n        }\n      } else if (state === 1) {\n        state = 2\n        return {\n          done: true,\n          value: process(v)\n        }\n      } else {\n        return {\n          done: true,\n          value: undefined\n        }\n      }\n    },\n    throw: function() {\n      if (state === 1) {\n        state = 3\n        return {\n          done: true,\n          value: process(e)\n        }\n      } else {\n        throw e\n      }\n    }\n  }\n}\n\nvar it = foo('http://some.url.1')\n```\n\n### Generator 函数的异步应用\n\n以 `co` 库来说, 现在已经统一为 `Generator + Promise` 的调用方式, 下面进行简单的模拟:\n\n```js\nco(function* () {\n  const result = yield Promise.resolve(true)\n  console.log(result) // true\n})\n```\n\n```js\n// 简版 promise\nfunction co(gen) {\n  const it = gen()\n  const step = function(data) {\n    const result = it.next(data)\n    if (result.done) {\n      return result.value\n    }\n    result.value.then((data) => {\n      step(data)\n    })\n  }\n  step()\n}\n```\n\n观察 `co` 库发现, `co` 函数后返回的是 `promise`, 使用如下:\n\n```js\nco(function* () {\n  const result = yield Promise.resolve(true)\n  return result // 这里有个语法, it.next() 碰到 return 后, 其值会变为 { value: result, done: true } 的形式\n}).then((data) => {\n  console.log(data) // true\n})\n```\n\n我们再对其稍加改造, 使之更加添近 `co` 库:\n\n```js\nfunction co(gen) {\n  return new Promise((resolve, reject) => {\n    const it = gen()\n    let result\n    const step = function(fn) {\n      try {\n        result = fn()\n      } catch(e) {\n        return reject(e)\n      }\n      if (result.done) { return resolve(result.value) }\n      result.value.then((data) => {\n        step(() => it.next(data))\n      }, (err) => {\n        step(() => it.throw(err)) // 这里为了让抛错直接在 generator 消化, 所以 step 内改传函数\n      })\n    }\n    step(() => it.next())\n  })\n}\n```"}}]);