(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9674],{49674:(n,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>c});var r=e(59713),i=e.n(r),s=e(6479),l=e.n(s),a=(e(67294),e(3905));function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function u(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){i()(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}var p={};function c(n){var t=n.components,e=l()(n,["components"]);return(0,a.kt)("wrapper",u(u(u({},p),e),{},{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",null,"17.Letter Combinations of a Phone Number"),(0,a.kt)("p",null,"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order."),(0,a.kt)("p",null,"A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters."),(0,a.kt)("p",null,(0,a.kt)("img",u({parentName:"p"},{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png",alt:null}))),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",u({parentName:"pre"},{className:"language-js"}),'Input: digits = "23"\nOutput: ["ad","ae","af","bd","be","bf","cd","ce","cf"]\n')),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",u({parentName:"pre"},{className:"language-js"}),'Input: digits = ""\nOutput: []\n')),(0,a.kt)("p",null,"Example 3:"),(0,a.kt)("pre",null,(0,a.kt)("code",u({parentName:"pre"},{className:"language-js"}),'Input: digits = "2"\nOutput: ["a","b","c"]\n')),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"0 <= digits.length <= 4"),(0,a.kt)("li",{parentName:"ul"},"digits","[i]"," is a digit in the range ","['2', '9']",".")),(0,a.kt)("h3",null,"analyze"),(0,a.kt)("p",null,"方法一: 回溯法递归。"),(0,a.kt)("pre",null,(0,a.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n  if (digits === '') return []\n  const result = []\n\n  combinations(digits, 0, '', result)\n  return result\n};\n\n/**\n * digits: analyze digit\n * index: current iterator number\n * s: prev total string\n */\nvar combinations = (digits, index, s, result) => {\n  if (index === digits.length) {\n    result.push(s)\n    return\n  }\n\n  const char = digits[index]\n  const map = {\n    '2': 'abc',\n    '3': 'def',\n    '4': 'ghi',\n    '5': 'jkl',\n    '6': 'mno',\n    '7': 'pqrs',\n    '8': 'tuv',\n    '9': 'wxyz'\n  }\n\n  const charMapString = map[char]\n\n  for (let i = 0; i < charMapString.length; i++) {\n    combinations(digits, index + 1, s + charMapString[i], result)\n  }\n}\n")),(0,a.kt)("p",null,"方法二: 运用队列的思想。拿 '23' 举例, 第一轮先放进 'abc', 第二轮分别以队列的方式对 a、b、c 分别进行操作 push 进 def。"),(0,a.kt)("pre",null,(0,a.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function (digits) { // '23'\n  const keyString = [\n    '',\n    '',\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n    'mno',\n    'pqrs',\n    'tuv',\n    'wxyz',\n  ]\n\n  if (digits === '' || digits.length === 0) {\n    return []\n  }\n\n  const result = ['']\n\n  for (let x of digits) {\n    const size = result.length\n    for (let i = 0; i < size; i++) {\n      const old = result.shift()\n\n      for (let y of keyString[x]) {\n        result.push(old + y)\n      }\n    }\n  }\n  return result\n};\n")),(0,a.kt)("h3",null,"推荐指数"),(0,a.kt)("p",null,"※※※※※"))}c.isMDXComponent=!0}}]);