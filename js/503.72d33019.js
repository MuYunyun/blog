(self.webpackChunkblog=self.webpackChunkblog||[]).push([[503],{50503:n=>{n.exports="### 题目\n\n给定一个`排序数组`, 你需要`在原地删除重复出现的元素, 使得每个元素只出现一次, 返回移除后数组的新长度`。\n\n`不要使用额外的数组空间, 你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成`。\n\n示例 1:\n\n```js\n给定数组 nums = [1,1,2],\n\n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n示例 2:\n\n```js\n给定 nums = [0,0,1,1,1,2,2,3,3,4],\n\n函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n说明:\n\n为什么返回数值是整数, 但输出的答案是数组呢?\n\n请注意, 输入数组是以“引用”方式传递的, 这意味着在函数里修改输入数组对于调用者是可见的。\n\n你可以想象内部操作如下:\n\n```js\n// nums 是以“引用”方式传递的。也就是说, 不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n```\n\n### 解题\n\n解法一: 一般思路\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function (nums) {\n  const cacheObj = {}\n  let count = 0\n  while (count < nums.length) {\n    if (cacheObj[nums[count]]) {\n      nums.splice(count, 1)\n      count--\n    } else {\n      cacheObj[nums[count]] = nums[count].toString() // 防止 0 被判断为 false\n    }\n    count++\n  }\n  return nums.length\n}\n```\n\n解法二: 双指针\n\n![](http://with.muyunyun.cn/d3b1ba4aff45282b1ae4740d530c8834.jpg)\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function (nums) {\n  if (nums.length <= 1) return nums.length\n  let cur = 0 // 新数组的下标\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] !== nums[cur]) {\n      nums[cur + 1] = nums[i]\n      cur++\n    }\n  }\n  return cur + 1\n}\n```\n\n### 同类题目\n\n27、80、283。"}}]);