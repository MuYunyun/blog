(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3e3],{93e3:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});var r=t(59713),u=t.n(r),l=t(6479),s=t.n(l),a=(t(67294),t(3905));function m(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?m(Object(t),!0).forEach((function(e){u()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var i={};function o(n){var e=n.components,t=s()(n,["components"]);return(0,a.kt)("wrapper",p(p(p({},i),t),{},{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",null,"title"),(0,a.kt)("p",null,"Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target."),(0,a.kt)("p",null,"Note:"),(0,a.kt)("p",null,"The solution set must not contain duplicate quadruplets."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",p({parentName:"pre"},{className:"language-js"}),"Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n")),(0,a.kt)("h3",null,"Analyze"),(0,a.kt)("p",null,"题目 ",(0,a.kt)("a",p({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/master/BasicSkill/LeetCode/15.3Sum/README.md"}),"15")," 的加强版, 唯一区别是定义的指针数量增加了, 仍然需要注意",(0,a.kt)("inlineCode",{parentName:"p"},"解的去重"),"。"),(0,a.kt)("pre",null,(0,a.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n  const result = []\n  if (nums.length < 4) return result\n  const sortSum = nums.sort((n1, n2) => n1 - n2)\n  const length = sortSum.length\n  for (let i = 0; i < length - 3; i++) {\n    if (i === 0 || nums[i] > nums[i - 1]) {\n      let l = i + 1\n      let m = l + 1\n      while (l < length - 2) {\n        let r = length - 1\n        if (l === i + 1 || nums[l] > nums[l - 1]) {\n          while (m < length - 1 && m < r) {\n            let tmpArr = []\n            const sum = nums[i] + nums[l] + nums[m] + nums[r]\n            if (sum === target) {\n              tmpArr.push(nums[i])\n              tmpArr.push(nums[l])\n              tmpArr.push(nums[m])\n              tmpArr.push(nums[r])\n              result.push(tmpArr)\n              m++\n              r--\n              while (nums[m] === nums[m - 1]) {\n                m++\n              }\n              while (nums[r] === nums[r + 1]) {\n                r--\n              }\n            } else if (sum < target) {\n              m++\n            } else if (sum > target) {\n              r--\n            }\n          }\n        }\n        l++\n        m = l + 1\n      }\n    }\n  }\n  return result\n}\n\nfourSum([1, 0, -1, 0, -2, 2], 0)\n")),(0,a.kt)("p",null,(0,a.kt)("img",p({parentName:"p"},{src:"http://with.muyunyun.cn/9e8e7033246cfea3940af4fb03b3a363.jpg-400",alt:null}))),(0,a.kt)("p",null,"假设数组的长度为 n, 算法复杂度估计为 ",(0,a.kt)("inlineCode",{parentName:"p"},"(n - 3) * (等差数列)")," 即为 O(n^2)"),(0,a.kt)("h3",null,"Sister Title"),(0,a.kt)("p",null,"15、16"))}o.isMDXComponent=!0}}]);