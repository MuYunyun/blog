(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6941],{66941:n=>{n.exports="### 40. Combination Sum II\n\nGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n\nEach number in candidates may `only be used once` in the combination.\n\nNote: The solution set must `not contain duplicate combinations`.\n\nExample 1:\n\n```js\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput:\n[\n  [1,1,6],\n  [1,2,5],\n  [1,7],\n  [2,6]\n]\n```\n\nExample 2:\n\n```js\nInput: candidates = [2,5,2,1,2], target = 5\nOutput:\n[\n  [1,2,2],\n  [5]\n]\n```\n\nConstraints:\n\n* 1 <= candidates.length <= 100\n* 1 <= candidates[i] <= 50\n* 1 <= target <= 30\n\n### analyze\n\n是[题目 39](https://github.com/MuYunyun/blog/blob/master/LeetCode/39.组合总和/index.js) 的改版, 在 DFS 的基础上, 对于题目要求`解集不能包含重复的组合`要稍加处理。\n\n思路: 递归解组合问题。\n\n1. 对 candidates 排序。\n2. 对这种情况要过滤: `i !== start && candidates[i] === candidates[i - 1]`, 可以以 ([1, 1, 2], 3) 这个例子进行思考不产生两个 [1, 2]。\n\n解法一:\n\n```js\n/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function (candidates, target) {\n  const result = []\n\n  const sortCandidates = candidates.sort((r1, r2) => r1 - r2)\n  const DFS = function (sum, arr, start) {\n    if (sum === target) {\n      result.push(arr.slice())\n      return\n    }\n    if (sum > target) {\n      return\n    }\n\n    for (let i = start; i < sortCandidates.length; i++) {\n      if (i !== start && sortCandidates[i] === sortCandidates[i - 1]) { // [1,1,2], 3。避免产生两个 [1, 2]\n        continue\n      }\n\n      sum += sortCandidates[i]\n      arr.push(sortCandidates[i])\n      DFS(sum, arr, i + 1)\n      arr.pop(sortCandidates[i])\n      sum -= sortCandidates[i]\n    }\n  }\n\n  DFS(0, [], 0)\n\n  return result\n};\n```\n\n解法二:\n\n```js\n/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function (candidates, target) {\n  const result = []\n  const sorted = candidates.sort((r1, r2) => r1 - r2)\n  recurcive(sorted, target, 0, [], result)\n  return result\n};\n\nvar recurcive = function (candidates, target, start, temp, result) {\n  if (target < 0) {\n    return\n  }\n\n  if (target === 0) {\n    result.push([...temp])\n    return\n  }\n\n  for (let i = start; i < candidates.length; i++) {\n    if (candidates[i] === candidates[i - 1] && i !== start) {\n      continue\n    }\n    temp.push(candidates[i])\n    target = target - candidates[i]\n    recurcive(candidates, target, i + 1, temp, result)\n    target = target + candidates[i]\n    temp.pop(candidates[i])\n  }\n}\n```\n"}}]);