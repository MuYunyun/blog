(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6594],{66594:n=>{n.exports="### Sort List\n\nSort a linked list in `O(n logn)` time using `constant space` complexity.\n\nExample 1:\n\n```js\nInput: 4->2->1->3\nOutput: 1->2->3->4\n```\n\nExample 2:\n\n```js\nInput: -1->5->3->4->0\nOutput: -1->0->3->4->5\n```\n\n### analyze\n\n根据题意的要求, 锁定使用`归并排序`算法, 但是相对数组的归并排序, 有以下两个难点:\n\n* 问题一: 如何确认链表的中点?\n* 问题二: 链表如何 merge?\n\n针对问题一, 可以使用`快慢指针`来确认链表的中点, 快指针每次走两步, 慢指针每次走一步, 慢指针最后的位置就是链表的中点位置, 步骤图解如下:\n\n针对奇数情形:\n\n```js\n          slow\n          quick\ndummy  ->  1  ->  null\n\n                 slow  quick\ndummy  ->  4  ->  2  ->  1  ->  null\n\n偶数:\n          slow  quick\ndummy  ->  1  ->  2  ->  null\n```\n\n针对偶数情形:\n\n```js\n          slow   quick\ndummy  ->  1  ->  2  ->  null\n```\n\n此外另外一个难点是如何进行 merge 操作。大体思路为\n\n1. 在 leftList 中找到比 rNode 小且最接近 rNode 的值 lNode;\n2. 将 rNode 插入 lNode 的后面;\n\n步骤图解如下:\n\n```js\nlNode                         rNode\ndummy -> 1 -> 3 -> null         2 -> 4 -> null\n\n             lNode            rNode\ndummy -> 1 -> 2 -> 3 -> null    4 -> null\n```\n\n```js\nvar sortList = function(head) {\n  const dummy = new ListNode(0)\n  dummy.next = head\n  let head0 = dummy.next\n\n  let slow = dummy, quick = dummy\n  while (quick.next) {\n    quick = quick.next\n    slow = slow.next\n    quick.next && (quick = quick.next)\n  }\n  // if the slow list is equal to the quick list, it means the current list only has one node.\n  if (slow === quick) return dummy.next\n  let rightList = slow.next\n  slow.next = null\n  let leftList = dummy\n  return merge(sortList(leftList.next), sortList(rightList))\n}\n\nvar merge = function(leftList, rightList) {\n  const dummy = new ListNode(0)\n  dummy.next = leftList\n  let lNode = dummy\n  let rNode = rightList\n\n  while (lNode && rNode) {\n    while (lNode.next && lNode.next.val < rNode.val) {\n      lNode = lNode.next\n    }\n    let rNext = rNode.next\n    rNode.next = lNode.next\n    lNode.next = rNode\n    rNode = rNext\n  }\n  return dummy.next\n}\n```\n\n### 姊妹题\n\n147、143、234"}}]);