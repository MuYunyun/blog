(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9494],{69723:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>m});var r=t(59713),a=t.n(r),u=t(6479),l=t.n(u),p=(t(67294),t(3905));function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var i={};function m(n){var e=n.components,t=l()(n,["components"]);return(0,p.kt)("wrapper",s(s(s({},i),t),{},{components:e,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"4Sum II"),(0,p.kt)("p",null,"Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A","[i]"," + B","[j]"," + C","[k]"," + D","[l]"," is zero."),(0,p.kt)("p",null,"To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -2^28 to 2^28 - 1 and the result is guaranteed to be at most 2^31 - 1."),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Input:\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\nOutput:\n2\n\nExplanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n")),(0,p.kt)("h3",null,"Analyze"),(0,p.kt)("p",null,"解题思路: 如果正常暴力解法为 n^4, n^3 在 0 <= N <= 500 的数量级下已经达到 ",(0,p.kt)("inlineCode",{parentName:"p"},"125000000"),", 根据",(0,p.kt)("a",s({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/master/BasicSkill/algorithm/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6.md"}),"算法复杂度")," 里对数量与时间的统计, 算法的数据复杂度理应不超过 n^2。"),(0,p.kt)("p",null,"因此我们将 C 与 D 和出现的次数存进查找表中, 从而优化算法复杂度(查找表的关键是确认存进查找表的 key 和 value 是多少)。"),(0,p.kt)("pre",null,(0,p.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} A\n * @param {number[]} B\n * @param {number[]} C\n * @param {number[]} D\n * @return {number}\n */\nvar fourSumCount = function(A, B, C, D) {\n  const tmpMap = new Map()\n  for (let ic = 0; ic < C.length; ic++) {\n    for (let id = 0; id < D.length; id++) {\n      const sumC_D = C[ic] + D[id]\n      const hasSumC_D = tmpMap.has(sumC_D)\n      if (hasSumC_D) {\n        tmpMap.set(sumC_D, tmpMap.get(sumC_D) + 1)\n      } else {\n        tmpMap.set(sumC_D, 1)\n      }\n    }\n  }\n\n  let count = 0\n\n  for (let ia = 0; ia < A.length; ia++) {\n    for (let ib = 0; ib < B.length; ib++) {\n      const sumA_B = A[ia] + B[ib]\n      tmpMap.has(-sumA_B) && (count = count + tmpMap.get(-sumA_B))\n    }\n  }\n\n  return count\n}\n")),(0,p.kt)("p",null,(0,p.kt)("img",s({parentName:"p"},{src:"http://with.muyunyun.cn/a10b03c6f22d312f32b4f0a7f2795f4f.jpg",alt:null}))),(0,p.kt)("h3",null,"Sister Title"),(0,p.kt)("p",null,"18(题目相似, 但是因为传入参数不同导致解法不同)"))}m.isMDXComponent=!0}}]);