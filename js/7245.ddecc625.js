(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7245],{37245:n=>{n.exports="### 二分查找思想\n\n1. 取已排列好数组的中间值\n2. 把需查找的值和中间值进行比较\n3. 如果比中间值小, 则对前半部分进行类似操作；如果比中间值大, 则对后半部分进行类似操作；\n\n### 二分查找代码实现\n\n```js\n// arr 为指定数组, target 为目标元素\nfunction binarysearch(arr, target) {\n  let left = 0\n  let right = arr.length - 1\n  while (left <= right) {\n    const middlePoint = Math.floor((left + right) / 2)\n    let middle = arr[middlePoint]\n    if (middle > target) {\n      right = middlePoint - 1\n    } else if (middle < target) {\n      left = middlePoint + 1\n    } else {\n      return middle\n    }\n  }\n\n  return '数组中目标元素不存在'\n}\n```\n\n### 以二分查找法看如何写出正确的程序\n\n* 明确变量的含义。比如在上述代码中, left 与 right 就是变量, 其意味当前查找数组中的左边界与右边界。[left, ...right];\n* 循环不变量。在上述代码中, 循环中改变变量(left, right)的取值, 但是不改变变量的含义。[left, ...right];\n* 小数据量调试。(快速, 准确, 耐心)\n* 大数据量调试。(能测出程序的性能)\n\n### 真题\n\n> 题目: 题目: 在一个二维数组中, 每一行都按照从左到右递增的顺序排序, 每一列都按照从上到下递增的顺序排序。请完成一个函数, 输入这样的一个二维数组和一个整数, 判断数组中是否含有该整数。\n\n```js\n1  2  3  4\n5  6  7  8\n9  10 11 12\n13 14 15 16\n\nfunction find(arr, n) {\n  let x = 0\n  let y = arr[x].length - 1\n  while (x < arr.length && y > 0) {\n    if (n > arr[x][y]) {\n      x++\n    } else if (n < arr[x][y]) {\n      y--\n    } else {\n      return '找到目标元素'\n    }\n  }\n  return '目标元素不存在'\n}\n```\n\n这道题严格不算是二分查找, 不过用到了类似的思维。\n\n> 求开方\n\n[Leetcode : 69. Sqrt(x) (Easy)](https://leetcode.com/problems/sqrtx/description/)\n\n思路: 满足 0 < sqrt < x && sqrt === x / sqrt, 转化为二分查找求 sqrt\n\n```js\n/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) { // 8\n    let left = 1\n    let right = x\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2) // 4 2 3\n        const sqrt = x / mid // 2 4 2.7\n        if (sqrt === mid) return sqrt\n        if (sqrt > mid) {\n            left = mid + 1 // 3\n        } else if (sqrt < mid) {\n            right = mid - 1 // 3 2\n        }\n    }\n    return right // 这里返回 right 而不是 left 的原因: 用了 Math.floor, mid 会偏小, 相应 sqrt 会偏大\n}\n```\n\n> 有序数组的 Single Element\n\n[Leetcode : 540. Single Element in a Sorted Array (Medium)](https://leetcode.com/problems/single-element-in-a-sorted-array/description/)\n\n题目描述: 一个有序数组只有一个数不出现两次, 找出这个数。"}}]);