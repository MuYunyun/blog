(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4086],{14086:n=>{n.exports='### 37. Sudoku Solver\n\nWrite a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n\n1. Each of the digits 1-9 must occur exactly once in each row.\n2. Each of the digits 1-9 must occur exactly once in each column.\n3. Each of the digits 1-9 must occur exactly once in each of the 9 `3 x 3` sub-boxes of the grid.\n\n> The \'.\' character indicates empty cells.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)\n\n```js\nInput:\nboard =\n[\n  ["5","3",".",".","7",".",".",".","."],\n  ["6",".",".","1","9","5",".",".","."],\n  [".","9","8",".",".",".",".","6","."],\n  ["8",".",".",".","6",".",".",".","3"],\n  ["4",".",".","8",".","3",".",".","1"],\n  ["7",".",".",".","2",".",".",".","6"],\n  [".","6",".",".",".",".","2","8","."],\n  [".",".",".","4","1","9",".",".","5"],\n  [".",".",".",".","8",".",".","7","9"]\n]\n\nOutput:\n[\n  ["5","3","4","6","7","8","9","1","2"],\n  ["6","7","2","1","9","5","3","4","8"],\n  ["1","9","8","3","4","2","5","6","7"],\n  ["8","5","9","7","6","1","4","2","3"],\n  ["4","2","6","8","5","3","7","9","1"],\n  ["7","1","3","9","2","4","8","5","6"],\n  ["9","6","1","5","3","7","2","8","4"],\n  ["2","8","7","4","1","9","6","3","5"],\n  ["3","4","5","2","8","6","1","7","9"]\n]\n```\n\n> Explanation: The input board is shown above and the only valid solution is shown below:\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)\n\nConstraints:\n\n* board.length == 9\n* board[i].length == 9\n* board[i][j] is a digit or \'.\'.\n\nIt is guaranteed that the input board has only one solution.\n\n### Analyze\n\n该题有一个难点: 需要明确递归的队列是啥。\n\n1. 在这里递归队列是数独中的 `.` 的下标。\n2. 接着根据该队列进行递归操作, 对横向、竖向、3 x 3 内的位置信息作记录。\n  * 若横向、纵向、3 x 3 的位置没有使用过, 则将相应位置标记为已使用(true)\n  * 若横向、纵向、3 x 3 的位置已经使用过, 则进入下一个递归\n\n```js\n/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n  const obj = {}\n  const used = []\n  for (let x = 0; x < 9; x++) {\n    for (let y = 0; y < 9; y++) {\n      if (!obj[`rows ${x}`]) obj[`rows ${x}`] = {}\n      if (!obj[`columns ${y}`]) obj[`columns ${y}`] = {}\n      const blockX = Math.floor(x / 3)\n      const blockY = Math.floor(y / 3)\n      if (!obj[`block ${blockX}${blockY}`]) obj[`block ${blockX}${blockY}`] = {}\n      if (board[x][y] !== \'.\') {\n        obj[`rows ${x}`][board[x][y]] = true\n        obj[`columns ${y}`][board[x][y]] = true\n        obj[`block ${blockX}${blockY}`][board[x][y]] = true\n      } else {\n        used.push({\n          x,\n          y\n        })\n      }\n    }\n  }\n\n  dfs(board, 0, obj, used)\n\n  return board\n};\n\nvar dfs = function(board, pos, obj, used) {\n  if (pos === used.length) {\n    for (let m = 0; m < 9; m++) {\n      for (let n = 1; n <= 9; n++) {\n        if (typeof obj[`rows ${m}`][n] === \'number\') {\n          board[m][obj[`rows ${m}`][n]] = String(n)\n        }\n      }\n    }\n    return\n  }\n  const { x, y } = used[pos]\n  // data source\n  for (let i = 1; i <= 9; i++) {\n    const blockX = Math.floor(x / 3)\n    const blockY = Math.floor(y / 3)\n    if (\n      (obj[`rows ${x}`][String(i)] === undefined || obj[`rows ${x}`][String(i)] === false)\n      && !obj[`columns ${y}`][String(i)]\n      && !obj[`block ${blockX}${blockY}`][String(i)]\n    ) {\n      obj[`rows ${x}`][String(i)] = y\n      obj[`columns ${y}`][String(i)] = true\n      obj[`block ${blockX}${blockY}`][String(i)] = true\n      dfs(board, pos + 1, obj, used)\n      obj[`rows ${x}`][String(i)] = false\n      obj[`columns ${y}`][String(i)] = false\n      obj[`block ${blockX}${blockY}`][String(i)] = false\n    }\n  }\n}\n```'}}]);