(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4826],{54826:n=>{n.exports="### Picker 组件\n\n#### 视觉兜底\n\n在 Picker 组件中, 来聊聊组件视觉层面的兜底。\n\n```js\n<Picker\n  title=\"选择时间\"\n  data={[\n    [\n      { label: '2014', value: '2014' },\n      { label: '2015', value: '2015' },\n      { label: '2016', value: '2016' },\n      { label: '2017', value: '2017' },\n      { label: '2018', value: '2018' },\n      { label: '2019', value: '2019' }\n    ]\n  ]}\n  value={['2013']}\n>\n  <ListItem placeholder=\"请选择\" extraAlign=\"right\" arrow=\"horizontal\">\n    选择时间\n  </ListItem>\n</Picker>\n```\n\n此时 value 的值并不在 data 数据源内, 此时页面的呈现状况如下\n\n![](http://with.muyunyun.cn/cb71389f4a26685a686329d69290d15b.jpg)\n\n讨论话题: 这样子的兜底对用户是否友好。\n\n兜底后如下:\n\n![](http://with.muyunyun.cn/20f9bda8d2be14ad4eabc3226d6f6264.jpg)\n\n#### 一个典型的闭包陷阱\n\n如下代码的逻辑是点击关闭按钮, 让值恢复到之前的值。以下代码有没有问题呢?\n\n```js\nclose = () => {\n  const { value, defaultPicker } = this.props\n  setTimeout(() => {\n    this.onChangePickerValue(value || defaultPicker || [])\n  }, 1000)\n}\n```\n\n### 流畅的滑动效果\n\n结合物理公式 todo\n"}}]);