(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2229],{12229:n=>{n.exports='### 场景\n\n场景: 假设高度已知, 请写出三栏布局, 其中左、右栏宽度各为 300 px, 中间自适应。本文针对这种场景罗列出以下几种方案。\n\n### float 布局\n\n```html\n<body>\n  <style>\n    .left {\n      float: left;\n      background: red;\n      width: 300px;\n    }\n\n    .middle {\n      background: purple;\n    }\n\n    .right {\n      float: right;\n      background: green;\n      width: 300px;\n    }\n  </style>\n  <div class="left">float layout</div>\n  <div class="right">float layout</div>\n  <div class="middle">float layout</div>\n</body>\n```\n\n> float 布局要注意 `class="middle"` 这行书写的位置\n\n### position 布局\n\n```html\n<body>\n  <style>\n    .left {\n      background: red;\n      position: absolute;\n      left: 0;\n      width: 300px;\n    }\n\n    .middle {\n      position: absolute;\n      left: 300px;\n      right: 300px;\n      background: purple;\n    }\n\n    .right {\n      background: green;\n      position: absolute;\n      right: 0;\n      width: 300px;\n    }\n  </style>\n  <div class="left">position layout</div>\n  <div class="middle">position layout</div>\n  <div class="right">position layout</div>\n</body>\n```\n\n### flex 布局\n\n```html\n<style>\n  .flexbox {\n    display: flex;\n  }\n\n  .left {\n    background: red;\n    width: 300px;\n  }\n\n  .middle {\n    flex: 1;\n    background: purple;\n  }\n\n  .right {\n    background: green;\n    width: 300px;\n  }\n</style>\n<section class="flexbox">\n  <div class="left">flex layout</div>\n  <div class="middle">flex layout</div>\n  <div class="right">flex layout</div>\n</section>\n```\n\n> flex 布局是兼容性较好的布局\n\n### grid 布局\n\n```html\n<body>\n  <style>\n    .gridbox {\n      display: grid;\n      grid-template-columns: 300px auto 300px;\n    }\n\n    .left {\n      background: red;\n    }\n\n    .middle {\n      background: purple;\n    }\n\n    .right {\n      background: green;\n    }\n  </style>\n  <section class="gridbox">\n    <div class="left">grid layout</div>\n    <div class="middle">grid layout</div>\n    <div class="right">grid layout</div>\n  </section>\n</body>\n```\n\n> 使用 grid 目前记住 `columns-template-rows` 和 `columns-template-columns`\n\n### table 布局\n\n```html\n<body>\n  <style>\n    .tablebox {\n      display: table;\n      width: 100%;\n    }\n\n    .left {\n      display: table-cell;\n      background: red;\n      width: 300px;\n    }\n\n    .middle {\n      display: table-cell;\n      background: purple;\n    }\n\n    .right {\n      display: table-cell;\n      background: green;\n      width: 300px;\n    }\n  </style>\n  <section class="tablebox">\n    <div class="left">table layout</div>\n    <div class="middle">table layout</div>\n    <div class="right">table layout</div>\n  </section>\n</body>\n```\n\n> table 布局也是和 flex 布局一样兼容性较高的方案\n\n### 其它解决方案\n\n针对两边宽度固定, 中间宽度自适应还有以下两种方案:\n\n#### 圣杯布局\n\n核心思想: 将内容两边宽度提前空出来, 然后将块级元素进行移动`填补`。\n\n```html\n<body>\n  <style>\n    .bd {\n      padding: 0 200px 0 200px;\n    }\n\n    .main {\n      float: left;\n      width: 100%;\n      height: 200px;\n      background-color: #ddd;\n    }\n    .left {\n      float: left;\n      width: 200px;\n      height: 200px;\n      background-color: #da4242;\n      /* 产生布局效果的属性 */\n      margin-left: -100%;\n      position: relative;\n      left: -200px;\n    }\n    .right {\n      float: left;\n      width: 200px;\n      height: 200px;\n      background-color: #4ddef1;\n      /* 产生布局效果的属性 */\n      margin-left: -200px;\n      position: relative;\n      left: 200px;\n    }\n  </style>\n  <div class="bd">\n    <div class="main">main</div>\n    <div class="left">left</div>\n    <div class="right">right</div>\n  </div>\n</body>\n```\n\n#### 双飞翼布局\n\n核心思想: 将内容宽度占满父容器, 然后将块级元素进行移动`覆盖`。\n\n```html\n<body>\n  <style>\n    .main {\n      float: left;\n      width: 100%;\n      height: 200px;\n      background-color: #ddd;\n    }\n\n    .left {\n      float: left;\n      width: 200px;\n      height: 200px;\n      background-color: #da4242;\n      /* 产生布局效果的属性 */\n      margin-left: -100%;\n    }\n\n    .right {\n      float: left;\n      width: 200px;\n      height: 200px;\n      background-color: #4ddef1;\n      /* 产生布局效果的属性 */\n      margin-left: -200px;\n    }\n  </style>\n  <div class="main"></div>\n  <div class="left">left</div>\n  <div class="right">right</div>\n</body>\n```'}}]);