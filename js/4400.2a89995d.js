(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4400],{48451:n=>{n.exports="这是一套基本的由浅入深考察前端知识体系的清单, 自测用:\n\n### CSS\n\n* 什么是 CSS 盒模型\n\n* 标准模型和 IE 模型有什么不同\n\n* CSS 如何设置这两种模型\n\n* JS 如何设置获取盒模型对应的宽和高\n\n* 如何实现垂直居中\n\n* Flex 布局居中\n\n* BFC 的基本概念\n\n* BFC 的原理\n\n* 如何触发(消除) BFC\n\n### DOM 事件类\n\n* DOM 事件的级别了解吗\n\n* DOM 事件模型了解吗\n\n* DOM 事件流了解吗\n\n* 描述 DOM 事件捕获的具体流程\n\n* 讲一下事件委托(事件袋里)\n\n* 自定义事件了解吗\n\n### 类型转换\n\n* 了解显式转换、隐式转换吗？\n\n* 了解显式转换的过程吗\n\n### HTTP 相关\n\n* HTTP 协议主要特点\n\n* HTTP 报文组成部分\n\n```\n请求报文: 请求行 请求头 空行 请求体\n\n响应报文: 响应行 响应头 空行 响应体\n```\n\n* HTTP 协议类: POST 和 GET 的区别\n\n* HTTP 状态码\n\n* 强缓存和协商缓存 [资料](https://www.cnblogs.com/lyzg/p/5125934.html)\n\n* 持久连接\n\n* 管线化\n\n### 原型链类\n\n* 创建对象有几种方法\n\n* 聊聊原型、构造函数、实例、原型链\n\n* instanceof 的原理了解吗\n\n* new 运算符的原理了解吗\n\n```js\nconst new2 = function(func) {\n  const o = Object.create(func.prototype)\n  const result = func.call(o)\n  if (typeof(result) === 'object') {\n    return result\n  } else {\n    return o\n  }\n}\n```\n\n### 面向对象类\n\n* 如何进行类的声明\n\n* 如何生成实例\n\n* 如何实现继承\n\n* 各继承方式的优缺点\n\n### 通信类\n\n* 什么是同源策略及限制\n\n* 如何创建 Ajax\n\n```js\nconst xhr = new XMLHttpRequest()\n\nxhr.open('GET', '/api', false)\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4) {\n    if (xhr.status === 200 || xhr.status === 304) {\n      console.log(xhr.responseText)\n    }\n  }\n}\nxhr.send(null)\n```\n\n* 跨域通信的几种方式\n\n### 安全类\n\n* 了解 CSRF 吗 ？ 如何防止 CSRF\n\n* 了解 XSS 吗 ？ 如何防止 XSS\n\n* cookie 与 token 有什么区别\n\n### 渲染机制类\n\n* 什么是 DOCTYPE 及作用\n\n* 浏览器解析和渲染过程\n\n* 重排 Reflow\n\n* 重绘 Repaint\n\n### 运行机制类\n\n* 如何理解 JS 的单线程\n\n没办法同时做两件事情\n\n* 什么是 Event Loop\n\n### 页面性能类\n\n* 提升页面性能的方法有哪些"}}]);