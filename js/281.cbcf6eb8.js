(self.webpackChunkblog=self.webpackChunkblog||[]).push([[281],{20281:n=>{n.exports="给定一个已按照升序排列的`有序数组`，找到两个数使得它们相加之和等于目标数。\n\n函数应该返回这两个下标值 index1 和 index2, 其中 index1 必须小于 index2。\n\n说明:\n\n返回的下标值(index1 和 index2)不是从零开始的。\n你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n示例:\n\n```js\n输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1, 2]\n解释: 2 与 7 之和等于目标数 9。因此 index1 = 1, index2 = 2。\n```\n\n### 题解\n\n注意题目给出的条件 `有序数组`\n\n解法一: 因为是有序数组, 题目可以转化为: 第一个值的下标为 `i` 时, 在剩余的有序数组中寻找 `target - number[i]`。因而该算法时间复杂度为 `O(NlogN)`。\n\n![](http://with.muyunyun.cn/4bd2e0a2986f09b8efa56972810291d4.jpg)\n\n```js\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n  for (let i = 0; i < numbers.length; i++) {\n    const index = binarySearch(numbers, target - numbers[i])\n    if (typeof(index) === 'number') {\n      return [i + 1, index + 1]\n    }\n  }\n}\n\nvar binarySearch = function(arr, value) {\n  let left = 0\n  let right = arr.length - 1\n\n  while (left <= right) {\n    const mid = left + Math.ceil((right - left) / 2)\n    if (arr[mid] === value) {\n      return mid\n    } else if (arr[mid] < value) {\n      left = mid + 1\n    } else if (arr[mid] > value) {\n      right = mid - 1\n    }\n  }\n  return null\n}\n```\n\n解法二: 用`对撞指针(双指针)`实现时间复杂度为 `O(n)` 的算法。\n\n```js\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n  let left = 0\n  let right = numbers.length - 1\n\n  while (left <= right) {\n    const sum = numbers[left] + numbers[right]\n    if (sum === target) {\n      return [left + 1, right + 1]\n    } else if (sum > target) {\n      right--\n    } else if (sum < target) {\n      left++\n    }\n  }\n}\n```\n\n### 相似问题\n\n125、344、345"}}]);