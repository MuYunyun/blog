(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2142],{52142:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n(59713),r=n.n(o),c=n(6479),p=n.n(c),u=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s={};function a(e){var t=e.components,n=p()(e,["components"]);return(0,u.kt)("wrapper",b(b(b({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h3",null,"IoC 模式"),(0,u.kt)("p",null,"IoC(Inversion of Control) 译为控制反转, 它包括依赖注入(Dependency Injection) 和依赖查询(Dependency Lookup)。是面向对象编程的一种设计模式。"),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"控制反转指的是将实例化的过程放到了类外部的容器中进行, 在各个类里通过引用相应的类名（依赖查询）调用所需要的类。")),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"在 ",(0,u.kt)("a",b({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/master/BasicSkill/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%AF%87/%E8%A7%A3%E8%AF%BBIoC%E6%A1%86%E6%9E%B6InversifyJS.md"}),"解读 IoC 框架 InversifyJS")," 这篇文章中更加深入地探讨了 IoC 模式在实际项目中的运用。")))}a.isMDXComponent=!0}}]);