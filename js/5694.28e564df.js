(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5694],{75694:n=>{n.exports="### 箭头函数中的 this\n\n理解下箭头函数中 this 的本质, 看如下代码:\n\n```js\n() => console.log(this)\n```\n\n经过 babel 转化后的 ES5 代码如下\n\n```js\nvar self = this\n(function () {\n  console.log(self)\n})\n```\n\n结论: 箭头函数中 this 的值等同于箭头函数当前所处作用域下的 this。\n\n#### 箭头函数的一些不易理解场景\n\n有如下 html 代码,\n\n```html\n<body>\n  <input />\n</body>\n```\n\n加上如下 JavaScript 脚本测试 this 指向:\n\n```js\nvar inputTest = document.getElementsByTagName('input')\ninputTest[0].addEventListener('click', function() {\n  console.log(this) // 指向 input\n})\n\ninputTest[0].addEventListener('click', () => {\n  console.log(this) // window\n})\n```\n\n上述这段是为 dom 节点绑定事件的常见写法, 但是 this 指向就很奇怪了, ES5 中指向了 `<input />`, ES6 中却指向了 window。至于原因, 其实是回调函数引起的坑(得看浏览器触发事件时的代码)。再加上箭头函数的特殊性所以产生以上迷惑的代码片段。\n\n### 箭头函数小 tip\n\n当箭头函数返回的结果是对象时, 注意下写法的细节:\n\n```js\nconst result1 = () => ({ a: 1 })\n\nconst result2 = () => { return { a: 1 } }\n```"}}]);