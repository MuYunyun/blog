(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9593],{39593:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>c});var r=t(59713),s=t.n(r),a=t(6479),l=t.n(a),o=(t(67294),t(3905));function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){s()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var u={};function c(n){var e=n.components,t=l()(n,["components"]);return(0,o.kt)("wrapper",p(p(p({},u),t),{},{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h3",null,"Swap Nodes in Pairs"),(0,o.kt)("p",null,"Given a linked list, swap every two adjacent nodes and return its head."),(0,o.kt)("p",null,"You may not modify the values in the list's nodes, only nodes itself may be changed."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"Given 1->2->3->4, you should return the list as 2->1->4->3.\n")),(0,o.kt)("h3",null,"analyze"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"prev  first  second  next\n        1  ->  2  ->  3  ->  4 -> null\n              .\n              .\n进行如下指针变换:\nprev -> second -> first -> next\n          2    ->   1   ->  3  ->  4 -> null\n              .\n              .\n移动指针:\n                   prev   first  second  next\n          2    ->   1   ->  3  ->  4 -> null\n              .\n              .\n重复上述操作\n")),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n  const dummyHead = new ListNode(0)\n  dummyHead.next = head\n\n  let prev = dummyHead\n  let first = prev.next\n\n  while(first && first.next) {\n    let second = first.next\n    let next = second.next\n\n    second.next = first\n    first.next = next\n    prev.next = second\n\n    prev = first\n    first = first.next\n  }\n\n  return dummyHead.next\n}\n")))}c.isMDXComponent=!0}}]);