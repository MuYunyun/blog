(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8173],{48173:n=>{n.exports='## SEO 在 SPA 站点中的实践\n\n### 背景\n\n![](http://with.muyunyun.cn/c03d8772da6d57e47c55044aee364103.jpg)\n\n观察基于 [create-react-doc](https://github.com/MuYunyun/create-react-doc) 搭建的[文档站点](http://muyunyun.cn/create-react-doc/), 发现网页代码光秃秃的一片(见下图)。这显然是单页应用 (SPA) 站点的通病 —— 不利于文档被搜索引擎搜索 (SEO)。\n\n![](http://with.muyunyun.cn/0ba88a7544efe0e1978e6c8d8b7775a6.jpg)\n\n难道 SPA 站点就无法进行 SEO 了么, 那么 [Gatsby](https://github.com/gatsbyjs/gatsby)、[nuxt](https://github.com/nuxt/nuxt.js) 等框架又为何能作为不少博主搭建博客的首选方案呢, 此类框架赋能 SEO 的技术原理是什么呢? 在好奇心的驱动下, 笔者尝试对 [creat-react-doc](https://github.com/MuYunyun/create-react-doc) 进行赋能 SEO 之旅。\n\n### 搜索引擎优化\n\n在实践之前, 先从理论上分析为何单页应用不能被搜索引擎搜索到。核心在于 `爬虫蜘蛛在执行爬取的过程中, 不会去执行网页中的 JS 逻辑`, 所以`隐藏在 JS 中的跳转逻辑也不会被执行`。\n\n查看当前 SPA 站点打包后的代码, 除了一个根目录 index.html 外, 其它都是注入的 JS 逻辑, 因此浏览器自然不会对其进行 SEO。\n\n![](http://with.muyunyun.cn/0d15d4e3a62516da7c301e8f1c9228d6.jpg)\n\n此外, 搜索引擎详优化是一门较复杂的学问。如果你对 SEO 优化比较陌生, 建议阅读[搜索引擎优化 (SEO) 新手指南](https://developers.google.com/search/docs/beginner/seo-starter-guide) 一文, Google 搜索中心给出了全面的 **17 个**最佳做法, 以及 **33 个**应避免的做法, 这也是笔者近期在实践的部分。\n\n### SEO 在 SPA 站点中的实践案例\n\n在轻文档站点的背景前提下, 我们暂不考虑 SSR 方案。\n\n对市面上文档站点的 SEO 方案调研后, 笔者总结为如下四类:\n\n* 静态模板渲染方案\n* 404 重定向方案\n* SSG 方案\n* 预渲染方案\n\n#### 静态模板渲染方案\n\n静态模板渲染方案以 [hexo](https://github.com/hexojs/hexo) 最为典型, 此类框架需要指定特定的模板语言(比如 [pug](https://github.com/pugjs/pug))来开发主题, 从而达到网页内容直出的目的。\n\n#### 404 重定向方案\n\n404 重定向方案的原理主要是利用 GitHub Pages 的 404 机制进行重定向。比较典型的案例有 [spa-github-pages](https://github.com/rafgraph/spa-github-pages)、[sghpa](https://github.com/csuwildcat/sghpa)。\n\n但是遗憾的是 2019 年 Google [调整了爬虫算法](https://github.com/rafgraph/spa-github-pages#seo), 因此此类重定向方案在当下是无利于 SEO 的。spa-github-pages 作者也表示如果需要 SEO 的话, 使用 SSG 方案或者付费方案 [Netlify](https://www.netlify.com/blog/2020/04/07/creating-better-more-predictable-redirect-rules-for-spas/)。\n\n![](http://with.muyunyun.cn/bbb5ed8bce1e0c08dae94df98ff33262.jpg)\n\n#### SSG 方案\n\nSSG 方案全称为 static site generator, 中文可译为`路由静态化方案`。社区上 [nuxt](https://github.com/nuxt/nuxt.js)、[Gatsby](https://github.com/gatsbyjs/gatsby) 等框架赋能 SEO 的技术无一例外可以归类此类 SSG 方案。\n\n以 nuxt 框架为例, 在`约定式路由`的基础上, 其通过执行 `nuxt generate` 命令将 vue 文件转化为静态网页。\n\n例子:\n\n```bash\n-| pages/\n---| about.vue/\n---| index.vue/\n```\n\n静态化后变成:\n\n```bash\n-| dist/\n---| about/\n-----| index.html\n---| index.html\n```\n\n经过路由静态化后, 此时的文档目录结构可以托管于任何一个静态站点服务商。\n\n#### 预渲染方案\n\n经过上文对 SSG 方案的分析, 此时 SPA 站点的优化关键已经跃然纸上 —— `静态化路由`。相较于 nuxt、Gatsby 等框架存在约定式路由的限制, [create-react-doc](https://github.com/MuYunyun/create-react-doc) 在目录结构上的组织灵活自由。它的建站理念是`文件即站点`, 同时它对存量 markdown 文档的迁移也十分便捷。\n\n以 [blog](https://github.com/MuYunyun/blog) 项目结构为例:\n\n```bash\n-| BasicSkill/\n---| basic/\n-----| DOM.md\n-----| HTML5.md\n```\n\n静态化后应该变成:\n\n```bash\n-| BasicSkill/\n---| basic/\n-----| DOM\n-------| index.html\n-----| HTML5\n-------| index.html\n```\n\n经过调研, 该构思与 [prerender-spa-plugin](https://github.com/chrisvfritz/prerender-spa-plugin) 预渲染方案一拍即合。预渲染方案的原理可以见如下图:\n\n![](http://with.muyunyun.cn/f3eb18c162a31fb155fd9f4a364f7fb9.jpg)\n\n至此技术选型定下为使用预渲染方案实现 SSG。\n\n### 预渲染方案实践\n\ncreate-react-doc 在预渲染方案实践的步骤简单概况如下(完整改动可见 [mr](https://github.com/MuYunyun/create-react-doc/pull/95/files)):\n\n* 改造 hash 路由为 history 路由。因为 history 路由结构与文档静态化目录结构天然匹配。\n\n```diff\nexport default function RouterRoot() {\n  return (\n-    <HashRouter>\n+    <BrowserRouter>\n      <RoutersContainer />\n-    </HashRouter>\n+    </BrowserRouter>\n  )\n}\n```\n\n* 在开发环境、生成环境的基础上新增`预渲染环境`, 同时对路由进行环境匹配。其主要解决了`资源文件`与`主域名下的子路径`的对应关系。过程比较曲折, 感兴趣的同学可以见 [issue](https://github.com/chrisvfritz/prerender-spa-plugin/issues/215#issuecomment-415942268)。\n\n```diff\nconst ifProd = env === \'prod\'\n+ const ifPrerender = window.__PRERENDER_INJECTED && window.__PRERENDER_INJECTED.prerender\n+ const ifAddPrefix = ifProd && !ifPrerender\n\n<Route\n  key={item.path}\n  exact\n-  path={item.path}\n+  path={ifAddPrefix ? `/${repo}${item.path}` : item.path}\n  render={() => { ... }}\n/>\n```\n\n* 兼容 prerender-spa-plugin 在 webpack 5 的使用。\n\n官方版本当前未支持 webpack 5, 详见 [issue](https://github.com/chrisvfritz/prerender-spa-plugin/issues/414), 同时笔者存在对预渲染后执行回调的需求。因此当前 fork 了一份[版本](https://github.com/create-react-doc/prerender-spa-plugin) 出来, 解决了以上问题。\n\n### SEO 优化附加 buff, 站点秒开?\n\nSEO 优化至此, 来看下站点优化前后 FP、FCP、LCP 等指标数据的变化。\n\n以 [blog](https://muyunyun.cn/blog) 站点为例, 优化前后的指标数据如下(数据指标统计来自未使用梯子访问 gh-pages):\n\n优化前: 接入预渲染方案前, 首次绘制(FP、FCP) 的时间节点在 8s 左右, LCP 在 17s 左右。\n\n![](http://with.muyunyun.cn/23d56cc42fd778c23d8ed80331334343.jpg)\n\n优化后: 接入预渲染方案后, 首次绘制时间节点在 `1s` 之内开始, LCP 在 1.5s 之内。\n\n![](http://with.muyunyun.cn/9c551d29943c3d76700782374d86c37b.jpg)\n\n对比优化前后: 首屏绘制速度提升了 `8` 倍, 最大内容绘制速度提升 `11` 倍。本想优化 SEO, 结果站点性能优化的方式又 get 了一个。\n\n### 生成站点地图 Sitemap\n\n在完成预渲染实现站点路由静态化后, 距离 SEO 的目标又近了一步。暂且抛开 [SEO 优化细节](https://developers.google.com/search/docs/beginner/seo-starter-guide), 单刀直入 SEO 核心腹地 [站点地图](https://developers.google.com/search/docs/advanced/sitemaps/overview)。\n\n站点地图 Sitemap 格式与各字段含义简单说明如下:\n\n```xml\n<?xml version="1.0" encoding="utf-8"?>\n<urlset>\n  \x3c!-- 必填标签, 这是具体某一个链接的定义入口，每一条数据都要用 <url> 和 </url> 包含在里面, 这是必须的 --\x3e\n  <url>\n    \x3c!-- 必填, URL 链接地址,长度不得超过 256 字节 --\x3e\n    <loc>http://www.yoursite.com/yoursite.html</loc>\n    \x3c!-- 可以不提交该标签, 用来指定该链接的最后更新时间 --\x3e\n    <lastmod>2021-03-06</lastmod>\n    \x3c!-- 可以不提交该标签, 用这个标签告诉此链接可能会出现的更新频率 --\x3e\n    <changefreq>daily</changefreq>\n    \x3c!-- 可以不提交该标签, 用来指定此链接相对于其他链接的优先权比值，此值定于 0.0-1.0 之间 --\x3e\n    <priority>0.8</priority>\n  </url>\n</urlset>\n```\n\n> 上述 sitemap 中, lastmod、changefreq、priority 字段对 SEO 没那么重要, 可以见 [how-to-create-a-sitemap](https://ahrefs.com/blog/zh/how-to-create-a-sitemap/)\n\n根据上述结构, 笔者开发了 create-react-doc 的站点地图生成包 [crd-generator-sitemap](https://github.com/MuYunyun/create-react-doc/tree/main/packages/crd-generator-sitemap), 其逻辑就是将预渲染的路由路径拼接成上述格式。\n\n使用方只需在站点根目录的 `config.yml` 添加如下参数便可以在自动化发版过程中自动生成 [sitemap](http://muyunyun.cn/create-react-doc/sitemap.xml)。\n\n```bash\nseo:\n  google: true\n```\n\n将生成的站点地图往 [Google Search Console](https://search.google.com/search-console/sitemaps) 中提交试试吧,\n\n![](http://with.muyunyun.cn/97c21838a1e3310b3c1259e30ab85f3b.jpg)\n\n最后验证下 Google 搜索[站点](https://www.google.com/search?q=site%3Amuyunyun.cn%2Fcreate-react-doc&ie=UTF-8)优化前后效果。\n\n优化前: 只搜索到一条数据。\n\n![](http://with.muyunyun.cn/aea3401e5a31587deb8d93a14f32b011.jpg)\n\n优化后: 搜索到站点地图中声明的位置数据。\n\n![](http://with.muyunyun.cn/6df1536366c7d45e0f6418af03a7d948.jpg)\n\n至此使用 SSG 优化 SPA 站点实现 SEO 的完整流程完整实现了一遍。后续便剩下参照 [搜索引擎优化 (SEO) 新手指南](https://developers.google.com/search/docs/beginner/seo-starter-guide) 做一些 SEO 细节方面的优化以及支持更多搜索引擎了。\n\n### 小结\n\n本文从 SPA 站点实现 SEO 作为切入点, 先后介绍了 SEO 的基本原理, SEO 在 SPA 站点中的 4 种实践案例, 并结合 [create-react-doc](https://github.com/MuYunyun/create-react-doc) SPA 框架进行完整的 SEO 实践。\n\n如果本文对您有所帮助, 欢迎 [star](https://github.com/MuYunyun/create-react-doc)、[反馈](https://github.com/MuYunyun/create-react-doc/issues/new)。\n\n### 相关链接\n\n- [google:how-to-create-a-sitemap](https://ahrefs.com/blog/zh/how-to-create-a-sitemap/)'}}]);