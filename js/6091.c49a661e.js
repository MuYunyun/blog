(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6091],{6091:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),o=t.n(r),l=t(6479),a=t.n(l),i=(t(67294),t(3905));function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var s={};function c(e){var n=e.components,t=a()(e,["components"]);return(0,i.kt)("wrapper",u(u(u({},s),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"226. Invert Binary Tree"),(0,i.kt)("p",null,"Invert a binary tree."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),"Input:\n\n     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\n")),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),"Output:\n\n     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n")),(0,i.kt)("p",null,"Trivia:"),(0,i.kt)("p",null,"This problem was inspired by this original tweet by Max Howell:"),(0,i.kt)("p",null,"Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so f*** off."),(0,i.kt)("h3",null,"Analyze"),(0,i.kt)("p",null,"递归调换左右子节点的位置。"),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function(root) {\n  if (!root) return null\n\n  if (root.left || root.right) {\n    const tmp = root.left\n    root.left = root.right\n    root.right = tmp\n\n    invertTree(root.left)\n    invertTree(root.right)\n  }\n  return root\n};\n")))}c.isMDXComponent=!0}}]);