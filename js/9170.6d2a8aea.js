(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9170],{69170:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>m});var l=t(59713),r=t.n(l),u=t(6479),o=t.n(u),a=(t(67294),t(3905));function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var p={};function m(e){var n=e.components,t=o()(e,["components"]);return(0,a.kt)("wrapper",s(s(s({},p),t),{},{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",null,"Sort List"),(0,a.kt)("p",null,"Sort a linked list in ",(0,a.kt)("inlineCode",{parentName:"p"},"O(n logn)")," time using ",(0,a.kt)("inlineCode",{parentName:"p"},"constant space")," complexity."),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Input: 4->2->1->3\nOutput: 1->2->3->4\n")),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Input: -1->5->3->4->0\nOutput: -1->0->3->4->5\n")),(0,a.kt)("h3",null,"analyze"),(0,a.kt)("p",null,"根据题意的要求, 锁定使用",(0,a.kt)("inlineCode",{parentName:"p"},"归并排序"),"算法, 但是相对数组的归并排序, 有以下两个难点:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"问题一: 如何确认链表的中点?"),(0,a.kt)("li",{parentName:"ul"},"问题二: 链表如何 merge?")),(0,a.kt)("p",null,"针对问题一, 可以使用",(0,a.kt)("inlineCode",{parentName:"p"},"快慢指针"),"来确认链表的中点, 快指针每次走两步, 慢指针每次走一步, 慢指针最后的位置就是链表的中点位置, 步骤图解如下:"),(0,a.kt)("p",null,"针对奇数情形:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"          slow\n          quick\ndummy  ->  1  ->  null\n\n                 slow  quick\ndummy  ->  4  ->  2  ->  1  ->  null\n\n偶数:\n          slow  quick\ndummy  ->  1  ->  2  ->  null\n")),(0,a.kt)("p",null,"针对偶数情形:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"          slow   quick\ndummy  ->  1  ->  2  ->  null\n")),(0,a.kt)("p",null,"此外另外一个难点是如何进行 merge 操作。大体思路为"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"在 leftList 中找到比 rNode 小且最接近 rNode 的值 lNode;"),(0,a.kt)("li",{parentName:"ol"},"将 rNode 插入 lNode 的后面;")),(0,a.kt)("p",null,"步骤图解如下:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"lNode                         rNode\ndummy -> 1 -> 3 -> null         2 -> 4 -> null\n\n             lNode            rNode\ndummy -> 1 -> 2 -> 3 -> null    4 -> null\n")),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var sortList = function(head) {\n  const dummy = new ListNode(0)\n  dummy.next = head\n  let head0 = dummy.next\n\n  let slow = dummy, quick = dummy\n  while (quick.next) {\n    quick = quick.next\n    slow = slow.next\n    quick.next && (quick = quick.next)\n  }\n  // if the slow list is equal to the quick list, it means the current list only has one node.\n  if (slow === quick) return dummy.next\n  let rightList = slow.next\n  slow.next = null\n  let leftList = dummy\n  return merge(sortList(leftList.next), sortList(rightList))\n}\n\nvar merge = function(leftList, rightList) {\n  const dummy = new ListNode(0)\n  dummy.next = leftList\n  let lNode = dummy\n  let rNode = rightList\n\n  while (lNode && rNode) {\n    while (lNode.next && lNode.next.val < rNode.val) {\n      lNode = lNode.next\n    }\n    let rNext = rNode.next\n    rNode.next = lNode.next\n    lNode.next = rNode\n    rNode = rNext\n  }\n  return dummy.next\n}\n")),(0,a.kt)("h3",null,"姊妹题"),(0,a.kt)("p",null,"147、143、234"))}m.isMDXComponent=!0}}]);