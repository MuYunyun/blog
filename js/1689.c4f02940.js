(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1689],{31689:(e,t,l)=>{"use strict";l.r(t),l.d(t,{default:()=>o});var a=l(59713),n=l.n(a),r=l(6479),p=l.n(r),i=(l(67294),l(3905));function u(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function k(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?u(Object(l),!0).forEach((function(t){n()(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):u(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}var m={};function o(e){var t=e.components,l=p()(e,["components"]);return(0,i.kt)("wrapper",k(k(k({},m),l),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"富文本编辑器的层级"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"L0"),(0,i.kt)("li",{parentName:"ul"},"L1: 兼容性层面的优化, 自行实现 undo/redo 栈;"),(0,i.kt)("li",{parentName:"ul"},"L2: 移动端/国际化适配;")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"一个好的框架设计: 尽量少的提前做的假设限制!")),(0,i.kt)("h4",null,"L0"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"给元素上加上 ",(0,i.kt)("inlineCode",{parentName:"li"},"contenteditable")," 属性"),(0,i.kt)("li",{parentName:"ol"},"给选中元素执行 ",(0,i.kt)("inlineCode",{parentName:"li"},"document.execCommand()"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"另外一种方法是内嵌 iframe, 并将其 designmode 属性设置为 true。(有跨域问题, 日后填坑)")),(0,i.kt)("h3",null,"Slate 框架"),(0,i.kt)("h3",null,"调试"),(0,i.kt)("p",null,"可以使用 ",(0,i.kt)("inlineCode",{parentName:"p"},"editor.value.toJSON()")," 打印 tree 结构, 便于调试;"),(0,i.kt)("h3",null,"slate 设计模式"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"兜底原则",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"normalizeNode"),", 除指定节点外都走该 normalize 机制;")))),(0,i.kt)("h3",null,"有序列表的设计"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"小圆点 + 数字作为一个结构;"),(0,i.kt)("li",{parentName:"ol"},"点击有序列表, 当前节点的同级兄弟节点都会变为有序列表;"),(0,i.kt)("li",{parentName:"ol"},"点击可以取消有序列表;"),(0,i.kt)("li",{parentName:"ol"},"当在有序列表的节点建立兄弟节点或子节点时, 自动设置为有序列表;"),(0,i.kt)("li",{parentName:"ol"},"子节点规则 1 —— 1.1 —— 1.1.1 —— 1.1.1.1;"),(0,i.kt)("li",{parentName:"ol"},"当把某个子节点从有序节点变为无序节点时, 该节点的兄弟节点也变为无序; 该节点的子节点从 1 开始计数;"),(0,i.kt)("li",{parentName:"ol"},"原则: 兄弟节点必须都为有序或无序, 子节点可以无序也可以有序;")),(0,i.kt)("p",null,"结论:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"因此对 selection 是不敏感的, 即操作一个都会同时对同层级所有节点生效;")),(0,i.kt)("h3",null,"slate 开发坑点"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"一种方式开发完之后, 在某些情况下是不满足的, 因此需要返工。",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"example: 输入 @、# 进行筛选最初是使用 set 方式实现的, 一开始这样设计是没问题的, 但是考虑未来在多人协作过程中会造成一份数据的互相影响, 因此将其重构调整为将筛选的数据绕开 set 的方式, 取而代之的是外面传递进来。")))),(0,i.kt)("h3",null,"small tip"),(0,i.kt)("p",null,"small tip in slate editor"),(0,i.kt)("p",null,"When input b after a in page #slate #editor."),(0,i.kt)("pre",null,(0,i.kt)("code",k({parentName:"pre"},{className:"language-js"}),"console.log(editor.value.texts.get(0))   //  'a';\n\nrequestAnimationFrame(() => {\n  console.log(editor.value.texts.get(0)) // 'ab'\n})\n")),(0,i.kt)("h3",null,"Web Excel"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Google Sheets"),(0,i.kt)("li",{parentName:"ul"},"Office 365"),(0,i.kt)("li",{parentName:"ul"},"WPS Web"),(0,i.kt)("li",{parentName:"ul"},"钉钉表格",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"可扩展的表格",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"棋盘模型",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Range 模型"))))),(0,i.kt)("li",{parentName:"ul"},"协同的表格",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"名词",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"cp(Check Point): 全量表格数据"),(0,i.kt)("li",{parentName:"ul"},"op(Operation): 单次操作的表达"))),(0,i.kt)("li",{parentName:"ul"},"OT(Operation Transform) 是协同算法的关键。"),(0,i.kt)("li",{parentName:"ul"},"上限更高的 COT 调度算法要求 OT 同时运行在服务端与客户端"),(0,i.kt)("li",{parentName:"ul"},"Rust + WASM 实现 OT, 已验证最小闭环"))),(0,i.kt)("li",{parentName:"ul"},"高性能的表格",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"选择 canvas 渲染表格主界面, 不用 DOM 的原因是浪费在 DOM Pipeline 的开销很大"),(0,i.kt)("li",{parentName:"ul"},"分层渲染管线"),(0,i.kt)("li",{parentName:"ul"},"双缓冲画布, 支持流畅的滚动"),(0,i.kt)("li",{parentName:"ul"},"自研排版引擎")))))),(0,i.kt)("h3",null,"协同编辑"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",k({parentName:"p"},{href:"https://github.com/ether/etherpad-lite"}),"etherpad-lite")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"基于 OT 开发的从底层支持协同编辑的框架。"),(0,i.kt)("li",{parentName:"ul"},"代表: 飞书、石墨"),(0,i.kt)("li",{parentName:"ul"},"问题: 十年前代码、技术栈陈旧"),(0,i.kt)("li",{parentName:"ul"},"核心方法:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"apply"),(0,i.kt)("li",{parentName:"ul"},"compose"),(0,i.kt)("li",{parentName:"ul"},"follow: 解决两个 changeset 冲突问题"),(0,i.kt)("li",{parentName:"ul"},"inverse: 反操作, undo"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Changeset"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"代表对文档的一次修改"),(0,i.kt)("li",{parentName:"ul"},"eg: Z:4>1=1*0+1$2",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Z: 代表是一个 Changeset"),(0,i.kt)("li",{parentName:"ul"},"4>1: 源文档 4 个字符长度, 本次修改增加一个字符"),(0,i.kt)("li",{parentName:"ul"},"=1: 跳过第一个字符"),(0,i.kt)("li",{parentName:"ul"},"*0+1: 插入一个字符, 并且带上属性 0"),(0,i.kt)("li",{parentName:"ul"},"$2: 插入的具体字符"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",k({parentName:"li"},{href:"https://github.com/marcelklehr/changesets"}),"Changeset Iterator"),", 解析上述 Changeset 的库"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"渲染流程"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"内联属性"),(0,i.kt)("li",{parentName:"ul"},"行属性: 标题"),(0,i.kt)("li",{parentName:"ul"},"块属性: 图片"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"问题一: follow 为什么要对 A 与 B 都要处理, 可否只对一处进行处理?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"问题二: etherpad-lite 服务端与客户端协同的处理? (要有一个 master)"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"服务端设置为 true"),(0,i.kt)("li",{parentName:"ol"},"客户端设置为 false"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"问题三:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"弱网情况下, 如何优化协同问题? (比如输入拼音, 被截断, 无法删除)")))),(0,i.kt)("h3",null,"link"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",k({parentName:"li"},{href:"https://zhuanlan.zhihu.com/p/90931631"}),"编辑器初体验"))))}o.isMDXComponent=!0}}]);