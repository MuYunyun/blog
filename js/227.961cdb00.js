(self.webpackChunkblog=self.webpackChunkblog||[]).push([[227],{80227:n=>{n.exports="### 343. Integer Break\n\nGiven an integer n, break it into the sum of k `positive integers`, where k >= 2, and `maximize` the product of those integers.\n\nReturn the maximum product you can get.\n\nExample 1:\n\n```js\nInput: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 × 1 = 1.\n```\n\nExample 2:\n\n```js\nInput: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.\n```\n\n* Constraints:\n  * 2 <= n <= 58\n\n### Analyze\n\nn 可拆分为: `1 * integerBreak(n - 1)`、`2 * integerBreak(n - 2)` ...,  `x * integerBreak(n - x)`。直到 x 刚好大于等于 n - x 过。\n\n思路拆解(动态规划): 求 n === 2 时的最大累积, 求 n === 3 时的最大累积, 求 n === 4 时的最大累积, 依此类推...\n\n```js\nn === 2\n1 * 1\n\nn === 3\n1 * 2\n\nn === 4\n1 * 3\n2 * 2\n\nn === 5\n1 * 4\n2 * 3\n```\n\n* 递归: 自顶向下\n\n```js\n/**\n * @param {number} n\n * @return {number}\n */\nvar cache = {}\nvar integerBreak = function(n) {\n  if (n === 1) return 1\n  let result = 0\n  for (let i = 1; i < n; i++) {\n    if (i > n - i) {\n      return cache[n] = result\n    }\n    if (cache[n]) {\n      result = Math.max(result, i * Math.max(cache[n], n - i))\n    } else {\n      result = Math.max(result, i * Math.max(integerBreak(n - i), n - i))\n    }\n  }\n  return cache[n] = result\n}\n```\n\n```js\n6\n输出\n16\n预期结果\n9\n```"}}]);