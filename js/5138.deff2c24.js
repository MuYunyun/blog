(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5138],{25138:n=>{n.exports="### 队列\n\n队列的核心是 FIFO, 下面实现一个简单的队列:\n\n```js\nfunction Queue() {\n  this.items = []\n}\n\nQueue.prototype.push = function(item) {\n  this.items.push(item)\n}\n\nQueue.prototype.shift = function() {\n  return this.items.shift()\n}\n\nQueue.prototype.isEmpty = function() {\n  return this.items.length === 0\n}\n\nQueue.prototype.size = function() {\n  return this.items.length\n}\n\nQueue.prototype.clear = function() {\n  this.items = []\n}\n```\n\n### 队列知识延伸\n\n使用队列的一个典型场景是`树的广度遍历(BFS)`, 以下从 leetcode 中摘录了一些题目:\n\n* [Binary Tree Level Order Traversal](https://github.com/MuYunyun/blog/blob/master/LeetCode/102.Binary_Tree_Level_Order_Traversal/README.md)\n\n### 两种特殊队列\n\n#### 最小优先队列\n\n最小优先队列在生活中的例子: 比如普通用户上医院需要排队挂号, 但是具有 VIP 的用户能'插队'办理业务。用代码实现如下:\n\n```js\n// 继承 Queue 类\nconst PriorityQueue = function () {\n  Queue.apply(this)\n}\n\nPriorityQueue.prototype = Object.create(Queue.prototype)\n\nPriorityQueue.prototype.constructor = PriorityQueue\n\n// 修改 push 方法\nPriorityQueue.prototype.push = function(item, level) {\n  if (this.isEmpty()) {\n    this.items.push({ item, level })\n  } else {\n    let add = true\n    for (let i = 0; i < this.size(); i++) {\n      if (level < this.items[i].level) {\n        add = false\n        this.items.splice(i, 0, { item, level })\n        return\n      }\n    }\n    add && this.items.push({ item, level })\n  }\n}\n\nPriorityQueue.prototype.print = function() {\n  for (let obj of this.items) {\n    console.log(obj.item)\n  }\n}\n```\n\n```js\n// 调用\nconst queue = new PriorityQueue()\nqueue.push('张三', 2)\nqueue.push('李四', 1)\nqueue.push('赵五', 1)\nqueue.print() // 李四 赵五 张三\n```\n\n可以看到具有相同权限的李四和赵五依旧遵守队列的先进先出原则, 同时排在了张三的前面。\n\n#### 循环队列\n\n循环队列以击鼓传花为例, 代码实现如下:\n\n```js\nconst drumGame = function(names, number) {\n  const queue = new Queue()\n  for (let i = 0; i < names.length; i++) {\n    queue.push(names[i])\n  }\n\n  while (queue.size() > 1) {\n    for (let i = 0; i < number; i++) {\n      queue.push(queue.shift())  // 这句是循环队列的核心\n    }\n    const loser = queue.shift()\n    console.log(loser + ' 出局')\n  }\n  return queue.shift()           // 留下的最后一个就是胜利者\n}\n\nconst names = ['John', 'Jack', 'Camila', 'Ingrid', 'Carl']\nconst winner = drumGame(names, 7) // 假设每轮传花 7 次\nconsole.log('胜利者是: ' + winner)\n\n// Camila 出局\n// Jack 出局\n// Carl 出局\n// Ingrid 出局\n// 胜利者是: John\n```\n"}}]);