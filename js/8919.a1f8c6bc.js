(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8919],{28919:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>m});var n=r(59713),a=r.n(n),i=r(6479),l=r.n(i),o=(r(67294),r(3905));function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){a()(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var k={};function m(e){var t=e.components,r=l()(e,["components"]);return(0,o.kt)("wrapper",p(p(p({},k),r),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",null,"名词解释"),(0,o.kt)("p",null,"在介绍 ",(0,o.kt)("inlineCode",{parentName:"p"},"Fiber")," 之前, 需要对官网中出现的以下名词有个深刻的认知。"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Reconciliation"),": 调和算法, 得出 ",(0,o.kt)("inlineCode",{parentName:"li"},"Virtual Dom(针对 Web)")," 之间的差异;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Scheduling"),": 调度。",(0,o.kt)("inlineCode",{parentName:"li"},"Recct")," 通过内部的调度来安排不同优先级的任务在",(0,o.kt)("inlineCode",{parentName:"li"},"最佳时刻"),"执行(在 Reconciler 中调用);"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Render"),": 将 ",(0,o.kt)("inlineCode",{parentName:"li"},"Reconciliation")," 的结果刷新到界面上;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Fiber"),": 链表数据结构的 ",(0,o.kt)("inlineCode",{parentName:"li"},"React")," 实现(个人理解)。")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"平常大家说的 'Fiber' 其实是由上面这些名词组成的架构, Fiber 真正意义上只是一个链表数据结构的 React 实现版本。")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"在 Fiber 的数据结构下有助于实现 concurrent 以及 error boundary, 你觉得如何实现？")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"并发这个考虑 ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise.all"),"?"),(0,o.kt)("li",{parentName:"ul"},"可以通过链表锁定到具体的报错，让相应的 ",(0,o.kt)("inlineCode",{parentName:"li"},"error boundary")," 展现")),(0,o.kt)("h3",null,"Fiber"),(0,o.kt)("p",null,"fiber 架构是一个增量渲染。"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"current tree => workInProgress tree => current tree\n")),(0,o.kt)("p",null,"workInProgress tree: fiber node + other node(由 virtual dom 创建)，"),(0,o.kt)("p",null,"fiber 里包含了创造节点后的",(0,o.kt)("a",p({parentName:"p"},{href:"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js"}),"work"),", 比如对于组件的生命周期、对于 html 组件的增加、改、删除都属于副作用。"),(0,o.kt)("p",null,(0,o.kt)("a",p({parentName:"p"},{href:"https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31"}),"fiber 的根节点")),(0,o.kt)("h3",null,"Fiber Constructor"),(0,o.kt)("p",null,"如下是 ",(0,o.kt)("inlineCode",{parentName:"p"},"Fiber")," 的属性, Fiber 完整属性可参考",(0,o.kt)("a",p({parentName:"p"},{href:"https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78"}),"这里"),"，各个属性的作用是什么呢?"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"{\n  stateNode: new ClickCounter,\n  type: ClickCounter, // 组件的类型\n  alternate: null,\n  key: null,\n  updateQueue: null,\n  memoizedState: {count: 0},\n  pendingProps: {}, // 已经更新的 dom 但还未展示到页面上\n  memoizedProps: {}, // show last rendering\n  tag: 1, // Fiber 的类型\n  effectTag: 0,\n  nextEffect: null\n}\n")),(0,o.kt)("p",null,"下面是对 ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber")," 对象中各属性的解释。"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"type"),": 组件的类型"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"key"),": 根据 ",(0,o.kt)("inlineCode",{parentName:"li"},"key")," 字段判断该 ",(0,o.kt)("inlineCode",{parentName:"li"},"fiber")," 对象是否可以复用"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"child"),": 子链表的引用"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sibling"),": 相邻链表的引用"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"return"),": 父链表的引用"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pendingProps"),": 和 ",(0,o.kt)("inlineCode",{parentName:"li"},"memoizedProps")," 一起使用, 若 ",(0,o.kt)("inlineCode",{parentName:"li"},"pendingProps")," 与 ",(0,o.kt)("inlineCode",{parentName:"li"},"memoizedProps")," 相等, 则可以复用上一个 fiber 相关的输出"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"memoizedProps")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pendingWorkPriority"),": 代表优先级的数字。数字越大，优先级越低(例外 0 —— no work)。这个字段是否更改，待确认"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"alternate"),": 指向其对应的 ",(0,o.kt)("inlineCode",{parentName:"li"},"workInProgress fiber")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"effectTag"),": 副作用类型, 这个 effect 作用于 ",(0,o.kt)("inlineCode",{parentName:"li"},"commit")," 阶段(总共有 render、commit 阶段)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nextEffect"),": 下一个副作用"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"output"),": 输出值")),(0,o.kt)("h3",null,"Render phase"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"HostRoot")," 上使用 ",(0,o.kt)("a",p({parentName:"p"},{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132"}),"renderRoot")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056"}),"performUnitOfWork")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489"}),"beginWork")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879"}),"completeUnitOfWork")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532"}),"completeWork"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"performUnitOfWork、completeUnitOfWork")," 完成遍历，主要工作发生在 ",(0,o.kt)("inlineCode",{parentName:"p"},"beginWork、completeWork")," 中。"),(0,o.kt)("h3",null,"Commit phase"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L2306"}),"completeRoot"),": 起始于这个方法"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523"}),"commitRoot"),": Commit phase 阶段主要执行的方法, 更新 dom 以及调用 commit 阶段执行的生命周期方法。")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"找 finishedWork 可以这样找: fiber root -current property-> current tree -> host fiber -alternate-> workInProgress(finshedWork) tree")),(0,o.kt)("p",null,"commitRoot 的简单概要如下:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"function commitRoot(root, finishedWork) {\n  commitBeforeMutationLifecycles() // getSnapShotBeforeUpdate\n  commitAllHostEffects();          // operate dom, componentWillUnmount\n  root.current = finishedWork;     // 将 finishedWork tree 置为 current tree\n  commitAllLifeCycles();           // remaining lifecycles\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"提问: 为什么称呼从 ",(0,o.kt)("inlineCode",{parentName:"li"},"diff")," 转为 ",(0,o.kt)("inlineCode",{parentName:"li"},"reconciliation"))),(0,o.kt)("h3",null,"Fiber 的三个阶段"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"开始阶段: ",(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/MuYunyun/react/blob/master/packages/react-reconciler/src/ReactFiberBeginWork.js"}),"ReactFiberBeginWork")),(0,o.kt)("li",{parentName:"ul"},"完成阶段: ",(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/MuYunyun/react/blob/master/packages/react-reconciler/src/ReactFiberCompleteWork.js"}),"ReactFiberCompleteWork")),(0,o.kt)("li",{parentName:"ul"},"提交阶段: ",(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/MuYunyun/react/blob/master/packages/react-reconciler/src/ReactFiberCommitWork.js"}),"ReactFiberCommitWork"))),(0,o.kt)("h3",null,"资料推荐"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e"}),"Inside Fiber: in-depth overview of the new reconciliation algorithm in React")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://github.com/acdlite/react-fiber-architecture"}),"react-fiber-architecture"))))}m.isMDXComponent=!0}}]);