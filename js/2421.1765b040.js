(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2421],{36211:n=>{n.exports="### Insertion_Sort_List\n\nSort a linked list using insertion sort.\n\n![](https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif)\n\nA graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.\nWith each iteration one element (red) is removed from the input data and inserted in-place into the sorted list.\n\nAlgorithm of Insertion Sort:\n\n1. Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.\n2. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.\n3. It repeats until no input elements remain.\n\nExample 1:\n\n```js\nInput: 4->2->1->3\nOutput: 1->2->3->4\n```\n\nExample 2:\n\n```js\nInput: -1->5->3->4->0\nOutput: -1->0->3->4->5\n```\n\n### Analyze\n\nhead0: 当前已排序列表的最后一个;\npre: 用于遍历当前已排序列表;\n\n```js\n       head0\ndummy -> 4 -> 2 -> 1 -> 3\n            .\n            .\npre    head0\ndummy -> 4 -> 2 -> 1 -> 3\n            .\n            .\npre         head0\ndummy -> 2 -> 4 -> 1 -> 3\n            .\n            .\n             pre head0\ndummy -> 1 -> 2 -> 4 -> 3\n            .\n            .\n                      head0\ndummy -> 1 -> 2 -> 3 -> 4\n```\n\n```js\n        head0\ndummy -> -1 -> 5 -> 3 -> 4 -> 0\n              .\n              .\n         pre head0\ndummy -> -1 -> 5 -> 3 -> 4 -> 0\n              .\n              .\n              pre head0\ndummy -> -1 -> 3 -> 5 -> 4 -> 0\n              .\n              .\n              pre head0\ndummy -> -1 -> 3 -> 5 -> 4 -> 0\n              .\n              .\n         pre           head0\ndummy -> -1 -> 3 -> 4 -> 5 -> 0\n              .\n              .\n                            head0\ndummy -> -1 -> 0 -> 3 -> 4 -> 5\n```\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar insertionSortList = function(head) {\n  const dummy = new ListNode(0)\n  dummy.next = head\n  let head0 = dummy.next\n\n  while (head0 && head0.next) {\n    if (head0.next.val >= head0.val) {\n      head0 = head0.next\n      continue\n    }\n\n    let pre = dummy\n    while (pre.next.val < head0.next.val) { pre = pre.next }\n\n    let next = head0.next\n    head0.next = next.next\n    next.next = pre.next\n    pre.next = next\n  }\n\n  return dummy.next\n}\n```\n\n### 姊妹题\n\n148\n\n![](http://with.muyunyun.cn/d0cee500a18a46b76ed67016484973e2.jpg)\n"}}]);