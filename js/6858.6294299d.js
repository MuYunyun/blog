(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6858],{76858:n=>{n.exports="### 与位置相关的 api\n\n```js\n<div id=\"position\">\n  <div>这是可滚动元素</div>\n</div>\n```\n\n 以下都在 id 为 position 上取值:\n\n* scrollTop: 滚动距离\n* scrollHeight: 滚动元素的高度\n* clientHeight: 视图高度\n\n![](http://with.muyunyun.cn/b1d611e0509807308f79f5e50fb32de6.jpg)\n\n### 踩坑记录: 需要在 window 上挂载相关事件不适合使用 hooks, 否则需要花很多精力去额外处理。\n\n期间将 PullToRefresh 组件进行重构为 hooks, 伪代码如下:\n\n```js\nfunction PullToRefresh(props: PullToRefreshProps) {\n  ...\n  useEffect(() => {\n    addEventListener()\n    return () => {\n      removeEventListener()\n    }\n  }, [useBodyScroll])\n\n  const addEventListener = () => {\n    if (useBodyScroll) {\n      window.addEventListener('scroll', scroll)\n    } else {\n      scrollViewRef.current?.addEventListener('scroll', scroll)\n    }\n  }\n\n  const removeEventListener = () => {\n    if (useBodyScroll) {\n      window.removeEventListener('scroll', scroll)\n    } else {\n      scrollViewRef.current?.removeEventListener('scroll', scroll)\n    }\n  }\n\n  ...\n  return (\n    <div className={classStr} ref={scrollViewRef} style={containStyle} id={id}>\n      {useBodyScroll ? (\n        children\n      ) : (\n        <div className={`${prefixCls}-content`} style={{ minWidth: '100%', ...contentStyle }}>\n          {children}\n        </div>\n      )}\n      {refreshing ? <div className={`${prefixCls}-loading`}>{loadingInfo}</div> : null}\n    </div>\n  )\n}\n\nexport default PullToRefresh\n```\n\n踩的坑点是, 当使用方进行如下使用时, setList(newArr) 没有生效。目前归因是由于 hooks 的闭包原因, 在 window 上订阅的事件中使用的值每次执行没法获取最新的值。目前推荐还是使用 class 来构造此类组件。\n\n```js\nexport default function PullToRefreshDemo() {\n  const getMockData = () => {\n    let mockList: React.ReactNode[] = []\n    for (let i = 0; i < 40; i++) {\n      mockList.push(<p key={i}>这是标签这是标签</p>)\n    }\n    return mockList\n  }\n  const [list, setList] = useState(getMockData())\n  const [refreshing, setRefreshing] = useState(true)\n  const [checked, setChecked] = useState(false)\n\n  useEffect(() => {\n    setRefreshing(false)\n  }, [])\n\n  useEffect(() => {\n    setList(getMockData())\n  }, [checked])\n\n  const onLoad = (_direction: string, done: () => void) => {\n    console.log('请求接口')\n    setRefreshing(true)\n    const newArr = list.slice()\n    setTimeout(() => {\n      for (let i = 0; i < 5; i++) {\n        newArr.push(\n          <p key={Math.floor(100000000 * Math.random())} style={{ color: 'red' }}>\n            这是新的标签\n          </p>\n        )\n      }\n      setList(newArr)\n      setRefreshing(false)\n      done()\n    }, 1000)\n  }\n\n  const partlyScrollStyle: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    overflow: 'auto'\n  }\n\n  return (\n    <div style={checked ? {} : partlyScrollStyle}>\n      <div>\n        <label>是否开启全局滚动</label>: <Switch checked={checked} onChange={() => setChecked(!checked)} />\n      </div>\n      <Head title={checked ? '全局滚动' : '局部滚动'} />\n      <PullToRefresh onLoad={onLoad} refreshing={refreshing} useBodyScroll={checked}>\n        {list}\n      </PullToRefresh>\n    </div>\n  )\n}\n\n```\n\n### 组件测试\n\n见 JEST 测试一节。"}}]);