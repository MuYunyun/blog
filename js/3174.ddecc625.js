(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3174],{23174:n=>{n.exports="### 144.Binary Tree Preorder Traversal\n\nGiven a binary tree, return the `preorder traversal` of its nodes' values.\n\nExample:\n\n```js\nInput: [1,null,2,3]\n   1\n  / \\\nnull 2\n    / \\\n   3 null\n\nOutput: [1,2,3]\n```\n\nFollow up: Recursive solution is trivial, could you do it `iteratively`?\n\n### Analyze\n\n构建 tree\n\n```js\nvar tree1 = new TreeNode(1)\nvar tree2 = new TreeNode(2)\nvar tree3 = new TreeNode(3)\ntree2.left = tree3\ntree1.left = null\ntree1.right = tree2\n```\n\n### 递归法\n\n首先给出递归解法, 代码很简洁。\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n  if (root) {\n    return [root.val, ...preorderTraversal(root.left), ...preorderTraversal(root.right)]\n  } else {\n    return []\n  }\n}\n```\n\n### 扩展 —— 递归和栈的关系\n\n```js\n     1\n    / \\\n   2   5\n  / \\\n 3   4\n```\n\n针对如图剖析树在先序遍历下的递归操作, 其执行过程如下:\n\n* 步骤一: 将根节点 1 推入栈;\n* 步骤二: 从栈中取出顶部元素 1 并打印。\n  * 由于存在右节点 5, 将其推入栈中;\n  * 由于存在左节点 2, 将其推入栈中;\n* 步骤三: 从栈中取出顶部元素 2 并打印。\n  * 由于存在右节点 4, 将其推入栈中;\n  * 由于存在左节点 3, 将其推入栈中;\n* 步骤四: 从栈中取出顶部元素 3 并打印。\n* 步骤五: 从栈中取出顶部元素 4 并打印。\n* 步骤六: 从栈中取出顶部元素 5 并打印。\n\n模拟系统栈实现图解:\n\n```js\n步骤一:\n1\n\n步骤二: 取出 1 并打印;\n2\n5\n\n步骤三: 取出 2 并打印;\n3\n4\n5\n\n步骤四: 取出 3 并打印;\n步骤四: 取出 4 并打印;\n步骤四: 取出 5 并打印;\n```\n\n代码实现:\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n  const printArr = []\n  const stack = []\n  if (!root) return []\n  stack.push(root)\n  while (stack.length > 0) {\n    const popValue = stack.pop()\n    printArr.push(popValue.val)\n    popValue.right && stack.push(popValue.right)\n    popValue.left && stack.push(popValue.left)\n  }\n  return printArr\n}\n```\n\n### 颜色标记法(迭代法, 模拟系统栈)\n\n使用`颜色标记法`剖析树在中序遍历下的递归操作, 思路如下:\n\n1. 将访问过的元素标记为灰色, 未访问过的元素标记为白色;\n2. 从栈顶取出访问元素:\n   1. 若为灰色元素, 则打印之;\n   2. 若为白色元素, 按照`右 -> 左 -> 中`的顺序推入栈, 同时将白色元素标记为灰色元素;\n\n> 推荐使用颜色标记法, 它的解题思路适用于解前序、中序、后序遍历。\n\n```js\n     1\n    / \\\n   2   5\n  / \\\n 3   4\n```\n\n在如上所示树中, 模拟系统栈图解其执行过程如下:\n\n```js\ngray  1\nwhite 2\nwhite 5\n\nwhite 2\nwhite 5\n\ngray  2\nwhite 3\nwhite 4\nwhite 5\n```\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const stack = []\n  stack.push({\n    color: 'white',\n    node: root\n  })\n\n  while (stack.length > 0) {\n    const pickValue = stack.pop()\n    const { color, node } = pickValue\n    if (color === 'gray') {\n      printArr.push(node.val)\n    } else {\n      node.right && stack.push({ color: 'white', node: node.right })\n      node.left && stack.push({ color: 'white', node: node.left })\n      stack.push({ color: 'gray', node })\n    }\n  }\n\n  return printArr\n}\n```\n\n### Sister Title\n\n94、145"}}]);