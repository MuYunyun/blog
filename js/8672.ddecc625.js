(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8672],{49406:n=>{n.exports="### 111. Minimum Depth of Binary Tree\n\nGiven a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven binary tree [3,9,20,null,null,15,7],\n\n```js\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nreturn its minimum depth = 2.\n```\n\n### Analyze\n\nWay1: recursive\n\n陷阱: 需注意的是其中一个子节点为空, 另外一个子节点不为空, 需要以不为空的子节点那边来计数。比如\n\n```js\n    0\n   / \\\n  1  null\n```\n\n此时最短路径为 2 而不是 1。\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *   this.val = val;\n *   this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function(root) {\n  if (!root) return 0\n  const leftRootMinDepth = minDepth(root.left)\n  const rightRootMinDepth = minDepth(root.right)\n  if (leftRootMinDepth === 0 || rightRootMinDepth === 0) {\n    return Math.max(leftRootMinDepth, rightRootMinDepth) + 1\n  }\n  return Math.min(leftRootMinDepth, rightRootMinDepth) + 1\n};\n```\n\n### Sister title\n\n104"}}]);