(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6519],{16519:n=>{n.exports="### Redux 的简易实现\n\n```js\nfunction createStore(reducer, initialState) {\n  let state = initialState\n  const eventList = []\n\n  function getState() {\n    return state\n  }\n\n  function dispatch(action) {\n    state = reducer(state, action)\n    eventList.map(r => r(state))\n  }\n\n  function subscribe(event) {\n    eventList.push(event)\n  }\n\n  return {\n    getState,\n    subscribe,\n    dispatch,\n  }\n}\n```\n\n测试用例\n\n```js\nconst reducer = function(state, action) {\n  switch (action.type) {\n    case 'update':\n      return action.payload\n      break\n    case 'update1':\n      return {\n        ...state,\n        a: action.payload,\n      }\n      break\n    default:\n      return state\n  }\n}\n\nconst store = createStore(reducer, {a: 1, b: 2})\n\nstore.subscribe((state) => { console.log(state) })\n\nstore.dispatch({ type: 'update', payload: { a: 1, b: 2 }}) // { a: 1, b: 2 }\nstore.dispatch({ type: 'update1', payload: 3 }) // { a: 3, b: 2 }\nconsole.log(store.getState()) // { a: 3, b: 2 }\n```\n\n### Redux 与 Mobx 适用场景\n\n#### redux\n\n* store - view - action 的闭环\n* Redux 颗粒度更细, 相对更安全\n\n#### mobx\n\n* store - view 的闭环\n* 使用了类双向绑定的思维"}}]);