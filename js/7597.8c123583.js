(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7597],{47597:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>p});var t=r(59713),l=r.n(t),a=r(6479),i=r.n(a),o=(r(67294),r(3905));function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function u(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){l()(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}var c={};function p(e){var n=e.components,r=i()(e,["components"]);return(0,o.kt)("wrapper",u(u(u({},c),r),{},{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",null,"title"),(0,o.kt)("p",null,"假设按照升序排序的数组在预先未知的某个点上进行了旋转。"),(0,o.kt)("p",null,"( 例如, 数组 ","[0,1,2,4,5,6,7]"," 可能变为 ","[4,5,6,7,0,1,2]"," )。"),(0,o.kt)("p",null,"搜索一个给定的目标值, 如果数组中存在这个目标值, 则返回它的索引, 否则返回 -1 。"),(0,o.kt)("p",null,"你可以假设数组中不存在重复的元素。"),(0,o.kt)("p",null,"你的算法时间复杂度必须是 O(log n) 级别。"),(0,o.kt)("p",null,"示例 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n")),(0,o.kt)("p",null,"示例 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n")),(0,o.kt)("h3",null,"analyze"),(0,o.kt)("p",null,"思路: 考虑使用二分法? 这题难度觉得超纲了。然后再想。"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-js"}),"// 这道题卡在如何确定返回的指标\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function (nums, target) {\n  const length = nums.length\n  const middle = Math.floor(length / 2)\n  const leftArr = nums.slice(0, middle)\n  const rightArr = nums.slice(middle, length)\n\n  if (isOrder(leftArr)) {\n    sortByDivided(leftArr, target)\n  } else {\n    search(leftArr, target)\n  }\n\n  if (isOrder(rightArr)) {\n    sortByDivided(rightArr, target)\n  } else {\n    search(rightArr, target)\n  }\n};\n\nvar isOrder = function(arr) {\n  return arr[0] < arr[arr.length - 1]\n}\n\nvar sortByDivided = function(arr, target) {\n  const length = arr.length\n  let left = 0\n  let right = length\n  let middle\n\n  while (left <= right) {\n    middle = Math.floor((left + right) / 2)\n    if (target > arr[middle]) {\n      left = middle + 1\n    } else if (target < arr[middle]) {\n      right = middle - 1\n    } else if (target === arr[middle]) {\n      return middle\n    }\n  }\n\n  return false\n}\n")))}p.isMDXComponent=!0}}]);