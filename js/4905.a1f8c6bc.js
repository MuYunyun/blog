(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4905],{14905:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>p});var r=t(59713),l=t.n(r),o=t(6479),i=t.n(o),a=(t(67294),t(3905));function u(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?u(Object(t),!0).forEach((function(e){l()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var c={};function p(n){var e=n.components,t=i()(n,["components"]);return(0,a.kt)("wrapper",s(s(s({},c),t),{},{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",null,"Remove Duplicates from Sorted List II"),(0,a.kt)("p",null,"Given a ",(0,a.kt)("inlineCode",{parentName:"p"},"sorted linked list"),", delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list."),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Input: 1->2->3->3->4->4->5\nOutput: 1->2->5\n")),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Input: 1->1->1->2->3\nOutput: 2->3\n")),(0,a.kt)("h3",null,"Analyze"),(0,a.kt)("p",null,"思路: ",(0,a.kt)("inlineCode",{parentName:"p"},"快慢指针"),", 用快指针跳过有重复值的链表, 慢指针负责和快指针拼接! 思路比较精妙, 后面值得二刷。"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"s cur/q                     // s: slow; q: quick\n    1 -> 1 -> 1 -> 2 -> 3\n              .\n              .\ns->cur        q\n    1 -> 1 -> 1 -> 2 -> 3\n              .\n              .\n        next\ns ---------------\x3ecur/q\n    1 -> 1 -> 1 -> 2 -> 3\n              .\n              .\n                   s   cur/q\n    1 -> 1 -> 1 -> 2 -> 3\n              .\n              .\n                        s\n    1 -> 1 -> 1 -> 2 -> 3\n")),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n  const dummyHead = new ListNode(0)\n  dummyHead.next = head\n\n  let slowPoint = dummyHead\n\n  while(slowPoint.next) {\n    let cur = slowPoint.next\n    let quickPoint = cur\n    while(quickPoint.next && quickPoint.next.val === cur.val) {\n      quickPoint = quickPoint.next\n    }\n\n    if (cur === quickPoint) {\n      slowPoint = slowPoint.next\n    } else {\n      slowPoint.next = quickPoint.next\n    }\n  }\n\n  return dummyHead.next\n}\n")))}p.isMDXComponent=!0}}]);