(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9537],{59537:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t(59713),l=t.n(r),u=t(6479),s=t.n(u),o=(t(67294),t(3905));function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var c={};function i(e){var n=e.components,t=s()(e,["components"]);return(0,o.kt)("wrapper",a(a(a({},c),t),{},{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",null,"22.Generate Parentheses"),(0,o.kt)("p",null,"给出 n 代表生成括号的对数, 请你写出一个函数, 使其能够生成所有可能的并且有效的括号组合。"),(0,o.kt)("p",null,"例如, 给出 n = 3, 生成结果为:"),(0,o.kt)("p",null,'[\n"((()))",\n"(()())",\n"(())()",\n"()(())",\n"()()()"\n]'),(0,o.kt)("h3",null,"analyze"),(0,o.kt)("p",null,"回溯法:"),(0,o.kt)("p",null,"思路: 标记可使用的左括号和右括号数量, 中断条件为左右可使用括号数都为 0"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"若可使用的左括号的数量等于可使用的右括号的数量, 则加 '(';"),(0,o.kt)("li",{parentName:"ul"},"若可使用的左括号的数量为 0, 则加 ')';"),(0,o.kt)("li",{parentName:"ul"},"若可使用的左括号的数量小于可使用的右括号的数量, 则可以加 '(' 又可以加 ')'")),(0,o.kt)("pre",null,(0,o.kt)("code",a({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const result = []\n  let str = ''\n  function judege(left, right, str) {\n    if (left === 0 && right === 0) {\n      result.push(str)\n      str = ''\n      return\n    }\n\n    if (left === right) {\n      judege(left - 1, right, str + '(')\n    } else if (left === 0) {\n      judege(left, right - 1, str + ')')\n    } else {\n      judege(left - 1, right, str + '(')\n      judege(left, right - 1, str + ')')\n    }\n  }\n\n  judege(n, n, str)\n  return result\n};\n")))}i.isMDXComponent=!0}}]);