(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1612],{81612:n=>{n.exports="### 112. Path Sum\n\nGiven a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven the below binary tree and sum = 22,\n\n```js\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\      \\\n7    2      1\n```\n\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.\n\n### Analyze\n\n使用递归的思路进行解题:\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */\nvar hasPathSum = function(root, sum) {\n  if (!root) return false\n  return ifHasPathSum(root, sum)\n}\n\nvar ifHasPathSum = function(node, sum) {\n  if (!node && sum !== 0) return false\n  if (!node && sum === 0) return true\n  const remainingVal = sum - node.val\n  const leftResult = ifHasPathSum(node.left, remainingVal)\n  if (leftResult) return true\n  const rightResult = ifHasPathSum(node.right, remainingVal)\n  if (rightResult) return true\n  return false\n}\n```\n\n此时 ac, 卡在了以下测试用例中(此题的难点在于对递归终止条件的判断)\n\n```js\n    1\n  /   \\\nnull   2\n```\n\n先对代码进行整理精简:\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */\nvar hasPathSum = function(root, sum) {\n  if (!root) return false\n  return ifHasPathSum(root, sum)\n}\n\nvar ifHasPathSum = function(node, sum) {\n  if (!node) return sum === 0\n  const remainingVal = sum - node.val\n  return ifHasPathSum(node.left, remainingVal) || ifHasPathSum(node.right, remainingVal)\n}\n```\n\n终止条件应由`判断当前节点为空而且 sum === 0`调整为`判断当前节点为叶子节点且 node.val === sum`, 再次修正代码\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */\nvar hasPathSum = function(root, sum) {\n  if (!root) return false\n  if (!root.left && !root.right) return root.val === sum\n  const remainingVal = sum - root.val\n  return hasPathSum(root.left, remainingVal) || hasPathSum(root.right, remainingVal)\n}\n```\n"}}]);