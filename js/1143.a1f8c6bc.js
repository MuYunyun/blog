(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1143],{51143:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var r=n(59713),o=n.n(r),l=n(6479),a=n.n(l),s=(n(67294),n(3905));function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){o()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var i={};function p(e){var t=e.components,n=a()(e,["components"]);return(0,s.kt)("wrapper",f(f(f({},i),n),{},{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",null,"404. Sum of Left Leaves"),(0,s.kt)("p",null,"Find the sum of all left leaves in a given binary tree."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",f({parentName:"pre"},{className:"language-js"}),"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,s.kt)("p",null,"There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24."),(0,s.kt)("h3",null,"Analyze"),(0,s.kt)("p",null,"递归思路解题"),(0,s.kt)("pre",null,(0,s.kt)("code",f({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumOfLeftLeaves = function(root) {\n  if (!root) return 0\n  if (root.left) {\n    if (!root.left.left && !root.left.right) {\n      return root.left.val + sumOfLeftLeaves(root.right)\n    } else {\n      return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n    }\n  } else {\n    return sumOfLeftLeaves(root.right)\n  }\n};\n")))}p.isMDXComponent=!0}}]);