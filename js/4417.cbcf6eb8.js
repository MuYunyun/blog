(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4417],{94417:n=>{n.exports='### title\n\n给定一个字符串, 找出不含有重复字符的最长子串的长度。\n\n示例:\n\n```js\n给定 "abcabcbb", 没有重复字符的最长子串是 "abc", 那么长度就是 3。\n\n给定 "bbbbb", 最长的子串就是 "b", 长度是 1。\n\n给定 "pwwkew", 最长子串是 "wke", 长度是 3。请注意答案必须是一个子串, "pwke" 是子序列而不是子串。\n```\n\n### 题解\n\n方法名: 滑动窗口是字符串/数组中常用概念\n\n解法一: `判断字符串 s[i, j) 中是否有 s.charAt(j + 1), 如果有, 给左区间加上相应的值`, 执行时间大致为 98ms 左右。\n\n具体步骤如下:\n\n1. 取滑动列表 [left, right];\n2. 若列表 [left, right] 中的取值之和小于 s, 则列表的有边界 right 往右扩张。\n3. 若列表 [left, right] 中的取值之和大于 s, 则列表的左边界 left 往右扩张。\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n  if (s.length < 1) {\n    return 0\n  }\n  let i = 0, j = 1, longest = 1\n  while (j < s.length) {\n    if (s.slice(i, j).indexOf(s.charAt(j)) > -1) {\n      i += s.slice(i, j).indexOf(s.charAt(j)) + 1\n    } else {\n      longest = Math.max(j - i + 1, longest)\n    }\n    j++\n  }\n  return longest\n}\n```\n\n思考: 针对 `判断字符串 s[i, j) 中是否有 s.charAt(j + 1)` 这一句, 是否能使用 O(n) 时间复杂度的算法代替 indexOf 呢? 使用 cacheObj 来缓存值, 测试执行时间大致为 170ms 左右。\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n  let left = 0, right = 0 // [left, right] 区域\n  let result = 0 // 假定结果的初始值为 0\n  const cacheObj = {}\n\n  while (left < s.length) {\n    if (right < s.length && !cacheObj[s[right]]) {\n      cacheObj[s[right]] = 1\n      result = Math.max(result, right - left + 1)\n      right++\n    } else {\n      cacheObj[s[left]] = null\n      left++\n    }\n  }\n  if (result === 0) {\n    return 0\n  }\n  return result\n}\n```\n\n### Sister Title\n\n76(todo)、209、438'}}]);