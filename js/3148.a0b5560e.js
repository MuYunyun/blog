(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3148],{43148:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>u});var r=t(59713),l=t.n(r),a=t(6479),o=t.n(a),c=(t(67294),t(3905));function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){l()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var s={};function u(n){var e=n.components,t=o()(n,["components"]);return(0,c.kt)("wrapper",p(p(p({},s),t),{},{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h2",null,"TypeScript 中使用函数"),(0,c.kt)("h3",null,"Call Signatures"),(0,c.kt)("p",null,"如果我们期望根据属性类型动态选取函数调用，可以书写如下:"),(0,c.kt)("pre",null,(0,c.kt)("code",p({parentName:"pre"},{className:"language-ts"}),'type DescribableFunction = {\n  description: string;\n  (someArg: number): boolean;\n};\nfunction doSomething(fn: DescribableFunction) {\n  console.log(fn.description + " returned " + fn(6));\n}\n')),(0,c.kt)("p",null,"在这里，",(0,c.kt)("inlineCode",{parentName:"p"},"fn(6)")," 中传入了数字 6，因而其命中了对象中 ",(0,c.kt)("inlineCode",{parentName:"p"},"(someArg: number): boolean;")," 该条规则。"),(0,c.kt)("h3",null,"在函数中使用泛型应该注意的点"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"尽可能地直接使用参数类型，而不要去约束它。")),(0,c.kt)("pre",null,(0,c.kt)("code",p({parentName:"pre"},{className:"language-ts"}),"function firstElement1<Type>(arr: Type[]) {\n  return arr[0];\n}\n\nfunction firstElement2<Type extends any[]>(arr: Type) {\n  return arr[0];\n}\n\n// ✅ a: number\nconst a = firstElement1([1, 2, 3]);\n// ❎ b: any\nconst b = firstElement2([1, 2, 3]);\n")),(0,c.kt)("p",null,"粗看 firstElement1 与 firstElement2 似乎达到一样的效果，但是结果上 a 的类型是 number，b 的类型是 any。这是因为 TypeScript 必须使用约束类型解析 arr","[0]"," 表达式，而非在调用期间“等待”解析元素。"),(0,c.kt)("h3",null,"不要在 CallBacks 中使用可选参数表达式"),(0,c.kt)("p",null,"若需要在回调函数中定义参数的类型，尽量不使用可选参数表达式，除非消费该函数时能保证处理好可选参数，这样子或多或少会增加代码的理解成本。"),(0,c.kt)("pre",null,(0,c.kt)("code",p({parentName:"pre"},{className:"language-ts"}),"// 定义侧\nfunction myForEach(arr: any[], callback: (arg: any, index?: number) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    callback(arr[i]);\n  }\n}\n\n// 消费侧\nmyForEach([1, 2, 3], (a, i) => {\n  // ❎ Object is possibly 'undefined'.\n  console.log(i.toFixed());\n})\n")),(0,c.kt)("p",null,"上述代码中，在定义侧对回调函数中的 index 参数作了可选表达式的声明，xxx"),(0,c.kt)("h3",null,"link"),(0,c.kt)("p",null,(0,c.kt)("a",p({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/functions.html"}),"More on Functions")))}u.isMDXComponent=!0}}]);