(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8762],{98762:n=>{n.exports="### title\n\n给定两个数组，编写一个函数来计算它们的交集。\n\n示例 1:\n\n```js\n输入: nums1 = [1,2,2,1], nums2 = [2,2]\n输出: [2]\n```\n\n示例 2:\n\n```js\n输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n输出: [9,4]\n```\n\n说明:\n\n输出结果中的每个元素一定是`唯一的`。\n我们可以不考虑输出结果的顺序。\n\n### 题解\n\n因为题目明确了输出结果中的每个元素一定是`唯一的`, 因而可以使用集合 Set 唯一的特性, 完成题解。\n\n```js\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function(nums1, nums2) {\n  const resultSet = new Set()\n  const num1Set = new Set(nums1)\n  for (let i = 0; i < nums2.length; i++) {\n    if (num1Set.has(nums2[i])) {\n      resultSet.add(nums2[i])\n    }\n  }\n\n  return [...resultSet]\n}\n```\n\n### 进阶思考\n\n如果给定的两个数组是排好序的, 是否有其它解法呢?\n\n示例 1:\n\n```js\n输入: nums1 = [1,1,2,2], nums2 = [2,2]\n输出: [2]\n```\n\n示例 2:\n\n```js\n输入: nums1 = [4,5,9], nums2 = [4,4,8,9,9]\n输出: [4,9]\n```\n\n大致想法: 可以使用移动指针的方式。\n\n### 相关题目\n\n202、205、242、290、350、451"}}]);