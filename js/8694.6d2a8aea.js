(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8694],{98694:(n,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>c});var e=t(59713),o=t.n(e),u=t(6479),s=t.n(u),p=(t(67294),t(3905));function l(n,r){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),t.push.apply(t,e)}return t}function i(n){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){o()(n,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(t,r))}))}return n}var m={};function c(n){var r=n.components,t=s()(n,["components"]);return(0,p.kt)("wrapper",i(i(i({},m),t),{},{components:r,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"title"),(0,p.kt)("p",null,'将字符串 "PAYPALISHIRING" 以 Z 字形排列成给定的行数:'),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{}),"P   A   H   N\nA P L S I I G\nY   I   R\n")),(0,p.kt)("p",null,'之后从左往右, 逐行读取字符: "PAHNAPLSIIGYIR"'),(0,p.kt)("p",null,"实现一个将字符串进行指定行数变换的函数:"),(0,p.kt)("p",null,"string convert(string s, int numRows);"),(0,p.kt)("p",null,"示例 1:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{}),'输入: s = "PAYPALISHIRING", numRows = 3\n输出: "PAHNAPLSIIGYIR"\n')),(0,p.kt)("p",null,"示例 2:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{}),'输入: s = "PAYPALISHIRING", numRows = 4\n输出: "PINALSIGYAHRPI"\n解释:\n\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n')),(0,p.kt)("h3",null,"analyze"),(0,p.kt)("p",null,"很受伤, 暴力解题后超出内存限制, 日后再看。"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function (s, numRows) {\n  const perGroupNum = numRows + numRows - 2 // 每组个数\n  const GroupNum = Math.ceil(s.length / perGroupNum) // 有几组\n\n  const arr = []\n  for (let i = 0; i < GroupNum; i++) {\n    let linkStr = ''\n    let position = i * perGroupNum\n    linkStr += s.slice(0 + position, numRows + position)\n    linkStr += s.slice(numRows + position, numRows + position + perGroupNum - numRows).split('').reverse().join('')\n    arr.push(linkStr)\n  }\n\n  let str = ''\n\n  let num = 0 // 第几行\n  while (num < numRows) {\n    for (let i = 0; i < GroupNum; i++) {\n      arr[i][num] ? str += arr[i][num] : ''\n      if (num > 0 && num < numRows - 1 && arr[i][num + numRows - 1]) {\n        str += arr[i][num + numRows - 1]\n      }\n    }\n    num++\n  }\n\n  return str\n};\n")))}c.isMDXComponent=!0}}]);