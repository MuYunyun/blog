(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3725],{3725:n=>{n.exports='### 401.Binary Watch\n\nA binary watch has 4 LEDs on the top which represent the hours `(0-11)`, and the 6 LEDs on the bottom represent the minutes `(0-59)`.\n\nEach LED represents a zero or one, with the least significant bit on the right.\n\n![](https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg)\n\nFor example, the above binary watch reads "3:25".\n\nGiven a non-negative integer n which `represents the number of LEDs that are currently on`, return all possible times the watch could represent.\n\nExample:\n\n```js\nInput: n = 1\nReturn: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]\n```\n\nNote:\n* The order of output does not matter.\n* `The hour must not contain a leading zero`, for example "01:00" is not valid, it should be "1:00".\n* `The minute must be consist of two digits and may contain a leading zero`, for example "10:2" is not valid, it should be "10:02".\n\n### Analyze\n\n题目可以转化为在 `[1, 2, 4, 8, 1, 2, 4, 8, 16, 32]` 中任意取 n 个数值, 有几种组合? 组合问题可以使用`回溯法`求解得到。\n\n* 前置条件: 确认如果一个 led 灯都没亮着是否为 "0:00"。\n* 小时位数范围为 [0, 11], 分钟范围为 [0, 59]。\n\n```js\n/**\n * @param {number} num\n * @return {string[]}\n */\nvar readBinaryWatch = function(num) {\n  const arr = [1, 2, 4, 8, 1, 2, 4, 8, 16, 32]\n  const result = []\n  backTrace(arr, num, 0, [0, 0], result)\n  return result\n};\n\nvar backTrace = function(arr, num, start, temp, result) {\n  if (temp[0] >= 12 || temp[1] >= 60) return\n  if (num === 0) {\n    result.push(`${temp[0]}:${padding(temp[1])}`)\n    return\n  }\n\n  for (let i = start; i < arr.length; i++) {\n    if (i <= 3) {\n      temp[0] = temp[0] + arr[i]\n    } else {\n      temp[1] = temp[1] + arr[i]\n    }\n    num = num - 1\n    backTrace(arr, num, i + 1, temp, result)\n    if (i <= 3) {\n      temp[0] = temp[0] - arr[i]\n    } else {\n      temp[1] = temp[1] - arr[i]\n    }\n    num = num + 1\n  }\n}\n\nvar padding = function(num) {\n  return num < 10 ? `0${num}` : num\n}\n```'}}]);