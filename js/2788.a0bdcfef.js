(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2788],{72788:n=>{n.exports="### 100. Same Tree\n\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\n```js\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\n```\n\nExample 2:\n\n```js\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\n```\n\nExample 3:\n\n```js\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n```\n\n### Analyze\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function (p, q) {\n  if (p === null && q === null) {\n    return true\n  } else if (p === null || q === null) {\n    return false\n  }\n\n  if (p.val === q.val) {\n    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right)\n  } else {\n    return false\n  }\n};\n```"}}]);