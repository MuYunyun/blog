(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2579],{2579:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),o=t.n(r),l=t(6479),a=t.n(l),i=(t(67294),t(3905));function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var u={};function c(e){var n=e.components,t=a()(e,["components"]);return(0,i.kt)("wrapper",p(p(p({},u),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"Binary Tree Postorder Traversal"),(0,i.kt)("p",null,"Given a binary tree, return the postorder traversal of its nodes' values."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"Input: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n")),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"Output: [3,2,1]\n")),(0,i.kt)("p",null,"Follow up: Recursive solution is trivial, could you do it iteratively?"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"function TreeNode(val) {\n  this.val = val\n  this.left = this.right = null\n}\n\nvar tree1 = new TreeNode(1)\nvar tree2 = new TreeNode(2)\nvar tree3 = new TreeNode(3)\ntree2.left = tree3\ntree1.left = null\ntree1.right = tree2\n")),(0,i.kt)("h3",null,"递归法"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function(root) {\n  if (root) {\n    return [...postorderTraversal(root.left), ...postorderTraversal(root.right), root.val]\n  } else {\n    return []\n  }\n}\n")),(0,i.kt)("h3",null,"颜色标记法(迭代法, 模拟系统栈)"),(0,i.kt)("p",null,"使用",(0,i.kt)("inlineCode",{parentName:"p"},"颜色标记法"),"剖析树在中序遍历下的递归操作, 思路如下:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"将访问过的元素标记为灰色, 未访问过的元素标记为白色;"),(0,i.kt)("li",{parentName:"ol"},"从栈顶取出访问元素:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"若为灰色元素, 则打印之;"),(0,i.kt)("li",{parentName:"ol"},"若为白色元素, 按照",(0,i.kt)("inlineCode",{parentName:"li"},"中 -> 右 -> 左"),"的顺序推入栈, 同时将白色元素标记为灰色元素;")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"推荐使用颜色标记法, 它的解题思路适用于解前序、中序、后序遍历。")),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"     1\n    / \\\n   2   5\n  / \\\n 3   4\n")),(0,i.kt)("p",null,"在如上所示树中, 模拟系统栈图解其执行过程如下:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"gray  1\nwhite 2\nwhite 5\n\nwhite 2\nwhite 5\n\ngray  2\nwhite 3\nwhite 4\nwhite 5\n")),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const stack = []\n  stack.push({ color: 'white', node: root })\n\n  while (stack.length > 0) {\n    const { color, node } = stack.pop()\n    if (color === 'gray') {\n      printArr.push(node.val)\n    } else {\n      stack.push({ color: 'gray', node })\n      node.right && stack.push({ color: 'white', node: node.right })\n      node.left && stack.push({ color: 'white', node: node.left })\n    }\n  }\n\n  return printArr\n}\n")),(0,i.kt)("h3",null,"Sister Title"),(0,i.kt)("p",null,"94、144"))}c.isMDXComponent=!0}}]);