(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3852],{63852:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>d});var r=t(59713),i=t.n(r),l=t(6479),a=t.n(l),u=(t(67294),t(3905));function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var c={};function d(n){var e=n.components,t=a()(n,["components"]);return(0,u.kt)("wrapper",s(s(s({},c),t),{},{components:e,mdxType:"MDXLayout"}),(0,u.kt)("h3",null,"200. Number of Islands"),(0,u.kt)("p",null,"Given an m x n 2d grid map of '1's (land) and '0's (water), return the number of islands."),(0,u.kt)("p",null,"An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water."),(0,u.kt)("p",null,"Example 1:"),(0,u.kt)("pre",null,(0,u.kt)("code",s({parentName:"pre"},{className:"language-js"}),'Input: grid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]\nOutput: 1\n')),(0,u.kt)("p",null,"Example 2:"),(0,u.kt)("pre",null,(0,u.kt)("code",s({parentName:"pre"},{className:"language-js"}),'Input: grid = [\n  ["1","1","0","0","0"],\n  ["1","1","0","0","0"],\n  ["0","0","1","0","0"],\n  ["0","0","0","1","1"]\n]\nOutput: 3\n')),(0,u.kt)("p",null,"Constraints:"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"m == grid.length"),(0,u.kt)("li",{parentName:"ul"},"n == grid","[i]",".length"),(0,u.kt)("li",{parentName:"ul"},"1 <= m, n <= 300"),(0,u.kt)("li",{parentName:"ul"},"grid","[i][j]"," is '0' or '1'.")),(0,u.kt)("h3",null,"Analyze"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"floodfill")," 算法。")),(0,u.kt)("pre",null,(0,u.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n  const result = []\n  const used = []\n  for (let m = 0; m < grid.length; m++) {\n    for (let n = 0; n < grid[m].length; n++) {\n      if (used.indexOf(`${m},${n}`) === -1 && grid[m][n] === '1') {\n        result.push(used)\n        backTrace(grid, m, n, result, used)\n      }\n    }\n  }\n  return result.length\n};\n\nvar backTrace = function(grid, m, n, result, used) {\n  const direction = [[1, 0], [0, 1], [-1, 0], [0, -1]]\n  for (let i = 0; i < direction.length; i++) {\n    const use = used.indexOf(`${m + direction[i][0]},${n + direction[i][1]}`) > -1\n    if (!use && grid[m + direction[i][0]] && grid[m + direction[i][0]][n + direction[i][1]] === '1') {\n      used.push(`${m + direction[i][0]},${n + direction[i][1]}`)\n      backTrace(grid, m + direction[i][0], n + direction[i][1], result, used)\n    }\n  }\n}\n")),(0,u.kt)("h3",null,"Sister Title"),(0,u.kt)("p",null,"130、200"))}d.isMDXComponent=!0}}]);