(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4118],{44118:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var a=n(59713),r=n.n(a),p=n(6479),l=n.n(p),s=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var u={};function c(e){var t=e.components,n=l()(e,["components"]);return(0,s.kt)("wrapper",i(i(i({},u),n),{},{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",null,"TypeScript 条件类型精读与实践"),(0,s.kt)("p",null,"在大多数程序中，我们必须根据输入做出决策。TypeScript 也不例外，使用条件类型可以描述输入类型与输出类型之间的关系。"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"本文同步首发在",(0,s.kt)("a",i({parentName:"p"},{href:"https://github.com/MuYunyun/blog/issues/140"}),"个人博客"),"中，欢迎订阅、交流。")),(0,s.kt)("h2",null,"用于条件判断时的 extends"),(0,s.kt)("p",null,"当 extends 用于表示条件判断时，可以总结出以下规律"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"若位于 extends 两侧的类型相同，则 extends 在语义上可理解为 ",(0,s.kt)("inlineCode",{parentName:"li"},"==="),"，可以参考如下例子:")),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type result1 = 'a' extends 'abc' ? true : false // false\ntype result2 = 123 extends 1 ? true : false     // false\n")),(0,s.kt)("ol",i({},{start:2}),(0,s.kt)("li",{parentName:"ol"},"若位于 extends 右侧的类型包含位于 extends 左侧的类型(即狭窄类型 extends 宽泛类型)时，结果为 true，反之为 false。可以参考如下例子:")),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type result3 = string extends string | number ? true : false // true\n")),(0,s.kt)("ol",i({},{start:3}),(0,s.kt)("li",{parentName:"ol"},"当 extends 作用于对象时，若在对象中指定的 key 越多，则其类型定义的范围越狭窄。可以参考如下例子:")),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type result4 = { a: true, b: false } extends { a: true } ? true : false // true\n")),(0,s.kt)("h2",null,"在泛型类型中使用条件类型"),(0,s.kt)("p",null,"考虑如下 Demo 类型定义:"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type Demo<T, U> = T extends U ? never : T\n")),(0,s.kt)("p",null,"结合",(0,s.kt)("a",i({parentName:"p"},{href:"#%E7%94%A8%E4%BA%8E%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E6%97%B6%E7%9A%84-extends"}),"用于条件判断时的 extends"),"，可知 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c' extends 'a'")," 是 false, 因此 ",(0,s.kt)("inlineCode",{parentName:"p"},"Demo<'a' | 'b' | 'c', 'a'>")," 结果是 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c'")," 么?"),(0,s.kt)("p",null,"查阅",(0,s.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"}),"官网"),"，其中有提到:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"When conditional types act on a generic type, they become distributive when given a union type.")),(0,s.kt)("p",null,"即当条件类型作用于泛型类型时，联合类型会被拆分使用。即 ",(0,s.kt)("inlineCode",{parentName:"p"},"Demo<'a' | 'b' | 'c', 'a'>")," 会被拆分为 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' extends 'a'"),"、",(0,s.kt)("inlineCode",{parentName:"p"},"'b' extends 'a'"),"、",(0,s.kt)("inlineCode",{parentName:"p"},"'c' extends 'a'"),"。用伪代码表示类似于:"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"function Demo(T, U) {\n  return T.map(val => {\n    if (val !== U) return val\n    return 'never'\n  })\n}\n\nDemo(['a', 'b', 'c'], 'a') // ['never', 'b', 'c']\n")),(0,s.kt)("p",null,"此外根据 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type"}),"never 类型"),"的定义 —— never 类型可分配给每种类型，但是没有类型可以分配给 never(除了 never 本身)。即 ",(0,s.kt)("inlineCode",{parentName:"p"},"never | 'b' | 'c'")," 等价于 ",(0,s.kt)("inlineCode",{parentName:"p"},"'b' | 'c'"),"。"),(0,s.kt)("p",null,"因此 ",(0,s.kt)("inlineCode",{parentName:"p"},"Demo<'a' | 'b' | 'c', 'a'>")," 的结果并不是 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c'")," 而是 ",(0,s.kt)("inlineCode",{parentName:"p"},"'b' | 'c'"),"。"),(0,s.kt)("h3",null,"工具类型"),(0,s.kt)("p",null,"心细的读者可能已经发现了 Demo 类型的声明过程其实就是 TypeScript 官方提供的工具类型中 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#excludetype-excludedunion"}),(0,s.kt)("inlineCode",{parentName:"a"},"Exclude<Type, ExcludedUnion>"))," 的实现原理，其用于将联合类型 ExcludedUnion 排除在 Type 类型之外。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type T = Demo<'a' | 'b' | 'c', 'a'> // T: 'b' | 'c'\n")),(0,s.kt)("p",null,"基于 Demo 类型定义，进一步地还可以实现官方工具类型中的 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys"}),(0,s.kt)("inlineCode",{parentName:"a"},"Omit<Type, Keys>")),"，其用于移除对象 Type\n中满足 keys 类型的属性值。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type Omit<Type, Keys> = {\n  [P in Demo<keyof Type, Keys>]: Type<P>\n}\n\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype T = Omit<Todo, 'description'> // T: { title: string; completed: boolean }\n")),(0,s.kt)("h3",null,"逃离舱"),(0,s.kt)("p",null,"如果想让 ",(0,s.kt)("inlineCode",{parentName:"p"},"Demo<'a' | 'b' | 'c', 'a'>")," 的结果为 ",(0,s.kt)("inlineCode",{parentName:"p"},"'a' | 'b' | 'c'")," 是否可以实现呢? 根据",(0,s.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types"}),"官网"),"描述:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Typically, distributivity is the desired behavior. To avoid that behavior, you can surround each side of the extends keyword with square brackets.")),(0,s.kt)("p",null,"如果不想遍历泛型中的每一个类型，可以用方括号将泛型给括起来以表示使用该泛型的整体部分。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type Demo<T, U> = [T] extends [U] ? never : T\n\n// result 此时类型为 'a' | 'b' | 'c'\ntype result = Demo<'a' | 'b' | 'c', 'a'>\n")),(0,s.kt)("h2",null,"在箭头函数中使用条件类型"),(0,s.kt)("p",null,"在箭头函数中使用三元表达式时，从左向右的阅读习惯导致函数内容区若不加括号则会让使用方感到困惑。比如下方代码中 x 是函数类型还是布尔类型呢？"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"// The intent is not clear.\nvar x = a => 1 ? true : false\n")),(0,s.kt)("p",null,"在 eslint 规则 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://eslint.org/docs/rules/no-confusing-arrow"}),"no-confusing-arrow")," 中，推荐如下写法："),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-js"}),"var x = a => (1 ? true : false)\n")),(0,s.kt)("p",null,"在 TypeScript 的类型定义中，若在箭头函数中使用 extends 也是同理，由于从左向右的阅读习惯，也会导致阅读者对类型代码的执行顺序感到困惑。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type Curry<P extends any[], R> =\n  (arg: Head<P>) => HasTail<P> extends true ? Curry<Tail<P>, R> : R\n")),(0,s.kt)("p",null,"因此在箭头函数中使用 extends 建议加上括号，对于进行 code review 有很大的帮助。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type Curry<P extends any[], R> =\n  (arg: Head<P>) => (HasTail<P> extends true ? Curry<Tail<P>, R> : R)\n")),(0,s.kt)("h2",null,"结合类型推导使用条件类型"),(0,s.kt)("p",null,"在 TypeScript 中，一般会结合 extends 来使用类型推导 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types"}),"infer")," 语法。使用它可以实现自动推导类型的目的。比如用其来实现工具类型 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype"}),(0,s.kt)("inlineCode",{parentName:"a"},"ReturnType<Type>")),"，该工具类型用于返回函数 Type 的返回类型。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type ReturnType<T extends Function> = T extends (...args: any) => infer U ? U : never\n\nMyReturnType<() => string>          // string\nMyReturnType<() => Promise<boolean> // Promise<boolean>\n")),(0,s.kt)("p",null,"结合 extends 与类型推导还可以实现与数组相关的 ",(0,s.kt)("inlineCode",{parentName:"p"},"Pop<T>"),"、",(0,s.kt)("inlineCode",{parentName:"p"},"Shift<T>"),"、",(0,s.kt)("inlineCode",{parentName:"p"},"Reverse<T>")," 工具类型。"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Pop<T>")),":"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type Pop<T extends any[]> = T extends [...infer ExceptLast, any] ? ExceptLast : never\n\ntype T = Pop<[3, 2, 1]> // T: [3, 2]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Shift<T>")),":"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type Shift<T extends any[]> = T extends [infer _, ...infer O] ? O : never\n\ntype T = Shift<[3, 2, 1]> // T: [2, 1]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Reverse<T>"))),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type Reverse<T> = T extends [infer F, ...infer Others]\n  ? [...Reverse<Others>, F]\n  : []\n\ntype T = Reverse<['a', 'b']> // T: ['b', 'a']\n")),(0,s.kt)("h2",null,"使用条件类型来判断两个类型完全相等"),(0,s.kt)("p",null,"我们也可以使用条件类型来判断 A、B 两个类型是否完全相等。当前社区上主要有两种方案:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"方案一"),": 参考 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://github.com/Microsoft/TypeScript/issues/27024#issuecomment-420227672"}),"issue"),"。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"export type Equal1<T, S> =\n  [T] extends [S] ? (\n    [S] extends [T] ? true : false\n  ) : false\n")),(0,s.kt)("p",null,"目前该方案的唯一缺点是会将 any 类型与其它任何类型判为相等。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type T = Equal1<{x:any}, {x:number}> // T: true\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"方案二"),": 参考 ",(0,s.kt)("a",i({parentName:"p"},{href:"https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650"}),"issue"),"。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"export type Equal2<X, Y> =\n  (<T>() => T extends X ? 1 : 2) extends\n  (<U>() => U extends Y ? 1 : 2) ? true : false\n")),(0,s.kt)("p",null,"目前该方案的唯一缺点是在对交叉类型的处理上有一点瑕疵。"),(0,s.kt)("pre",null,(0,s.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"type T = Equal2<{x:1} & {y:2}, {x:1, y:2}> // false\n")),(0,s.kt)("p",null,"以上两种判断类型相等的方法见仁见智，笔者在此抛砖引玉。"))}c.isMDXComponent=!0}}]);