(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2025],{32025:e=>{e.exports="### Reflect\n\n`Reflect` 是 `ES6` 新引人的特性, 其目的是把一些 `JavaScript` 特有的属性 `api` 抽离出来。其有如下优点:\n\n* 返回值更加合理\n\n```js\nvar obj = {}\n\n// 在 obj 中定义 a 属性\nObject.defineProperty(obj, 'a', {\n  value: 2\n})\n\n// 使用 Object.defineProperty 在 obj 中重复定义 a 属性就会抛错\ntry {\n  Object.defineProperty(obj, 'a', { value: 3 })\n} catch(e) {\n  console.log(e) // Uncaught TypeError: Cannot redefine property: a\n}\n\n// 使用 Reflect.defineProperty 在 obj 中重复定义 a 属性则是返回 false\nif (Reflect.defineProperty(obj, 'a', { value: 3 })) {\n  console.log('属性添加成功')\n}\n```\n\n* 将一些对象属性的操作判断统一为函数操作。\n\n比如 `props in Obj` 现在可写成 `Reflect.has(Obj, props)`, 又比如 `delete Obj[props]` 现在可写成 `Reflect.deleteProperty(Obj, props)`\n\n* 与 [Proxy Handler](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler#Methods) 方法参数同步"}}]);