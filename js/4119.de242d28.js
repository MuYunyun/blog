(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4119],{74119:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>h});var a=r(59713),l=r.n(a),o=r(6479),u=r.n(o),m=(r(67294),r(3905));function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function n(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){l()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var s={};function h(t){var e=t.components,r=u()(t,["components"]);return(0,m.kt)("wrapper",n(n(n({},s),r),{},{components:e,mdxType:"MDXLayout"}),(0,m.kt)("h3",null,"Algorithm"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/complexy.md"}),"Algorithm And Complexy"))),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/recursive.md"}),"Recursive")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/binary_search.md"}),"Binary Search"))),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/greedy.md"}),"Greedy Algorithm")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/dynamic_programming.md"}),"Dynamic Programming"))),(0,m.kt)("h3",null,"Sort Algorithm"),(0,m.kt)("ul",n({},{className:"contains-task-list"}),(0,m.kt)("li",n({parentName:"ul"},{className:"task-list-item"}),(0,m.kt)("input",n({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/sort/selection_sort.md"}),"Selection Sort")),(0,m.kt)("li",n({parentName:"ul"},{className:"task-list-item"}),(0,m.kt)("input",n({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/sort/quick_sort.md"}),"Quick Sort")),(0,m.kt)("li",n({parentName:"ul"},{className:"task-list-item"}),(0,m.kt)("input",n({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/sort/merge_sort.md"}),"Merge Sort")),(0,m.kt)("li",n({parentName:"ul"},{className:"task-list-item"}),(0,m.kt)("input",n({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/algorithm/sort/heap_sort.md"}),"Heap Sort"))),(0,m.kt)("p",null,"算法是一种思想! 以排序算法为例, 可能最常见的是在数组中使用排序算法, 但是相同的思想也能用于数组对象, 甚至链表中, 比如链表中实现排序的两道题。"),(0,m.kt)("ol",null,(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/BasicSkill/LeetCode/147.Insertion_Sort_List/README.md"}),"147.Insertion Sort List"),": 插入排序在链表中的实现;"),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/BasicSkill/LeetCode/148.Sort_List/README.md"}),"148.Sort List"),": 归并排序在链表中的实现;")),(0,m.kt)("h3",null,"Data Structure"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/data_structure/stack.md"}),"Stack")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/data_structure/queue.md"}),"Queue")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/data_structure/list.md"}),"List")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/data_structure/set.md"}),"Set")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/data_structure/.md"}),"Dictionary")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/data_structure/hash_table.md"}),"Hash Table")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/data_structure/binary_tree.md"}),"Binary Tree")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",n({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/Algorithm/data_structure/graph.md"}),"Graph"))))}h.isMDXComponent=!0}}]);