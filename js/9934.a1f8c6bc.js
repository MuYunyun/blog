(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9934],{39934:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),p=t.n(r),a=t(6479),o=t.n(a),l=(t(67294),t(3905));function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){p()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var y={};function c(e){var n=e.components,t=o()(e,["components"]);return(0,l.kt)("wrapper",u(u(u({},y),t),{},{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"本文档为 TypeScript 的",(0,l.kt)("a",u({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/2/types-from-types.html"}),"类型系统"),"阅读笔记。"),(0,l.kt)("h3",null,"Keyof"),(0,l.kt)("pre",null,(0,l.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type Arrayish = { [n: number]: unknown };\ntype A = keyof Arrayish; // number\n\ntype Mapish = { [k: string]: boolean };\ntype M = keyof Mapish; // string | number\n")),(0,l.kt)("p",null,"这里需要留意 M 的类型是 ",(0,l.kt)("inlineCode",{parentName:"p"},"string | number"),", 这是因为 JavaScript 对象中总是将 key 对待为一个 string 类型, 比如 obj","[0]"," 与 obj","['0']"," 是等价的。"),(0,l.kt)("h3",null,"Typeof"),(0,l.kt)("p",null,"需要注意「类型空间」与实际值的区别。"),(0,l.kt)("p",null,"以 ",(0,l.kt)("inlineCode",{parentName:"p"},"ReturnType<T>")," 为例:"),(0,l.kt)("pre",null,(0,l.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"function f() {\n  return { x: 10, y: 3 };\n}\ntype P = ReturnType<f>;\n")),(0,l.kt)("p",null,"直接操作值, 会报错 ",(0,l.kt)("inlineCode",{parentName:"p"},"'f' refers to a value, but is being used as a type here. Did you mean 'typeof f'?"),"。因此我们得使用 typeof 来将函数转化为类型空间。"),(0,l.kt)("pre",null,(0,l.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"function f() {\n  return { x: 10, y: 3 };\n}\ntype P = ReturnType<typeof f>;\n")),(0,l.kt)("h3",null,"Indexed Access"),(0,l.kt)("p",null,"可以结合使用 typeof 与 number 去获取数组元素的类型。"),(0,l.kt)("pre",null,(0,l.kt)("code",u({parentName:"pre"},{className:"language-ts"}),'const MyArray = [\n  { name: "Alice", age: 15 },\n  { name: "Bob", age: 23 },\n  { name: "Eve", age: 38 },\n]\n\n// type Person = {\n//   name: string;\n//   age: number;\n// }\ntype Person = typeof MyArray[number];\n')))}c.isMDXComponent=!0}}]);