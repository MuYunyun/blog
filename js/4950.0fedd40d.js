(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4950],{64950:n=>{n.exports='### 242. Valid Anagram\n\nGiven two strings s and t , write a function to determine if t is an anagram of s.\n\nExample 1:\n\n```js\nInput: s = "anagram", t = "nagaram"\nOutput: true\n```\n\nExample 2:\n\n```js\nInput: s = "rat", t = "car"\nOutput: false\n```\n\nNote:\nYou may assume the `string contains only lowercase alphabets`.\n\nFollow up:\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?\n\n### 题解\n\n思路:\n\n* 创建数据结构为 Map 的 map 对象;\n  * 遍历 s, 将各字母出现的次数叠加存储进 map 中;\n  * 遍历 t, 在 map 中减少相应字母出现的个数, 并增加 map 中未收录的字母;\n* 如果最后 map 的 size 不为 0, 则 s 与 t 不是字母异位词; 否则是字母异位词;\n\n```js\n/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n  const map = new Map()\n  for (let i = 0; i < s.length; i++) {\n    const getMap = map.get(s[i])\n    if (!getMap) {\n      map.set(s[i], 1)\n    } else {\n      map.set(s[i], getMap + 1)\n    }\n  }\n\n  for (let i = 0; i < t.length; i++) {\n    const getMap = map.get(t[i])\n    if (getMap === 1) {\n      map.delete(t[i])\n    } else if (getMap) {\n      map.set(t[i], getMap - 1)\n    } else {\n      map.set(t[i], 1)\n    }\n  }\n\n  if (map.size) {\n    return false\n  } else {\n    return true\n  }\n};\n```\n\n### 相关题目\n\n202、205、290、349、350、451\n'}}]);