(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6023],{16023:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n(59713),l=n.n(r),a=n(6479),s=n.n(a),i=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p={};function c(e){var t=e.components,n=s()(e,["components"]);return(0,i.kt)("wrapper",u(u(u({},p),n),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"题目: 反转字符串中的元音字母"),(0,i.kt)("p",null,"编写一个函数，以字符串作为输入，反转该字符串中的元音字母。"),(0,i.kt)("p",null,"示例 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),'输入: "hello"\n输出: "holle"\n')),(0,i.kt)("p",null,"示例 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),'输入: "leetcode"\n输出: "leotcede"\n')),(0,i.kt)("p",null,'说明:\n元音字母不包含字母"y"。'),(0,i.kt)("h3",null,"解题"),(0,i.kt)("p",null,"双指针法:"),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseVowels = function(s) {\n  let left = 0, right = s.length - 1\n  let result = s\n  while (left <= right) {\n    const isValidateLeft = isValidate(s[left])\n    const isValidateRight = isValidate(s[right])\n    if (isValidateLeft && isValidateRight) {\n      result = swap(result, left, right)\n      left++\n      right--\n    }\n    if (!isValidateLeft) {\n      left++\n    }\n    if (!isValidateRight) {\n      right--\n    }\n  }\n  return result\n}\n\nvar isValidate = (value) => {\n  return /a|e|i|o|u|A|E|I|O|U/.test(value)\n}\n\n/* 交换位置\n  a, b 为下标\n*/\nvar swap = function(str, a, b) {\n  const arr = str.split('')\n  const tmp = arr[a]\n  arr[a] = arr[b]\n  arr[b] = tmp\n  return arr.join('')\n}\n")),(0,i.kt)("h3",null,"Sister Title"),(0,i.kt)("p",null,"125、167、344"))}c.isMDXComponent=!0}}]);