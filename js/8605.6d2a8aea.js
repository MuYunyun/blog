(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8605],{58605:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n(59713),o=n.n(r),a=n(6479),l=n.n(a),p=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s={};function c(e){var t=e.components,n=l()(e,["components"]);return(0,p.kt)("wrapper",u(u(u({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"title"),(0,p.kt)("p",null,"Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward."),(0,p.kt)("p",null,"Example 1:"),(0,p.kt)("p",null,"Input: 121\nOutput: true\nExample 2:"),(0,p.kt)("p",null,"Input: -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\nExample 3:"),(0,p.kt)("p",null,"Input: 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome."),(0,p.kt)("h3",null,"Analyze"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function (x) {\n  const convert = x.toString().split('').reverse().join('')\n  if (x === Number(convert)) {\n    return true\n  } else {\n    return false\n  }\n};\n")))}c.isMDXComponent=!0}}]);