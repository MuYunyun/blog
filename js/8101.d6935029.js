(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8101],{88101:n=>{n.exports="### 347.Top K Frequent Elements\n\nGiven a non-empty array of integers, return the k most frequent elements.\n\n```js\nExample 1:\n\nInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n```\n\nExample 2:\n\n```js\nInput: nums = [1], k = 1\nOutput: [1]\n```\n\nNote:\n\n* You may assume k is always valid, 1 ≤ k ≤ number of unique elements.\n* Your algorithm's `time complexity must be better than O(n log n)`, where n is the array's size.\n* It's guaranteed that `the answer is unique`, in other words the set of the top k frequent elements is unique.\n* You can return the answer in any order.\n\n### Analyze\n\n思路一:\n\n1. 将各个元素出现的频率统计进哈希表中;\n2. 然后对出现频率进行排序;\n3. 取频率排前 k 的元素;\n\n这样的时间复杂度为 O(nlog n) 级别。\n\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n  const obj = {}\n  for (let i = 0; i < nums.length; i++) {\n    if (!obj[nums[i]]) {\n      obj[nums[i]] = 1\n    } else {\n      obj[nums[i]] = obj[nums[i]] + 1\n    }\n  }\n\n  const list = []\n\n  const keysArr = Object.keys(obj)\n  for (let i = 0; i < keysArr.length; i++) {\n    const key = keysArr[i]\n    const value = obj[key]\n    list.push({ key, value })\n  }\n\n  list.sort((r1, r2) => r2.value - r1.value)\n  const result = []\n  list.map((obj, index) => {\n    if (index < k) {\n      result.push(parseInt(obj.key, 10))\n    }\n  })\n  return result\n}\n```\n\n该题解虽然可以 ac, 但是由于题目给出了时间复杂度需小于 `(n log n)` 这一限制, 因而我们思考其它方式🤔。\n\n思路二: 桶排序分组的思想\n\n1. 首先将各个元素出现的频率统计进哈希表中;\n2. 将频率减去 1 后的值作为数组 list 的下标存入;\n3. 从 list 中遍历取出频率最高的 k 个元素;\n\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n  const obj = {}\n  for (let i = 0; i < nums.length; i++) {\n    if (!obj[nums[i]]) {\n      obj[nums[i]] = 1\n    } else {\n      obj[nums[i]] = obj[nums[i]] + 1\n    }\n  }\n\n  const list = []\n\n  const keysArr = Object.keys(obj)\n  for (let i = 0; i < keysArr.length; i++) {\n    const key = keysArr[i]\n    const value = obj[key]\n    if (!list[value - 1]) {\n      list[value - 1] = [parseInt(key, 10)]\n    } else {\n      list[value - 1].push(parseInt(key, 10))\n    }\n  }\n\n  const result = []\n  let count = 0\n  for (let i = list.length - 1; i >= 0; i--) {\n    const curList = list[i]\n    if (curList) {\n      for (let x = 0; x < curList.length; x++) {\n        if (count === k) return result\n        result.push(curList[x])\n        count++\n      }\n    }\n  }\n  return result\n}\n```\n\n![](http://with.muyunyun.cn/926ca1b564c07610790ab1e0e4cafa6f.jpg)"}}]);