(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9427],{59427:n=>{n.exports="### 计算公式\n\n```js\nconst MAX_SIGNED_31_BIT_INT = Math.pow(2, 30) - 1\n\nexport const NoWork = 0;\nexport const Never = 1;\n\nconst UNIT_SIZE = 10;\nconst MAGIC_NUMBER_OFFSET = MAX_SIGNED_31_BIT_INT - 1;\n\n// 1 unit of expiration time represents 10ms.\nexport function msToExpirationTime(ms) {\n  // Always add an offset so that we don't clash with the magic number for NoWork.\n  return MAGIC_NUMBER_OFFSET - ((ms / UNIT_SIZE) | 0);\n}\n\nexport function expirationTimeToMs(expirationTime) {\n  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;\n}\n\nfunction ceiling(num, precision) {\n  return (((num / precision) | 0) + 1) * precision;\n}\n\nfunction computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {\n  return (\n    MAGIC_NUMBER_OFFSET -\n    ceiling(\n      MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE,\n      bucketSizeMs / UNIT_SIZE,\n    )\n  );\n}\n\nexport const LOW_PRIORITY_EXPIRATION = 5000;\nexport const LOW_PRIORITY_BATCH_SIZE = 250;\n\nexport function computeAsyncExpiration(currentTime) {\n  return computeExpirationBucket(\n    currentTime,\n    LOW_PRIORITY_EXPIRATION,\n    LOW_PRIORITY_BATCH_SIZE,\n  );\n}\n\nexport const HIGH_PRIORITY_EXPIRATION = __DEV__ ? 500 : 150;\nexport const HIGH_PRIORITY_BATCH_SIZE = 100;\n\nexport function computeInteractiveExpiration(currentTime) {\n  return computeExpirationBucket(\n    currentTime,\n    HIGH_PRIORITY_EXPIRATION,\n    HIGH_PRIORITY_BATCH_SIZE,\n  );\n}\n```\n\n`computeAsyncExpiration` 函数化简后得到如下公式, 针对这个公式目前的心得如下:\n\n1. 抹平传入的 `bucketSizeMs` 精度误差, 为 batch 作准备;\n2. `currentTime` 越大, 相应的 `expirationTime` 的结果如下图所示;\n\n![](http://with.muyunyun.cn/16a5237163f1e4f2967711442ec03a4c.jpg-200)\n\n```js\nconst MAX_SIGNED_31_BIT_INT = Math.pow(2, 30) - 1\nconst MAGIC_NUMBER_OFFSET = MAX_SIGNED_31_BIT_INT - 1;\n\nfunction ceiling(num, precision) {\n  return (((num / precision) | 0) + 1) * precision;\n}\n\nfunction computeExpirationBucket(currentTime) {\n  return (\n    MAGIC_NUMBER_OFFSET -\n    ceiling(\n      MAGIC_NUMBER_OFFSET - currentTime + 500,\n      25,\n    )\n  );\n}\n```\n\n`ceiling` 函数的作用: 根据 `precision` 的精度取值\n\n```js\nceiling(25, 25) // 50\nceiling(26, 25) // 50\nceiling(27, 25) // 50\n...\nceiling(49, 25) // 50\nceiling(50, 25) // 75\nceiling(51, 25) // 75\n```\n"}}]);