(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3835],{63835:(n,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>I});var r=e(59713),l=e.n(r),p=e(6479),c=e.n(p),i=(e(67294),e(3905));function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function u(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){l()(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}var s={};function I(n){var t=n.components,e=c()(n,["components"]);return(0,i.kt)("wrapper",u(u(u({},s),e),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"title"),(0,i.kt)("p",null,"罗马数字包含以下七种字符: I,  V,  X,  L, C, D 和 M。"),(0,i.kt)("p",null,"字符          数值\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n例如,  罗马数字 2 写做 II , 即为两个并列的 1。12 写做 XII , 即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。"),(0,i.kt)("p",null,"通常情况下, 罗马数字中小的数字在大的数字的右边。但也存在特例, 例如 4 不写做 IIII, 而是 IV。数字 1 在数字 5 的左边, 所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地, 数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况:"),(0,i.kt)("p",null,"I 可以放在 V (5) 和 X (10) 的左边, 来表示 4 和 9。\nX 可以放在 L (50) 和 C (100) 的左边, 来表示 40 和 90。\nC 可以放在 D (500) 和 M (1000) 的左边, 来表示 400 和 900。\n给定一个罗马数字, 将其转换成整数。输入确保在 1 到 3999 的范围内。"),(0,i.kt)("p",null,"示例 1:"),(0,i.kt)("p",null,'输入: "III"\n输出: 3\n示例 2:'),(0,i.kt)("p",null,'输入: "IV"\n输出: 4\n示例 3:'),(0,i.kt)("p",null,'输入: "IX"\n输出: 9\n示例 4:'),(0,i.kt)("p",null,'输入: "LVIII"\n输出: 58\n解释: C = 100, L = 50, XXX = 30, III = 3.\n示例 5:'),(0,i.kt)("p",null,'输入: "MCMXCIV"\n输出: 1994\n解释: M = 1000, CM = 900, XC = 90, IV = 4.'),(0,i.kt)("h3",null,"analyze"),(0,i.kt)("p",null,"正常 AC, 遍历字符串, 思路略"),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function (s) {\n  const RomanArr = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n  const intArr = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  const length = s.length\n  let pick, result = 0\n  for (let i = 0; i < length; i++) {\n    pick = s.slice(i, i + 1)\n    if (pick === 'C' || pick === 'X' || pick === 'I') {\n      pick = s.slice(i, i + 2)\n      if (pick === 'CM' || pick === 'CD' || pick === 'XC' || pick === 'XL' || pick === 'IX' || pick === 'IV') {\n        i++\n      } else {\n        pick = s.slice(i, i + 1)\n      }\n    }\n    result += intArr[RomanArr.indexOf(pick)]\n  }\n  return result\n};\n")))}I.isMDXComponent=!0}}]);