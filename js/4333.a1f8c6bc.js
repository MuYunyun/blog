(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4333],{54333:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>s});var r=t(59713),p=t.n(r),l=t(6479),o=t.n(l),u=(t(67294),t(3905));function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){p()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var k={};function s(e){var n=e.components,t=o()(e,["components"]);return(0,u.kt)("wrapper",c(c(c({},k),t),{},{components:n,mdxType:"MDXLayout"}),(0,u.kt)("h3",null,"title"),(0,u.kt)("p",null,"实现 pow(x, n) , 即计算 x 的 n 次幂函数。"),(0,u.kt)("p",null,"示例 1:"),(0,u.kt)("pre",null,(0,u.kt)("code",c({parentName:"pre"},{}),"输入: 2.00000, 10\n输出: 1024.00000\n")),(0,u.kt)("p",null,"示例 2:"),(0,u.kt)("pre",null,(0,u.kt)("code",c({parentName:"pre"},{}),"输入: 2.10000, 3\n输出: 9.26100\n")),(0,u.kt)("p",null,"示例 3:"),(0,u.kt)("pre",null,(0,u.kt)("code",c({parentName:"pre"},{}),"输入: 2.00000, -2\n输出: 0.25000\n解释: 2-2 = 1/22 = 1/4 = 0.25\n")),(0,u.kt)("p",null,"说明:"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"-100.0 < x < 100.0"),(0,u.kt)("li",{parentName:"ul"},"n 是 32 位有符号整数, 其数值范围是 ","[−231, 231 − 1]")),(0,u.kt)("h3",null,"analyze"),(0,u.kt)("pre",null,(0,u.kt)("code",c({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function (x, n) {\n  return Math.pow(x, n)\n}\n")))}s.isMDXComponent=!0}}]);