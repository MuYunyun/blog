(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9111],{23856:n=>{n.exports="### 94.Binary Tree Inorder Traversal\n\nGiven a binary tree, return the inorder traversal of its nodes' values.\n\nExample:\n\n```js\nInput: [1,null,2,3]\n    1\n  /   \\\nnull   2\n      /\n    3\n\nOutput: [1,3,2]\n```\n\nFollow up: Recursive solution is trivial, could you do it iteratively?\n\n### 递归法\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n  if (root) {\n    return [...inorderTraversal(root.left), root.val, ...inorderTraversal(root.right)]\n  } else {\n    return []\n  }\n}\n```\n\n### 颜色标记法(迭代法, 模拟系统栈)\n\n使用`颜色标记法`剖析树在中序遍历下的递归操作, 思路如下:\n\n1. 将访问过的元素标记为灰色, 未访问过的元素标记为白色;\n2. 从栈顶取出访问元素:\n   1. 若为灰色元素, 则打印之;\n   2. 若为白色元素, 按照`右 -> 中 -> 左`的顺序推入栈, 同时将白色元素标记为灰色元素;\n\n```js\n     4\n    / \\\n   2   5\n  / \\\n 1   3\n```\n\n在如上所示树中, 模拟系统栈图解其执行过程如下:\n\n```js\nwhite 2\ngray  4\nwhite 5\n\nwhite 1\ngray  2\nwhite 3\ngray  4\nwhite 5\n\ngray  1\ngray  2\nwhite 3\ngray  4\nwhite 5\n\nwhite 3\ngray  4\nwhite 5\n```\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const stack = []\n  stack.push({\n    color: 'white',\n    node: root\n  })\n\n  while (stack.length > 0) {\n    const pickValue = stack.pop()\n    const { color, node } = pickValue\n    if (color === 'gray') {\n      printArr.push(node.val)\n    } else {\n      node.right && stack.push({ color: 'white', node: node.right })\n      stack.push({ color: 'gray', node })\n      node.left && stack.push({ color: 'white', node: node.left })\n    }\n  }\n\n  return printArr\n}\n```\n\n### Sister Title\n\n144、94、145"}}]);