(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2076],{82076:n=>{n.exports='### title\n\n将字符串 "PAYPALISHIRING" 以 Z 字形排列成给定的行数:\n\n```\nP   A   H   N\nA P L S I I G\nY   I   R\n```\n\n之后从左往右, 逐行读取字符: "PAHNAPLSIIGYIR"\n\n实现一个将字符串进行指定行数变换的函数:\n\nstring convert(string s, int numRows);\n\n示例 1:\n\n```\n输入: s = "PAYPALISHIRING", numRows = 3\n输出: "PAHNAPLSIIGYIR"\n```\n\n示例 2:\n\n```\n输入: s = "PAYPALISHIRING", numRows = 4\n输出: "PINALSIGYAHRPI"\n解释:\n\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n```\n\n### analyze\n\n很受伤, 暴力解题后超出内存限制, 日后再看。\n\n```js\n/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function (s, numRows) {\n  const perGroupNum = numRows + numRows - 2 // 每组个数\n  const GroupNum = Math.ceil(s.length / perGroupNum) // 有几组\n\n  const arr = []\n  for (let i = 0; i < GroupNum; i++) {\n    let linkStr = \'\'\n    let position = i * perGroupNum\n    linkStr += s.slice(0 + position, numRows + position)\n    linkStr += s.slice(numRows + position, numRows + position + perGroupNum - numRows).split(\'\').reverse().join(\'\')\n    arr.push(linkStr)\n  }\n\n  let str = \'\'\n\n  let num = 0 // 第几行\n  while (num < numRows) {\n    for (let i = 0; i < GroupNum; i++) {\n      arr[i][num] ? str += arr[i][num] : \'\'\n      if (num > 0 && num < numRows - 1 && arr[i][num + numRows - 1]) {\n        str += arr[i][num + numRows - 1]\n      }\n    }\n    num++\n  }\n\n  return str\n};\n```'}}]);