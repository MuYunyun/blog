(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9523],{59523:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t(59713),l=t.n(r),a=t(6479),u=t.n(a),c=(t(67294),t(3905));function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var s={};function i(e){var n=e.components,t=u()(e,["components"]);return(0,c.kt)("wrapper",p(p(p({},s),t),{},{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h3",null,"Title"),(0,c.kt)("p",null,"Given a sorted linked list, delete all duplicates such that each element appear only once."),(0,c.kt)("p",null,"Example 1:"),(0,c.kt)("pre",null,(0,c.kt)("code",p({parentName:"pre"},{className:"language-js"}),"Input: 1->1->2\nOutput: 1->2\n")),(0,c.kt)("p",null,"Example 2:"),(0,c.kt)("pre",null,(0,c.kt)("code",p({parentName:"pre"},{className:"language-js"}),"Input: 1->1->2->3->3\nOutput: 1->2->3\n")),(0,c.kt)("h3",null,"Analyze"),(0,c.kt)("p",null,"该题思路比较直接, 使用 cur, next 两个指针表示当前值和下一值, 若 cur 指针的值与 next 指针的值相等, 则将 next 指针往后移动一位即可。"),(0,c.kt)("pre",null,(0,c.kt)("code",p({parentName:"pre"},{className:"language-js"}),"cur   next\n 1  ->  1  ->  2  ->  3  ->  3\n\ncur          next\n 1  ->  1  ->  2  ->  3  ->  3\n")),(0,c.kt)("pre",null,(0,c.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n  const listNode = new ListNode(0)\n  listNode.next = head\n  let cur = listNode.next\n  while (cur) {\n    let next = cur.next\n    while (next && next.val === cur.val) {\n      next = next.next\n    }\n    cur.next = next\n    cur = cur.next\n  }\n  return listNode.next\n}\n")),(0,c.kt)("h3",null,"Same Type Question"),(0,c.kt)("p",null,"2、86、328、445"))}i.isMDXComponent=!0}}]);