(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4644],{64644:n=>{n.exports="### 中介者模式\n\n中介者模式: 对象和对象之间借助第三方中介者进行通信。\n\n![](http://with.muyunyun.cn/ae0958f85990978c48b3a6aa2ca76ea1.jpg-400)\n\n### 场景 demo\n\n一场测试结束后, 公布结果: 告知解答出题目的人挑战成功, 否则挑战失败。\n\n```js\nconst player = function(name) {\n  this.name = name\n  playerMiddle.add(name)\n}\n\nplayer.prototype.win = function() {\n  playerMiddle.win(this.name)\n}\n\nplayer.prototype.lose = function() {\n  playerMiddle.lose(this.name)\n}\n\nconst playerMiddle = (function() { // 将就用下这个 demo, 这个函数当成中介者\n  const players = []\n  const winArr = []\n  const loseArr = []\n  return {\n    add: function(name) {\n      players.push(name)\n    },\n    win: function(name) {\n      winArr.push(name)\n      if (winArr.length + loseArr.length === players.length) {\n        this.show()\n      }\n    },\n    lose: function(name) {\n      loseArr.push(name)\n      if (winArr.length + loseArr.length === players.length) {\n        this.show()\n      }\n    },\n    show: function() {\n      for (let winner of winArr) {\n        console.log(winner + '挑战成功;')\n      }\n      for (let loser of loseArr) {\n        console.log(loser + '挑战失败;')\n      }\n    },\n  }\n}())\n\nconst a = new player('A 选手')\nconst b = new player('B 选手')\nconst c = new player('C 选手')\n\na.win()\nb.win()\nc.lose()\n\n// A 选手挑战成功;\n// B 选手挑战成功;\n// C 选手挑战失败;\n```\n\n在这段代码中 A、B、C 之间没有直接发生关系, 而是通过另外的 playerMiddle 对象建立链接, 姑且将之当成是中介者模式了。"}}]);