(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1397],{11397:(t,e,a)=>{"use strict";a.r(e),a.d(e,{default:()=>N});var n=a(59713),r=a.n(n),l=a(6479),p=a.n(l),k=(a(67294),a(3905));function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function m(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r()(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}var d={};function N(t){var e=t.components,a=p()(t,["components"]);return(0,k.kt)("wrapper",m(m(m({},d),a),{},{components:e,mdxType:"MDXLayout"}),(0,k.kt)("h3",null,"数量限定符"),(0,k.kt)("table",null,(0,k.kt)("thead",{parentName:"table"},(0,k.kt)("tr",{parentName:"thead"},(0,k.kt)("th",m({parentName:"tr"},{align:"left"}),"数量限定符"),(0,k.kt)("th",m({parentName:"tr"},{align:"left"}),"解释"))),(0,k.kt)("tbody",{parentName:"table"},(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"x+")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"1 或多个")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"x*")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"0 或多个")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"x?")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"0 或 1 个")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"x{n}")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"n 个")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"x{n,}")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"至少 n 个")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"x{n, m}")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"n 至 m 个, 遵循贪婪原则, 会尽可能匹配多个; 如果在后面加个 ? (如 x{n, m}?), 遵循非贪婪原则")))),(0,k.kt)("blockquote",null,(0,k.kt)("p",{parentName:"blockquote"},"贪婪可以理解成从后往前遍历, 非贪婪可以理解为从前向后遍历")),(0,k.kt)("h3",null,"字符限定符"),(0,k.kt)("table",null,(0,k.kt)("thead",{parentName:"table"},(0,k.kt)("tr",{parentName:"thead"},(0,k.kt)("th",m({parentName:"tr"},{align:"left"}),"字符限定符"),(0,k.kt)("th",m({parentName:"tr"},{align:"left"}),"解释"))),(0,k.kt)("tbody",{parentName:"table"},(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"\\d")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"匹配一个数字字符, ","[0-9]")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"\\D")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"匹配一个非数字字符, ",(0,k.kt)("sup",m({parentName:"td"},{id:"fnref-0-9"}),(0,k.kt)("a",m({parentName:"sup"},{href:"#fn-0-9",className:"footnote-ref"}),"0-9")))),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"\\w")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"匹配单词字符(包括数字下划线在内), ","[0-9A-Za-z_]")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"\\W")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"匹配非单词字符(包括数字下划线在内), ",(0,k.kt)("sup",m({parentName:"td"},{id:"fnref-0-9a-za-z_"}),(0,k.kt)("a",m({parentName:"sup"},{href:"#fn-0-9a-za-z_",className:"footnote-ref"}),"0-9A-Za-z_")))),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"\\s")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"匹配空白字符(空格、回车、制表符)")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"\\S")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"匹配非空白字符   ◊")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},".")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"匹配",(0,k.kt)("inlineCode",{parentName:"td"},"除换行符(\\n)以外"),"的任何单个字符")))),(0,k.kt)("p",null,"根据使用方法可以进行如下分类:"),(0,k.kt)("table",null,(0,k.kt)("thead",{parentName:"table"},(0,k.kt)("tr",{parentName:"thead"},(0,k.kt)("th",m({parentName:"tr"},{align:"left"}),"使用"),(0,k.kt)("th",m({parentName:"tr"},{align:"left"}),"解释"))),(0,k.kt)("tbody",{parentName:"table"},(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"[0-9a-zA-Z]")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"范围字符")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"[abcd]")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"任意字符")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"[^a-z]")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"范围字符")))),(0,k.kt)("h3",null,"定位符"),(0,k.kt)("table",null,(0,k.kt)("thead",{parentName:"table"},(0,k.kt)("tr",{parentName:"thead"},(0,k.kt)("th",m({parentName:"tr"},{align:"left"}),"定位符"),(0,k.kt)("th",m({parentName:"tr"},{align:"left"}),"解释"))),(0,k.kt)("tbody",{parentName:"table"},(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"^")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"开头标识")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"$")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"结尾标识")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"\\b")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"单词边界")),(0,k.kt)("tr",{parentName:"tbody"},(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),(0,k.kt)("inlineCode",{parentName:"td"},"\\B")),(0,k.kt)("td",m({parentName:"tr"},{align:"left"}),"非单词边界")))),(0,k.kt)("h3",null,"转义符"),(0,k.kt)("p",null,(0,k.kt)("inlineCode",{parentName:"p"},"\\"),": 用于匹配某些特殊字符"),(0,k.kt)("blockquote",null,(0,k.kt)("p",{parentName:"blockquote"},"/^(\\d)\\1+$/.test(333), 比如这里的 \\1 表示第一个括号里的值, 达到判断重复数字的效果")),(0,k.kt)("h3",null,"选择匹配符"),(0,k.kt)("p",null,(0,k.kt)("inlineCode",{parentName:"p"},"|"),": 可以匹配多个规则"),(0,k.kt)("h3",null,"特殊用法"),(0,k.kt)("p",null,"|   特殊用法    |              解释              |\n| :----------- | :----------------------◊------ |\n| ",(0,k.kt)("inlineCode",{parentName:"p"},"?=")," 正向预查 |   匹配以指定内容结束的字符串   |\n| ",(0,k.kt)("inlineCode",{parentName:"p"},"?!")," 负向预查 | 匹配不是以指定内容结束的字符串 |\n|      ",(0,k.kt)("inlineCode",{parentName:"p"},"?"),"      | 不把选择匹配符的内容放到缓冲区 |"),(0,k.kt)("h3",null,"正则表达式在 JavaScript 下的使用方法"),(0,k.kt)("p",null,"在 JavaScript 下使用正则表达式, 有两种方法:"),(0,k.kt)("p",null,"第一种方法: 使用 ",(0,k.kt)("inlineCode",{parentName:"p"},"RegExp")," 类"),(0,k.kt)("p",null,"提供的方法有: (正则表达式在前面)"),(0,k.kt)("ul",null,(0,k.kt)("li",{parentName:"ul"},(0,k.kt)("inlineCode",{parentName:"li"},"test(str)"),": 在字符串匹配是否有匹配模式的字符串, 返回 ",(0,k.kt)("inlineCode",{parentName:"li"},"true/false")),(0,k.kt)("li",{parentName:"ul"},(0,k.kt)("inlineCode",{parentName:"li"},"exec"),": 如果正则表达式中有子表达式, 使用 ",(0,k.kt)("inlineCode",{parentName:"li"},"exec")," 方法, 返回 ",(0,k.kt)("inlineCode",{parentName:"li"},"result[0] = 匹配结果, result[1] = 子表达式 1 的匹配结果 ……"))),(0,k.kt)("p",null,"第二种方法是: 使用 ",(0,k.kt)("inlineCode",{parentName:"p"},"String")," 类"),(0,k.kt)("p",null,"提供的方法有: (正则表达式在后面)"),(0,k.kt)("ul",null,(0,k.kt)("li",{parentName:"ul"},(0,k.kt)("inlineCode",{parentName:"li"},"search")," 返回匹配模式的字符串出现的位置, 如果没有, 返回 -1;"),(0,k.kt)("li",{parentName:"ul"},(0,k.kt)("inlineCode",{parentName:"li"},"match")," 返回匹配模式匹配到的字符串, 如果有, 返回数组, 无, 返回 null;"),(0,k.kt)("li",{parentName:"ul"},(0,k.kt)("inlineCode",{parentName:"li"},"replace")," 将匹配模式匹配到的字符串进行替换;"),(0,k.kt)("li",{parentName:"ul"},(0,k.kt)("inlineCode",{parentName:"li"},"split")," 将字符串已匹配模式为分隔符进行字符串分隔, 返回数组;")),(0,k.kt)("h3",null,"分析"),(0,k.kt)("pre",null,(0,k.kt)("code",m({parentName:"pre"},{className:"language-js"}),"('&ab=').match(/([^&]+)=/g) // [\"ab=\"]\n")),(0,k.kt)("p",null,"分析: ^ 一般表示开头, 但是注意此处中括号里的 ",(0,k.kt)("inlineCode",{parentName:"p"},"^")," 表示非"),(0,k.kt)("h3",null,"i、g、m"),(0,k.kt)("ul",null,(0,k.kt)("li",{parentName:"ul"},"/i: 忽略大小写"),(0,k.kt)("li",{parentName:"ul"},"/g: 全局"),(0,k.kt)("li",{parentName:"ul"},"/m: 多行查找")),(0,k.kt)("h3",null,"update"),(0,k.kt)("p",null,(0,k.kt)("a",m({parentName:"p"},{href:"https://github.com/tc39/proposal-regexp-lookbehind"}),"?<="),": now support match from right to left."))}N.isMDXComponent=!0}}]);