(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8195],{54702:n=>{n.exports="### 策略模式\n\n`定义`: 根据不同参数可以命中不同的策略\n\n### JavaScript 中的策略模式\n\n观察如下获取年终奖的 demo, 根据不同的参数（level）获得不同策略方法(规则), 这是策略模式在 JS 比较经典的运用之一。\n\n```js\nconst strategy = {\n  'S': function(salary) {\n    return salary * 4\n  },\n  'A': function(salary) {\n    return salary * 3\n  },\n  'B': function(salary) {\n    return salary * 2\n  }\n}\n\nconst calculateBonus = function(level, salary) {\n  return strategy[level](salary)\n}\n\ncalculateBonus('A', 10000) // 30000\n```\n\n在函数是一等公民的 JS 中, 策略模式的使用常常隐藏在高阶函数中, 稍微变换下上述 demo 的形式如下, 可以发现我们平时已经在使用它了, 恭喜我们又掌握了一种设计模式。\n\n```js\nconst S = function(salary) {\n  return salary * 4\n}\n\nconst A = function(salary) {\n  return salary * 3\n}\n\nconst B = function(salary) {\n  return salary * 2\n}\n\nconst calculateBonus = function(func, salary) {\n  return func(salary)\n}\n\ncalculateBonus(A, 10000) // 30000\n```\n\n### 优点\n\n* 能减少大量的 if 语句\n* 复用性好"}}]);