(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9266],{9266:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var a=n(59713),r=n.n(a),s=n(6479),o=n.n(s),c=(n(67294),n(3905));function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var l={};function i(e){var t=e.components,n=o()(e,["components"]);return(0,c.kt)("wrapper",u(u(u({},l),n),{},{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h3",null,"setState 回调替代方案"),(0,c.kt)("p",null,"在脚手架中发现 setState 禁用了回调的使用。因为目前发现使用 setState 第二个参数的场景是想用 setState 更新状态后的值。"),(0,c.kt)("pre",null,(0,c.kt)("code",u({parentName:"pre"},{className:"language-js"}),'class App extenes React.Component {\n  countName = () => {\n    if (this.state.name === "xxx") {\n      this.setState({\n        count: this.state.count + 1\n      })\n    }\n  }\n\n  handle = name => {\n    this.setState(\n      {\n        name\n      },\n      this.countName\n    )\n  }\n}\n')),(0,c.kt)("p",null,"回调的方式会造成多余一次渲染, 可改为",(0,c.kt)("inlineCode",{parentName:"p"},"传参"),"的方式代替回调的方式。"),(0,c.kt)("pre",null,(0,c.kt)("code",u({parentName:"pre"},{className:"language-js"}),'class App extenes React.Component {\n  countName = (name) => {\n    if (name === "xxx") {\n      this.setState({ // 2\n        count: this.state.count + 1\n      })\n    }\n  }\n\n  handle = name => {\n    this.countName(name)\n    this.setState({\n      name\n    })\n  }\n}\n')))}i.isMDXComponent=!0}}]);