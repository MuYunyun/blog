(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3754],{73754:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>k});var r=t(59713),a=t.n(r),l=t(6479),o=t.n(l),c=(t(67294),t(3905));function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){a()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var u={};function k(e){var n=e.components,t=o()(e,["components"]);return(0,c.kt)("wrapper",s(s(s({},u),t),{},{components:n,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"...")," 是 ES6 新出来的符号, 称为扩展运算符。它在不同情况下有不同的作用, 下文我们将对之进行梳理。"),(0,c.kt)("h3",null,"对象中的扩展运算符"),(0,c.kt)("ol",null,(0,c.kt)("li",{parentName:"ol"},(0,c.kt)("inlineCode",{parentName:"li"},"...")," 当作对象扩展符使用时可以用来",(0,c.kt)("em",{parentName:"li"},"浅拷贝"),"目标对象的",(0,c.kt)("em",{parentName:"li"},"自有属性中的可枚举属性"),"。")),(0,c.kt)("blockquote",null,(0,c.kt)("p",{parentName:"blockquote"},"对象中的扩展运算符的作用等同于 Object.assign()。")),(0,c.kt)("p",null,"下面举例证明上述结论:"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"验证对象扩展符只能 ",(0,c.kt)("inlineCode",{parentName:"li"},"copy")," 自有属性, 原型链上的属性不能 ",(0,c.kt)("inlineCode",{parentName:"li"},"copy"))),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"class Demo {\n  constructor() {\n    this.name = 'Lily'\n  }\n\n  testFn() {}\n}\n\nconst test = new Demo()\nconst cpObj = { ...test }\n\ncpObj.name === 'Lily' // true\ncpObj.testFn()        // Uncaught TypeError: cpTest.testFn is not a function\n")),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"验证只能 copy 可枚举属性")),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"const obj = Object.defineProperty({ a: 1 }, 'b', {\n  enumerable: false,\n  value: 2\n})\n\nconst cpObj = { ...obj }\nobj.a   // 1\nobj.b   // 2\n\ncpObj.a // 1\ncpObj.b // undefined\n")),(0,c.kt)("ol",s({},{start:2}),(0,c.kt)("li",{parentName:"ol"},"解构赋值")),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"const obj = { a: 1, b: 2, c: 3 }\nconst { a, ...x } = obj\nconst { a: data } = obj // 重命名\n\na // 1\nx // { b: 2, c: 3 }\n\ndata // 1\n")),(0,c.kt)("h3",null,"数组中的扩展运算符"),(0,c.kt)("ol",null,(0,c.kt)("li",{parentName:"ol"},"浅拷贝")),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"const arr = [1, 2, 3]\nconst cpArr = [...arr]\n\ncpArr // [1, 2, 3]\n")),(0,c.kt)("blockquote",null,(0,c.kt)("p",{parentName:"blockquote"},"下面这种写法也是浅拷贝的变种:")),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"const arr = [1, 2, 3]\nconst cpArr = []\n\ncpArr.push(...arr)\ncpArr // [1, 2, 3]\n")),(0,c.kt)("p",null,"因为这个特性, 我们还可以合并数组, 如下所示:"),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"const arr1 = [1, 2, 3]\nconst arr2 = [4, 5, 6]\n\nconst mergeArr = [...arr1, ...arr2]\n\nmergeArr // [1, 2, 3, 4, 5, 6]\n")),(0,c.kt)("ol",s({},{start:2}),(0,c.kt)("li",{parentName:"ol"},"解构赋值")),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"[a, ...b] = [1, 2, 3]\n\na // 1\nb // [2, 3]\n")),(0,c.kt)("blockquote",null,(0,c.kt)("p",{parentName:"blockquote"},"扩展运算符用来做解构赋值时, 只能放在最后一位")),(0,c.kt)("ol",s({},{start:3}),(0,c.kt)("li",{parentName:"ol"},"传参中使用, 将所传的参数变为数组")),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"function Demo(...args) {\n  console.log(args)\n}\n\nDemo(1, 2, 3) // [1, 2, 3]\n")),(0,c.kt)("h3",null,"相关链接"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",s({parentName:"li"},{href:"https://www.zcfy.cc/article/an-easy-guide-to-object-rest-spread-properties-in-javascript"}),"对象扩展符简易指南"))))}k.isMDXComponent=!0}}]);