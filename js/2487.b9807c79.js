(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2487],{12487:n=>{n.exports='### 90.Decode Ways\n\nA message containing letters from A-Z can be encoded into numbers using the following mapping:\n\n```js\n\'A\' -> "1"\n\'B\' -> "2"\n...\n\'Z\' -> "26"\n```\n\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:\n\n* "AAJF" with the grouping (1 1 10 6)\n* "KJF" with the grouping (11 10 6)\n\nNote that the grouping (1 11 06) is invalid because `"06" cannot be mapped into \'F\' since "6" is different from "06"`.\n\nGiven a string s containing only digits, return the number of ways to decode it.\n\nThe answer is guaranteed to fit in a 32-bit integer.\n\nExample 1:\n\n```js\nInput: s = "12"\nOutput: 2\nExplanation: "12" could be decoded as "AB" (1 2) or "L" (12).\n```\n\nExample 2:\n\n```js\nInput: s = "226"\nOutput: 3\nExplanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).\n```\n\nExample 3:\n\n```js\nInput: s = "0"\nOutput: 0\nExplanation: There is no character that is mapped to a number starting with 0.\nThe only valid mappings with 0 are \'J\' -> "10" and \'T\' -> "20", neither of which start with 0.\nHence, there are no valid ways to decode this since all digits need to be mapped.\n```\n\nExample 4:\n\n```js\nInput: s = "06"\nOutput: 0\nExplanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").\n```\n\nConstraints:\n\n* 1 <= s.length <= 100\n* s contains only digits and may contain leading zero(s).\n\n### Analyze\n\n该题拆分子问题较为不易, 题目思路可以转化为:\n\n* 下标为 start 的拆解之和等于\n  * 下标为 start + 1 的拆解之和\n  * 下标为 start + 2 的拆解之和(前提: [start, start + 2) 值合理)\n\n解法一: 记忆化递归\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n  const cache = {}\n  return judge(s, 0, cache)\n}\n\nvar judge = function(s, start, cache) {\n  const length = s.length\n  if (s[start] === \'0\') return 0\n  if (start === s.length) {\n    return 1\n  }\n  if (cache[start]) return cache[start]\n\n  let res = judge(s, start + 1, cache)\n  if (isValidValue(s.slice(start, start + 2))) {\n    res += judge(s, start + 2, cache)\n  }\n  return cache[start] = res\n}\n\nvar isValidValue = function(value) {\n  if (!value || value.length < 2) return false\n  const valueToNum = Number(value)\n  return valueToNum <= 26\n}\n```\n\n解法二: 动态规划\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n\n}\n```'}}]);