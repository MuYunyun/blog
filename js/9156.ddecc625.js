(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9156],{19156:n=>{n.exports="### title\n\n给定一个 n × n 的二维矩阵表示一个图像。\n\n将图像顺时针旋转 90 度。\n\n说明:\n\n你必须在原地旋转图像, 这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。\n\n示例 1:\n\n```\n给定 matrix =\n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n原地旋转输入矩阵, 使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n```\n\n示例 2:\n\n```\n给定 matrix =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n],\n\n原地旋转输入矩阵, 使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n```\n\n### analyze\n\n这类题目可以采用如下思路:\n\n1.matrix.reverse(), 得\n\n```\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n```\n\n2.然后以左上角到右下角的线作为翻转线进行翻转, 这里找规律\n\n```\n1 2 3\n4 5 6  只需对  4   进行处理\n7 8 9         7 8\n```\n\n```js\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function (matrix) {\n  matrix.reverse()\n\n  let tmp\n  for (let x = 0; x < matrix.length; x++) {\n    for (let y = 0; y < x; y++) {\n      tmp = matrix[x][y]\n      matrix[x][y] = matrix[y][x]\n      matrix[y][x] = tmp\n    }\n  }\n\n  console.log(matrix)\n};\n```"}}]);