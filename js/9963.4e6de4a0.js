(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9963],{89963:n=>{n.exports="### title\n\nGiven n points on a 2D plane, find the maximum number of points that lie on the same straight line.\n\nExample 1:\n\n```js\nInput: [[1,1],[2,2],[3,3]]\nOutput: 3\nExplanation:\n^\n|\n|        o\n|     o\n|  o  \n+-------------\x3e\n0  1  2  3  4\n```\n\n```js\nExample 2:\n\nInput: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\nExplanation:\n^\n|\n|  o\n|     o        o\n|        o\n|  o        o\n+-------------------\x3e\n0  1  2  3  4  5  6\n```\n\n### Analyze\n\n* 需要考虑的条件\n  * points 中的值是否会重合?\n  * 针对除不尽的数字, 精度问题是否需要考虑?\n  * 传入参数个数;\n* 为避免除法带来的问题, 可以求最大公约数, 将 9/6, 18/12 转化为 3/2;\n  * 在同一排可以表示为 '0/x', 在同一列可以表示为 'y/0';\n  * 重合的点可以表示为 '0/0', 并用变量 samePoint 来记录它;\n\n> 求最大公约数用到了数学中的辗转相除法: 两个正整数 a 和 b(a>b), 它们的最大公约数等于 a 除以 b 的余数 c 和 b 之间的最大公约数。比如 25 和 10, 25 除以 10 商 2 余 5, 那么 25 和 10 的最大公约数, 等同于 10 和 5 的最大公约数。\n\n```js\n/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxPoints = function(points) {\n  if (points.length === 0) return 0\n  if (points.length === 1) return 1\n  const getFractions = (pointsdiffX, pointsdiffY) => {\n    if (pointsdiffX === 0 && pointsdiffY !== 0) return `y/0`\n    if (pointsdiffX !== 0 && pointsdiffY === 0) return `0/x`\n    if (pointsdiffX === 0 && pointsdiffY === 0) return `0/0`\n    const gcdValue = gcd(pointsdiffY, pointsdiffX)\n    const numerator = pointsdiffY / gcdValue\n    const denominator = pointsdiffX / gcdValue\n    return `${numerator}/${denominator}`\n  }\n\n  const gcd = (a, b) => {\n    if (b === 0) {\n      return a\n    }\n    return gcd(b, a % b)\n  }\n\n  let result = 0\n\n  for (let m = 0; m < points.length; m++) {\n    const map = new Map()\n    let samePoint = 0\n    for (let n = 0; n < points.length; n++) {\n      if (m !== n) {\n        const pointsdiffX = points[n][0] - points[m][0]\n        const pointsdiffY = points[n][1] - points[m][1]\n        if (pointsdiffX === 0 && pointsdiffY === 0) {\n          samePoint++\n        }\n        const fractions = getFractions(pointsdiffX, pointsdiffY)\n        if (map.has(fractions)) {\n          map.set(fractions, map.get(fractions) + 1)\n        } else {\n          map.set(fractions, 1)\n        }\n      }\n    }\n    map.forEach((value, key) => {\n      if (key !== '0/0') {\n        result = Math.max(result, value + samePoint + 1)\n      } else {\n        result = Math.max(result, value + 1)\n      }\n    })\n  }\n\n  return result\n}\n```\n\n![](http://with.muyunyun.cn/490006ca96e92c2bbcbca3856d71c1df.jpg-400)\n\n### Sister Title\n\n149"}}]);