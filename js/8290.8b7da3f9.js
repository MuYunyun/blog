(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8290],{78290:n=>{n.exports="### 什么是动态规划\n\n`动态规划`和`分而治之`([快速排序](https://github.com/MuYunyun/blog/blob/master/BasicSkill/algorithm/排序算法/快速排序.md)、[归并排序](https://github.com/MuYunyun/blog/blob/master/BasicSkill/algorithm/排序算法/归并排序.md)) 的思想大方面讲都属于递归的范畴。但动态规划是将一个大问题拆分成有联系的子问题, 分而治之则是将一个大问题拆分成互相间没有关系的子问题。\n\n### 动态规划解题思路\n\n1. 确定子问题\n2. 确定终止条件\n\n### 案例 —— 最小找零硬币数\n\n场景: 假如有 1, 5, 10, 20 美分的硬币\n\n```\n[1, 5, 10, 20]\n\n4              // 找零数\n[1, 1, 1, 1]   // 需 4 个 1 美分的硬币\n\n5              // 找零数\n[5]            // 需 1 个 5 美分的硬币\n\n36             // 找零数\n[20, 10, 5, 1] // 需 20、10、5、1美分的硬币各一个\n```\n\n下面用代码来实现:\n\n```js\nvar MinChange = function (changeType) {\n  this.changeType = changeType\n  this.cache = {}\n}\n\nMinChange.prototype.makeChange = function (amount) {\n  let min = []\n  if (!amount) {\n    return []\n  }\n  if (this.cache[amount]) {   // 读缓存\n    return this.cache[amount]\n  }\n\n  for (let i = 0; i < this.changeType.length; i++) {\n    const leftAmount = amount - this.changeType[i]\n    let newMin\n    if (leftAmount >= 0) {\n      newMin = this.makeChange(leftAmount) // 这一句是动态规划的提现\n    }\n    if (leftAmount >= 0\n      && (newMin.length < min.length - 1 || !min.length)) { // 如果存在更小的找零硬币数, 则执行后面语句\n      min = [this.changeType[i]].concat(newMin)\n    }\n  }\n\n  return this.cache[amount] = min\n}\n```\n\n下面进行测试:\n\n```js\nvar minChange = new MinChange([1, 5, 10, 20])\n\nminChange.makeChange(2)  // [1, 1]\nminChange.makeChange(5)  // [5]\nminChange.makeChange(36) // [1, 5, 10, 20]\n```\n"}}]);