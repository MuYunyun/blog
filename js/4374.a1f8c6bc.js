(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4374],{94374:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>d});var l=t(59713),a=t.n(l),o=t(6479),i=t.n(o),r=(t(67294),t(3905));function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){a()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var s={};function d(e){var n=e.components,t=i()(e,["components"]);return(0,r.kt)("wrapper",p(p(p({},s),t),{},{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,"Delete Node in a Linked List"),(0,r.kt)("p",null,"Write a function to delete a node (except the tail) in a singly linked list, given only access to that node."),(0,r.kt)("p",null,"Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-js"}),"Input: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\n")),(0,r.kt)("p",null,"Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function."),(0,r.kt)("p",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-js"}),"Input: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\n")),(0,r.kt)("p",null,"Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function."),(0,r.kt)("p",null,"Note:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The linked list will have ",(0,r.kt)("inlineCode",{parentName:"li"},"at least two elements"),"."),(0,r.kt)("li",{parentName:"ul"},"All of the nodes' values will be unique."),(0,r.kt)("li",{parentName:"ul"},"The given node will ",(0,r.kt)("inlineCode",{parentName:"li"},"not be the tail")," and it will always be a valid node of the linked list."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Do not return anything from your function"),".")),(0,r.kt)("h3",null,"Analyze"),(0,r.kt)("p",null,"相较于 ",(0,r.kt)("a",p({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/master/BasicSkill/LeetCode/203.Remove_Linked_List_Elements/README.md"}),"203.Remove_Linked_List_Elements"),", 此题一个点是在函数中不能返回任何值, 因此不能引入 dummyHead。另外一个点是没有传入 head 指针, 所以没法拿到当前要删除的上个节点。"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-js"}),"4 -> 5 -> 1 -> 9 -> null\n          .\n          .\n          node\n4 -> 5 -> 9 -> 9 -> null\n          .\n          .\n4 -> 5 -> 9 -> null\n")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} node\n * @return {void} Do not return anything, modify node in-place instead.\n */\nvar deleteNode = function(node) {\n  node.val = node.next.val\n  node.next = node.next.next\n}\n")),(0,r.kt)("h3",null,"姊妹题"),(0,r.kt)("p",null,"203"))}d.isMDXComponent=!0}}]);