(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3378],{43378:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>m});var a=n(59713),r=n.n(a),l=n(6479),p=n.n(l),o=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var c={};function m(e){var t=e.components,n=p()(e,["components"]);return(0,o.kt)("wrapper",u(u(u({},c),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"React 的组件名为什么要大写？")),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"在 `render` 中, 小写会被认为是 `html` 元素\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"你会把向 API 的数据请求放在哪里执行")),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"视情况考虑:\n\n* componentDidMount, 可能会导致白屏\n* constructor, 针对数据不变的情况\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"虚拟 dom 中有个 ",(0,o.kt)("inlineCode",{parentName:"li"},"$$typeof")," 字段，有了解过它的作用么？")),(0,o.kt)("p",null,"运用 ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," 里会无视 ",(0,o.kt)("inlineCode",{parentName:"p"},"Symbol")," 的知识点来完成安全性校验。可以参阅 ",(0,o.kt)("a",u({parentName:"p"},{href:"https://overreacted.io/why-do-react-elements-have-typeof-property/"}),"Why Do React Elements Have a $$typeof Property?")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"如何理解 ",(0,o.kt)("inlineCode",{parentName:"li"},"useEffect")," 中的副作用")),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"操作 dom, 获取数据，会影响其它组件或者在渲染时没有办法做其它操作, 这是目前所理解的副作用。\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"组件为什么写成 ",(0,o.kt)("inlineCode",{parentName:"li"},"<Form />")," 而不是 ",(0,o.kt)("inlineCode",{parentName:"li"},"Form()"))),(0,o.kt)("p",null,"结合编译时能做更多事情"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"React.memo()")," 和 ",(0,o.kt)("inlineCode",{parentName:"li"},"useMemo()")," 的区别")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useMemo()")," 的粒度比 ",(0,o.kt)("inlineCode",{parentName:"p"},"React.memo()")," 更细"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"什么时候使用 setState((state, props) => stateChange) 而不用 setState({})")),(0,o.kt)("p",null,"点击一个按钮, 连续使用 setState 进行三次的增加, 如果使用 setState({}) 会造成 state 的合并, 使用 setState((state, props) => stateChange) 没有这个问题。"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",u({parentName:"p"},{href:"https://overreacted.io/react-as-a-ui-runtime/"}),"react-as-a-ui-runtime"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"How to judge if the react element is Fragment?")),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * judege if is React Fragment.\n */\nfunction isReactFragment(variableToInspect) {\n  if (variableToInspect.type) {\n    return variableToInspect.type === React.Fragment;\n  }\n  return variableToInspect === React.Fragment;\n}\n")))}m.isMDXComponent=!0}}]);