(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1518],{11518:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>p});var r=t(59713),l=t.n(r),a=t(6479),o=t.n(a),i=(t(67294),t(3905));function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var c={};function p(e){var n=e.components,t=o()(e,["components"]);return(0,i.kt)("wrapper",u(u(u({},c),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"108. Convert Sorted Array to Binary Search Tree"),(0,i.kt)("p",null,"Given an array where elements are sorted in ascending order, convert it to a ",(0,i.kt)("inlineCode",{parentName:"p"},"height balanced BST"),"."),(0,i.kt)("p",null,"For this problem, a height-balanced binary tree is defined as a binary tree in which the ",(0,i.kt)("inlineCode",{parentName:"p"},"depth of the two subtrees of every node never differ by more than 1"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("p",null,"Given the sorted array: ","[-10,-3,0,5,9]",",\nOne possible answer is: ","[0,-3,9,-10,null,5]",", which represents the following height balanced BST:"),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),"       0\n     /   \\\n   -3     9\n   /     /\n -10    5\n")),(0,i.kt)("h3",null,"Analyze"),(0,i.kt)("p",null,"递归解题, 题目中",(0,i.kt)("inlineCode",{parentName:"p"},"高度平衡即当前节点的左右子节点的深度不超过 1")," 要稍微理解下。"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"当数组为奇数时比如 ","[0, 1, 2]",", 此时取中间数 1 为根节点, 0 和 2 分别为其左右子节点, 此时满足高度平衡的条件。"),(0,i.kt)("li",{parentName:"ul"},"当数组为偶数时比如 ","[0, 1]",", 此时取中间数 1 为根节点, 0 为其左右子节点, 此时满足高度平衡的条件。")),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar sortedArrayToBST = function(nums) {\n  if (nums.length === 0) return null\n  const mid = Math.floor(nums.length / 2)\n  const result = new TreeNode(nums[mid])\n  const left = nums.slice(0, mid)\n  const right = nums.slice(mid + 1, nums.length)\n  result.left = sortedArrayToBST(left)\n  result.right = sortedArrayToBST(right)\n  return result\n};\n\nfunction TreeNode(val) {\n  this.val = val;\n  this.left = this.right = null;\n}\n")))}p.isMDXComponent=!0}}]);