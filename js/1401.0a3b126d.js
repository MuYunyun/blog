(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1401],{11401:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>c});var l=t(59713),r=t.n(l),u=t(6479),i=t.n(u),a=(t(67294),t(3905));function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,l)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var p={};function c(n){var e=n.components,t=i()(n,["components"]);return(0,a.kt)("wrapper",s(s(s({},p),t),{},{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",null,"143.Reorder List"),(0,a.kt)("p",null,"Given a singly linked list L: L0 → L1 → .. → Ln-1 → Ln,\nreorder it to: L0 → Ln → L1 → Ln-1 → L2 → Ln-2 →"),(0,a.kt)("p",null,"You may ",(0,a.kt)("inlineCode",{parentName:"p"},"not modify the values in the list's nodes"),", only nodes itself may be changed."),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Given 1->2->3->4, reorder it to 1->4->2->3.\n")),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Given 1->2->3->4->5, reorder it to 1->5->2->4->3.\n")),(0,a.kt)("h3",null,"Analyze"),(0,a.kt)("p",null,"这道题可作如下转化:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"步骤一: 找到链表中点后分割其为 left 链表、right 链表两部分;"),(0,a.kt)("li",{parentName:"ol"},"步骤二: 翻转 right 链表, 翻转链表思路同 ",(0,a.kt)("a",s({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/LeetCode/206.Reverse_Linked_List/README.md"}),"206.Reverse_Linked_List"),";"),(0,a.kt)("li",{parentName:"ol"},"步骤三: 接着从 left 链表的左侧, 翻转后的 right 链表的左侧各取一个值进行交替拼接;")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"快慢指针即 quick 指针每次走两步, slow 指针每次走一步, 同 ",(0,a.kt)("a",s({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/master/LeetCode/148.Sort_List/README.md"}),"148.Sort_List"))),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"                   s               q\ndummy -> 1 -> 2 -> 3 -> 4 -> 5 -> NULL\n\n步骤一: 拆分 head 链表成 `left`、`right` 两个链表;\n\nl\n1 -> 2 -> 3 -> null\n\nr\n4 -> 5 -> NULL\n\n步骤二: 翻转 right 链表\n\nl\n1 -> 2 -> 3 -> null\n\nr\n5 -> 4 -> NULL\n\n步骤三: 衔接 left、right 两个链表;\n\n          l\n1 -> 5 -> 2 -> 3 -> NULL\n\nr\n4 -> NULL\n")),(0,a.kt)("p",null,"步骤二中翻转链表的图解大致如下:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"})," cur  next\n  1 -> 2 -> 3 -> null\n\n       prev cur\nnull <- 1 <- 2 -> 3 -> null\n\n            prev cur\nnull <- 1 <- 2 <- 3 -> null\n\n                 prev\nnull <- 1 <- 2 <- 3 -> null\n")),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {void} Do not return anything, modify head in-place instead.\n */\nvar reorderList = function(head) {\n  const dummy = new ListNode(0)\n  dummy.next = head\n\n  let slow = dummy\n  let quick = dummy\n\n  while (quick && quick.next) {\n    slow = slow.next\n    quick = quick.next\n    quick = quick.next\n  }\n\n  let right = slow.next\n  slow.next = null\n  let left = dummy.next\n\n  right = reverseList(right)\n\n  while (left && right) {\n    let lNext = left.next\n    let rNext = right.next\n    right.next = left.next\n    left.next = right\n    left = lNext\n    right = rNext\n  }\n\n  return dummy.next\n}\n\nvar reverseList = (list) => {\n  let prev = null\n  let cur = list\n\n  while (cur) {\n    let next = cur.next\n    cur.next = prev\n\n    prev = cur\n    cur = next\n  }\n\n  return prev\n}\n")),(0,a.kt)("p",null,(0,a.kt)("img",s({parentName:"p"},{src:"http://with.muyunyun.cn/3f207867435faf3edeeb4e9d2f5f5b29.jpg",alt:null}))),(0,a.kt)("h3",null,"Similar Title"),(0,a.kt)("p",null,"148(快慢指针)、234"))}c.isMDXComponent=!0}}]);