(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7515],{17515:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),l=t.n(r),a=t(6479),o=t.n(a),i=(t(67294),t(3905));function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var u={};function c(e){var n=e.components,t=o()(e,["components"]);return(0,i.kt)("wrapper",s(s(s({},u),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"103.Binary Tree Zigzag Level Order Traversal"),(0,i.kt)("p",null,"Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between)."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-js"}),"Given binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,i.kt)("p",null,"return its zigzag level order traversal as:"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-js"}),"[\n  [3],\n  [20,9],\n  [15,7]\n]\n")),(0,i.kt)("h3",null,"analyze"),(0,i.kt)("p",null,"解析: 该题考察的是",(0,i.kt)("inlineCode",{parentName:"p"},"树的广度遍历(BFS)"),", 运用到了",(0,i.kt)("inlineCode",{parentName:"p"},"队列"),"相关知识; 此外展示项的处理逻辑为当层级为奇数时顺序推入, 层级为偶数时逆序推入;"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const list = []\n  list.push({ level: 0, node: root })\n  while(list.length > 0) {\n    const { level, node } = list.shift()\n    if (!printArr[level]) {\n      printArr[level] = []\n    }\n\n    if (level % 2 === 0) {\n      printArr[level].push(node.val)\n    } else {\n      printArr[level].unshift(node.val)\n    }\n\n    node.left && list.push({ level: level + 1, node: node.left })\n    node.right && list.push({ level: level + 1, node: node.right })\n  }\n\n  return printArr\n}\n")),(0,i.kt)("p",null,(0,i.kt)("img",s({parentName:"p"},{src:"http://with.muyunyun.cn/46fb98b84aa676d4608d3ce793c08273.jpg",alt:null}))),(0,i.kt)("h3",null,"Similar Title"),(0,i.kt)("p",null,"102、107、199"))}c.isMDXComponent=!0}}]);