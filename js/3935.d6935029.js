(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3935],{33935:n=>{n.exports="### 103.Binary Tree Zigzag Level Order Traversal\n\nGiven a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).\n\nFor example:\n\n```js\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\nreturn its zigzag level order traversal as:\n\n```js\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n```\n\n### analyze\n\n解析: 该题考察的是`树的广度遍历(BFS)`, 运用到了`队列`相关知识; 此外展示项的处理逻辑为当层级为奇数时顺序推入, 层级为偶数时逆序推入;\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const list = []\n  list.push({ level: 0, node: root })\n  while(list.length > 0) {\n    const { level, node } = list.shift()\n    if (!printArr[level]) {\n      printArr[level] = []\n    }\n\n    if (level % 2 === 0) {\n      printArr[level].push(node.val)\n    } else {\n      printArr[level].unshift(node.val)\n    }\n\n    node.left && list.push({ level: level + 1, node: node.left })\n    node.right && list.push({ level: level + 1, node: node.right })\n  }\n\n  return printArr\n}\n```\n\n![](http://with.muyunyun.cn/46fb98b84aa676d4608d3ce793c08273.jpg)\n\n### Similar Title\n\n102、107、199"}}]);