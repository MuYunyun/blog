(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6621],{16621:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var a=n(59713),l=n.n(a),r=n(6479),i=n.n(r),o=(n(67294),n(3905));function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){l()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var u={};function c(e){var t=e.components,n=i()(e,["components"]);return(0,o.kt)("wrapper",p(p(p({},u),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",null,"操作远程文件"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"git push origin :[branch] 删除远程分支\ngit rm -r --cached [file] 删除远程文件\n")),(0,o.kt)("h3",null,"git commit 提交规范"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"feat: 新功能\nfix: 修复 bug\ntest: 增加/修改测试用例\nchore: 修改工具相关\ndocs: 修改文档\nperf: 提升性能\nreflactor: 重构, 不影响当前逻辑\nstyle: 修改样式\ndeps: 升级依赖\n")),(0,o.kt)("h3",null,"PR 相关"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"git remote -v               列出远程仓库 url\ngit remote add [name] [url] 添加远程仓库 url\ngit fetch [name]            拉取远程仓库最新代码\ngit merge [name]/master     合并远程分支最新代码到本地\n")),(0,o.kt)("h3",null,"git pull 和 git fetch 的区别"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"git pull")," 等价于 ",(0,o.kt)("inlineCode",{parentName:"p"},"git fetch")," 和 ",(0,o.kt)("inlineCode",{parentName:"p"},"git checkout -b")),(0,o.kt)("h3",null,"git merge 和 git rebase 的区别"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git merge")," 会多产生一次 merge 的 log 记录;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git rebase")," 会将主干新增的日志记录前置到当前分支之前;")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"git merge --no-ff 在每次合并都会产生一个新的合并记录; git merge 的话只有解决冲突的时候才会产生一个新的合并记录。")),(0,o.kt)("h3",null,"git reset 和 git revert 的区别"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"git revert 回退会产生一个新的 commit, 是向前的操作"),(0,o.kt)("li",{parentName:"ul"},"git reset 回退不会产生一个新的 commit, 是向后的操作")),(0,o.kt)("h3",null,"git reset 撤销操作"),(0,o.kt)("p",null,"以下都为 ",(0,o.kt)("inlineCode",{parentName:"p"},"commit")," 了的情况, 下面对 ",(0,o.kt)("inlineCode",{parentName:"p"},"--mixed"),"、",(0,o.kt)("inlineCode",{parentName:"p"},"--hard"),"、",(0,o.kt)("inlineCode",{parentName:"p"},"--soft")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"git reset --soft Head~1: 撤销到上个分支, 撤销到 commit 之前, add 之后, 保留代码"),(0,o.kt)("li",{parentName:"ul"},"git reset --mixed Head~1: 撤销到上个分支, 撤销到 add 之前, 保留代码"),(0,o.kt)("li",{parentName:"ul"},"git reset --hard Head~1: 撤销到上个分支, 不保留代码")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"可以看到从上往下回复程度是在加强的。")),(0,o.kt)("h3",null,"git cherry-pick"),(0,o.kt)("p",null,"使用场景: 在一个分支中拉取另外一个分支",(0,o.kt)("inlineCode",{parentName:"p"},"某一个 commit")," 或",(0,o.kt)("inlineCode",{parentName:"p"},"一段区间的 commit")),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"git cherry-pick <commit id>\ngit cherry-pick 371c2…971209 // (2,5]\ngit cherry-pick 371c2^…971209 // [2,5]\n")),(0,o.kt)("h3",null,"git log"),(0,o.kt)("p",null,"美化 git 日志"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n")),(0,o.kt)("p",null,"查看文件修改内容"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"git lg -p\n")),(0,o.kt)("h3",null,"对线上代码 (master 分支) 进行修复"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"在 ",(0,o.kt)("inlineCode",{parentName:"li"},"master")," 分支上使用 ",(0,o.kt)("inlineCode",{parentName:"li"},"git reset --hard xxxxxx"),";"),(0,o.kt)("li",{parentName:"ol"},"使用 ",(0,o.kt)("inlineCode",{parentName:"li"},"git checkout -b")," 创建 ",(0,o.kt)("inlineCode",{parentName:"li"},"fix/xxx")," 分支, 在该分支上进行 bug 修复;"),(0,o.kt)("li",{parentName:"ol"},"回到 ",(0,o.kt)("inlineCode",{parentName:"li"},"master")," 分支, 可以使用 ",(0,o.kt)("inlineCode",{parentName:"li"},"git reflog")," 查看之前 reset 过来的分支节点, 再执行 ",(0,o.kt)("inlineCode",{parentName:"li"},"git reset --hard xxxxxx")," 回到那个节点。"),(0,o.kt)("li",{parentName:"ol"},"在 master 的最新节点上使用 ",(0,o.kt)("inlineCode",{parentName:"li"},"git merge --no-ff fix/xxx"))),(0,o.kt)("h3",null,"github 使用技巧"),(0,o.kt)("p",null,"选择一句话, 按 r 对该话进行引用回复。"),(0,o.kt)("h3",null,"关于 pull request"),(0,o.kt)("p",null,"如果是比较复杂的 Feature 可以在开发过程提 pr(标为 WIP), 这样子可以提早的指出问题代码。"),(0,o.kt)("p",null,"当有人提了 ",(0,o.kt)("inlineCode",{parentName:"p"},"pr"),", 需要观察 pr 的代码是否存在问题。比如使用如下命令:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"git remote add lanyincao git@github.com:snakeUni/snake-design.git\n")),(0,o.kt)("h3",null,"git reflog"),(0,o.kt)("p",null,"git reflog 可以查看所有分支的所有操作记录"),(0,o.kt)("h3",null,"一个痛点"),(0,o.kt)("p",null,"输入 ",(0,o.kt)("inlineCode",{parentName:"p"},"git branch")," 分支情况如下:"),(0,o.kt)("p",null,(0,o.kt)("img",p({parentName:"p"},{src:"http://with.muyunyun.cn/c5586a56a252a983713f306ea2902255.jpg",alt:null}))),(0,o.kt)("p",null,"输入 ",(0,o.kt)("inlineCode",{parentName:"p"},"git branch --merged")," 后查看已合并的分支"),(0,o.kt)("p",null,(0,o.kt)("img",p({parentName:"p"},{src:"http://with.muyunyun.cn/38861f42cde27e6d1ae0ecc73a7f2357.jpg",alt:null}))),(0,o.kt)("p",null,"如何一键快速删除这些已合并的分支并删除远端的分支呢"),(0,o.kt)("p",null,"参考此脚本, 后续跟进。"),(0,o.kt)("h3",null,"操作 tag"),(0,o.kt)("p",null,"添加 tag:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"git tag v0.1         // 本地推标签\ngit push orgin v0.1  // 远端推标签\n")),(0,o.kt)("p",null,"删除 tag:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"git tag -d v0.1                  // 删除本地标签\ngit push origin :refs/tags/v0.1  // 删除远端标签\n")),(0,o.kt)("h3",null,"git 项目大小写"),(0,o.kt)("p",null,"git 默认初始化的项目是不区分文件名大小写的, 可以执行下这行命令"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"git config core.ignorecase false\n")),(0,o.kt)("h3",null,"查看两个分支的差异"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-js"}),"git diff xxx xxx > my.patch\n")),(0,o.kt)("h3",null,"误提交敏感信息到 github 怎么办"),(0,o.kt)("p",null,"the first step:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),'git filter-branch --force --index-filter \\\n  "git rm --cached --ignore-unmatch yarn.lock" \\\n  --prune-empty --tag-name-filter cat -- --all\n')),(0,o.kt)("p",null,"the second step:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"git push origin --force --all\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",p({parentName:"li"},{href:"https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository"}),"removing-sensitive-data-from-a-repository"))),(0,o.kt)("p",null,"ask for Contact ",(0,o.kt)("a",p({parentName:"p"},{href:"https://support.github.com/contact"}),"GitHub Support")," or ",(0,o.kt)("a",p({parentName:"p"},{href:"https://premium.githubsupport.com/"}),"GitHub Premium Support"),", asking them to remove cached views and references to the sensitive data in pull requests on GitHub."),(0,o.kt)("h3",null,"clean up git commit"),(0,o.kt)("p",null,"使用交互式 rebase 则有更多的功能，可以细致的操作每一条 commit，这样我们就能合并，修改 commit"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{}),"git rebase -i [start-commit] [end-commit]\n# (start-commit, end-commit] 前开后闭区间，默认 end-commit 为当前 HEAD\n")),(0,o.kt)("p",null,"for example"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{}),"git rebase -i HEAD~4\n")),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{}),'1 pick 05a703d fix: 左右按键遇见 label 标签、加粗文字, 光标位置与预期不符\n2 s a716c1d fix: 修复 P0 报错\n3\n4 # Rebase d974fa9..a716c1d onto d974fa9 (2 command(s))\n5 #\n6 # Commands:\n7 # p, pick = use commit\n8 # r, reword = use commit, but edit the commit message\n9 # e, edit = use commit, but stop for amending\n10 # s, squash = use commit, but meld into previous commit\n11 # f, fixup = like "squash", but discard this commit\'s log message\n12 # x, exec = run command (the rest of the line) using shell\n13 # d, drop = remove commit\n14 #\n15 # These lines can be re-ordered; they are executed from top to bottom.\n16 #\n17 # If you remove a line here THAT COMMIT WILL BE LOST.\n18 #\n19 # However, if you remove everything, the rebase will be aborted.\n20 #\n21 # Note that empty commits are commented out\n')),(0,o.kt)("p",null,"删除不想保留的 commit。"),(0,o.kt)("h3",null,"How do you make changes on a specific commit"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-bash"}),'1. git rebase -i <Earlier Commit>\n2. edit the commit info you want change from `pick` to `edit`\n3. git commit --amend --author="MuYunyun <328375795@qq.com>"\n4. git rebase --continue\n')),(0,o.kt)("h3",null,"Setting your Git username"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"for every repository")),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{}),'$ git config --global user.name "Mona Lisa"\n$ git config --global user.name\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"for a single repository")),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{}),'$ git config user.name "MuYunyun"\n$ git config user.name\n$ git config user.email "328375795@qq.com"\n$ git config user.email\n')),(0,o.kt)("h3",null,"How to check the conflict of two branch, but not need to merge them?"),(0,o.kt)("p",null,(0,o.kt)("a",p({parentName:"p"},{href:"https://stackoverflow.com/questions/10879331/how-to-check-the-conflict-of-two-branch-but-not-need-to-merge-them"}),"How to check the conflict of two branch, but not need to merge them?")),(0,o.kt)("p",null,"git document:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"--ff\nDo not generate a merge commit if the merge resolved as a fast-forward, only update the branch pointer. This is the default behavior.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"-no-ff\nGenerate a merge commit even if the merge resolved as a fast-forward.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"--commit\nPerform the merge and commit the result. This option can be used to override --no-commit.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"--no-commit\nWith --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance to inspect and further tweak the merge result before committing.")))}c.isMDXComponent=!0}}]);