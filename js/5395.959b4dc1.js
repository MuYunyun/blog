(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5395],{65395:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>k});var a=n(59713),l=n.n(a),r=n(6479),i=n.n(r),o=(n(67294),n(3905));function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){l()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var u={};function k(e){var t=e.components,n=i()(e,["components"]);return(0,o.kt)("wrapper",c(c(c({},u),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"Partial<T>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Partial<T>"),": 意味 T 集合的子集;"),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"Pick<T, K>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Pick<T, K>"),": 相对 ",(0,o.kt)("inlineCode",{parentName:"p"},"Partial<T>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Pick<T, K>")," 限制了子集中必须含有 K 定义的类型字段。"),(0,o.kt)("pre",null,(0,o.kt)("code",c({parentName:"pre"},{className:"language-js"}),'interface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\ntype TodoPreview = Pick<Todo, "title" | "completed">;\nconst todo: TodoPreview = {\n  title: "Clean room",\n  completed: false\n};\n')),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"Readonly<T>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Readonly<T>"),": T 中类型只读;"),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"Record<K, T>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Record<K, T>"),": 建立 K 到 T 之间的 map 映射。"),(0,o.kt)("pre",null,(0,o.kt)("code",c({parentName:"pre"},{className:"language-js"}),'interface PageInfo {\n  title: string;\n}\ntype Page = "home" | "about" | "contact";\nconst x: Record<Page, PageInfo> = {\n  about: { title: "about" },\n  contact: { title: "contact" },\n  home: { title: "home" }\n};\n')),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"Omit<T, K>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Omit<T, K>"),": 申明一个类型其在 T 类型中",(0,o.kt)("inlineCode",{parentName:"p"},"移除 K 中包含的属性值"),";"),(0,o.kt)("pre",null,(0,o.kt)("code",c({parentName:"pre"},{className:"language-js"}),'interface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\ntype TodoPreview = Omit<Todo, "description">;\nconst todo: TodoPreview = {\n  title: "Clean room",\n  completed: false\n};\n')),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"Exclude<T, U>")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Exclude<T, U>"),": 申明一个类型其在 T 类型中",(0,o.kt)("inlineCode",{parentName:"li"},"移除 U 中所包含的类型"),";"),(0,o.kt)("li",{parentName:"ul"},"版本: 2.8")),(0,o.kt)("pre",null,(0,o.kt)("code",c({parentName:"pre"},{className:"language-js"}),'type T0 = Exclude<"a" | "b" | "c", "a">; // "b" | "c"\ntype T1 = Exclude<"a" | "b" | "c", "a" | "b">; // "c"\ntype T2 = Exclude<string | number | (() => void), Function>; // string | number\n')),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"Extract<T, U>")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Extract<T, U>")," — Extract from T those types that are assignable to U."),(0,o.kt)("li",{parentName:"ul"},"版本: 2.8")),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"NonNullable<T>")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NonNullable<T>"),": 申明一个类型其将 T 类型中的 null 与 undefined 移除;"),(0,o.kt)("li",{parentName:"ul"},"版本: 2.8")),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"ReturnType<T>")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ReturnType<T>")," — Obtain the return type of a function type."),(0,o.kt)("li",{parentName:"ul"},"版本: 2.8")),(0,o.kt)("h3",null,(0,o.kt)("inlineCode",{parentName:"h3"},"InstanceType<T>")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"InstanceType<T>"),": 申明一个由构造函数实例类型组合而成的类型;"),(0,o.kt)("li",{parentName:"ul"},"版本: 2.8")),(0,o.kt)("pre",null,(0,o.kt)("code",c({parentName:"pre"},{className:"language-js"}),"class C {\n  x = 0;\n  y = 0;\n}\ntype T0 = InstanceType<typeof C>; // C\ntype T1 = InstanceType<any>; // any\ntype T2 = InstanceType<never>; // any\ntype T3 = InstanceType<string>; // Error\ntype T4 = InstanceType<Function>; // Error\n")),(0,o.kt)("h3",null,"Link"),(0,o.kt)("ul",c({},{className:"contains-task-list"}),(0,o.kt)("li",c({parentName:"ul"},{className:"task-list-item"}),(0,o.kt)("input",c({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",(0,o.kt)("a",c({parentName:"li"},{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html"}),"Utility Types"))))}k.isMDXComponent=!0}}]);