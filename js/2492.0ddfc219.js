(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2492],{52492:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var r=n(59713),o=n.n(r),a=n(6479),u=n.n(a),l=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s={};function p(e){var t=e.components,n=u()(e,["components"]);return(0,l.kt)("wrapper",b(b(b({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",null,"Back Tracking 回溯法"),(0,l.kt)("p",null,"回溯是一种思想。DFS 也是回溯思想的一种实践案例。回溯法本质是一种穷举的递归算法, 既然是递归, 它就需要有终止条件。"),(0,l.kt)("h3",null,"解决场景"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"排列问题")),(0,l.kt)("h3",null,"回溯法相关题目"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",b({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/main/LeetCode/17.Letter_Combinations_of_a_Phone_Number.md"}),"17.Letter Combinations of a Phone Number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",b({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/main/LeetCode/22.Generate_Parentheses.md"}),"22.Generate Parentheses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",b({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/main/LeetCode/78.Subsets.md"}),"78.Subsets")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",b({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/main/LeetCode/93.Restore_IP_Addresses.md"}),"93.Restore IP Addresses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",b({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/main/LeetCode/131.Palindrome%20Partitioning.md"}),"131.Palindrome Partitioning"))))}p.isMDXComponent=!0}}]);