(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4409],{54409:(n,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>i});var o=e(59713),r=e.n(o),c=e(6479),a=e.n(c),u=(e(67294),e(3905));function p(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,o)}return e}function l(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?p(Object(e),!0).forEach((function(t){r()(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):p(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}var m={};function i(n){var t=n.components,e=a()(n,["components"]);return(0,u.kt)("wrapper",l(l(l({},m),e),{},{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h3",null,"命令模式"),(0,u.kt)("p",null,"命令模式与",(0,u.kt)("a",l({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/master/Basic%20Skill/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.md"}),"策略模式"),"有些类似, 在 JavaScript 中它们都是隐式的。"),(0,u.kt)("p",null,"重要性: 较低"),(0,u.kt)("h3",null,"JavaScript 中的命令模式"),(0,u.kt)("p",null,"命令模式在 JavaScript 中也比较简单, 下面代码中对",(0,u.kt)("inlineCode",{parentName:"p"},"按钮"),"和",(0,u.kt)("inlineCode",{parentName:"p"},"命令"),"进行了抽离, 因此可以复杂项目中可以使用命令模式将界面的代码和功能的代码交付给不同的人去写。"),(0,u.kt)("pre",null,(0,u.kt)("code",l({parentName:"pre"},{className:"language-js"}),"const setCommand = function(button, command) {\n  button.onClick = function() {\n    command.excute()\n  }\n}\n\n// --------------------  上面的界面逻辑由A完成, 下面的由B完成\n\nconst menu = {\n  updateMenu: function() {\n    console.log('更新菜单')\n  },\n}\n\nconst UpdateCommand = function(receive) {\n  return {\n    excute: receive.updateMenu,\n  }\n}\n\nconst updateCommand = UpdateCommand(menu) // 创建命令\n\nconst button1 = document.getElementById('button1')\nsetCommand(button1, updateCommand)\n")))}i.isMDXComponent=!0}}]);