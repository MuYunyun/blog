(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2675],{82675:n=>{n.exports='### setState 是同步还是异步的?\n\n```js\nclass App extends React.Component {\n  state = {\n    num: 0\n  };\n\n  analyze = () => {\n    this.setState({\n      num: this.state.num + 1\n    });\n    console.log("num", this.state.num);\n    this.setState({\n      num: this.state.num + 1\n    });\n    console.log("num", this.state.num);\n    this.setState({\n      num: this.state.num + 1\n    });\n    console.log("num", this.state.num);\n  };\n\n  handleClick = () => {\n    this.analyze(); // ①\n    // setTimeout(() => { // ②\n    //   this.analyze();\n    // }, 0);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>click button</button>;\n  }\n}\n```\n\n① 处代码打印结果: 0 0 0;\n② 处代码打印结果: 1 2 3;\n\n> [demo 演示](https://codesandbox.io/s/6l98prq3nk)\n\n为什么会出现这样的现象呢, 相关源码如下:\n\n```js\n// 如果满足一定条件, 则对 setState 做批量更新\nfunction batchedUpdates(fn) {\n  const previousIsBatchingUpdates = isBatchingUpdates;\n  isBatchingUpdates = true;\n  try {\n    return fn(a); // 相当于所有 setState 都在这里执行, 相当于就是异步执行 setState 了。可见上述 demo\n  } finally {\n    isBatchingUpdates = previousIsBatchingUpdates;\n    if (!isBatchingUpdates && !isRendering) {\n      performSyncWork();\n    }\n  }\n}\n\n// setState 会进这个函数\nfunction requestWork(root, expirationTime) {\n  addRootToSchedule(root, expirationTime);\n  if (isRendering) {\n    return;\n  }\n\n  if (isBatchingUpdates) {\n    // Flush work at the end of the batch.\n    if (isUnbatchingUpdates) {\n      // ...unless we\'re inside unbatchedUpdates, in which case we should\n      // flush it now.\n      nextFlushedRoot = root;\n      nextFlushedExpirationTime = Sync;\n      performWorkOnRoot(root, Sync, false);\n    }\n    return;\n  }\n\n  // 如果 isBatchingUpdates 为 false 则执行这里, 相当于 setState 每次调用这里, 就是同步的了\n  if (expirationTime === Sync) {\n    performSyncWork();\n  } else {\n    scheduleCallbackWithExpirationTime(root, expirationTime);\n  }\n}\n```\n\n依赖上下文中 `isBatchingUpdates` 等相关布尔值, 如果 `isBatchingUpdates` 为 `true` 则进行批量更新, 如果 `isBatchingUpdates` 为 `false` 则进行同步更新'}}]);