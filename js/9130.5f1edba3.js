(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9130],{39130:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>i});var r=t(59713),l=t.n(r),o=t(6479),a=t.n(o),p=(t(67294),t(3905));function c(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?c(Object(t),!0).forEach((function(e){l()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var s={};function i(n){var e=n.components,t=a()(n,["components"]);return(0,p.kt)("wrapper",u(u(u({},s),t),{},{components:e,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"title"),(0,p.kt)("p",null,"报数序列是指一个整数序列, 按照其中的整数的顺序进行报数, 得到下一个数。其前五项如下:"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{}),"1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n")),(0,p.kt)("p",null,'1 被读作  "one 1"  ("一个一") , 即 11。\n11 被读作 "two 1s" ("两个一"）, 即 21。\n21 被读作 "one 2",  "one 1" （"一个二" ,  "一个一") , 即 1211。'),(0,p.kt)("p",null,"给定一个正整数 n , 输出报数序列的第 n 项。"),(0,p.kt)("p",null,"注意: 整数顺序将表示为一个字符串。"),(0,p.kt)("p",null,"示例 1:"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{}),'输入: 1\n输出: "1"\n')),(0,p.kt)("p",null,"示例 2:"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{}),'输入: 4\n输出: "1211"\n')),(0,p.kt)("h3",null,"analyze"),(0,p.kt)("p",null,"题目被吐槽啊, 看 ",(0,p.kt)("a",u({parentName:"p"},{href:"https://www.geeksforgeeks.org/look-and-say-sequence/"}),"Look-and-Say Sequence")," 比较容易理解题意。用递归的思路解题。"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"const cacheObj = {1: '1'}\n/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function (n) { // 5\n  if (cacheObj[n]) {\n    return cacheObj[n]\n  } else {\n    const findValue = countAndSay(n - 1) // 1211\n    let str = ''\n    let tmp = 0 // 截断不同数字的下标\n    for (let i = 0; i < findValue.length; i++) {\n      if (findValue[i] !== findValue[i + 1]) {\n        str += i - tmp + 1\n        str += findValue[i]\n        tmp = i + 1\n      }\n    }\n    cacheObj[n] = str\n    return str\n  }\n};\n")))}i.isMDXComponent=!0}}]);