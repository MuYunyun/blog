(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4659],{84659:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>p});var r=t(59713),a=t.n(r),l=t(6479),o=t.n(l),c=(t(67294),t(3905));function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){a()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var u={};function p(n){var e=n.components,t=o()(n,["components"]);return(0,c.kt)("wrapper",i(i(i({},u),t),{},{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h3",null,"单例模式两个条件"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"确保只有一个实例"),(0,c.kt)("li",{parentName:"ul"},"可以全局访问")),(0,c.kt)("h3",null,"适用"),(0,c.kt)("p",null,"适用于弹框的实现, 全局缓存"),(0,c.kt)("h3",null,"实现单例模式"),(0,c.kt)("pre",null,(0,c.kt)("code",i({parentName:"pre"},{className:"language-js"}),"const singleton = function(name) {\n  this.name = name\n  this.instance = null\n}\n\nsingleton.prototype.getName = function() {\n  console.log(this.name)\n}\n\nsingleton.getInstance = function(name) {\n  if (!this.instance) { // 关键语句\n    this.instance = new singleton(name)\n  }\n  return this.instance\n}\n\n// test\nconst a = singleton.getInstance('a') // 通过 getInstance 来获取实例\nconst b = singleton.getInstance('b')\nconsole.log(a === b)\n")),(0,c.kt)("h3",null,"JavaScript 中的单例模式"),(0,c.kt)("p",null,"因为 JavaScript 是无类的语言, 而且 JS 中的全局对象符合单例模式两个条件。很多时候我们把全局对象当成单例模式来使用,"),(0,c.kt)("pre",null,(0,c.kt)("code",i({parentName:"pre"},{className:"language-js"}),"var obj = {}\n")),(0,c.kt)("h3",null,"弹框层的实践"),(0,c.kt)("p",null,"实现弹框的一种做法是先创建好弹框, 然后使之隐藏, 这样子的话会浪费部分不必要的 DOM 开销, 我们可以在需要弹框的时候再进行创建, 同时结合单例模式实现只有一个实例, 从而节省部分 DOM 开销。下列为登入框部分代码:"),(0,c.kt)("pre",null,(0,c.kt)("code",i({parentName:"pre"},{className:"language-js"}),"const createLoginLayer = function() {\n  const div = document.createElement('div')\n  div.innerHTML = '登入浮框'\n  div.style.display = 'none'\n  document.body.appendChild(div)\n  return div\n}\n")),(0,c.kt)("p",null,"使用单例模式将创建弹框代码解耦, 代码如下:"),(0,c.kt)("pre",null,(0,c.kt)("code",i({parentName:"pre"},{className:"language-js"}),"const getSingle = function(fn) {\n  let result\n  return function() {\n    return result || (result = fn.apply(this, arguments))\n  }\n}\n")),(0,c.kt)("pre",null,(0,c.kt)("code",i({parentName:"pre"},{className:"language-js"}),"const createSingleLoginLayer = getSingle(createLoginLayer)\n\ndocument.getElementById('loginBtn').onclick = function() {\n  createSingleLoginLayer()\n}\n")))}p.isMDXComponent=!0}}]);