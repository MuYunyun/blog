(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9057],{39057:n=>{n.exports="[Async function](https://github.com/tc39/proposals/blob/master/finished-proposals.md) 在 2017 年已到达了 stage 4。\n\n### async/await 使用注意点\n\n* 为了不让程序挂掉, 注意捕获错误\n\n写法 1: 用 `try/catch` 捕获\n\n```js\nasync function test1() {\n  try {\n    await Promise.reject(new Error('boom'))\n  } catch(e) {\n    console.log(e)\n  }\n  console.log('go on')\n}\n\ntest1()\n// Error: boom\n// go on\n```\n\n写法 2: 直接在 `await` 后面的 `promise` 上进行 `catch`\n\n```js\nasync function test2() {\n  await Promise.reject(new Error('boom')).catch(e => console.log(e))\n  console.log('go on')\n}\n\ntest2()\n// Error: boom\n// go on\n```\n\n* 使用并行提高程序的运行速度\n\n```js\n// 串行调用示范\nasync function block() {\n  const result1 = await request(url1)\n  const result2 = await request(url2)\n}\n```\n\n在如上案例中, `request(url1)` 请求未完成的话是不会发起 `request(url2)` 请求的(类似串行调用), 若想使之变为并行调用可以作如下修改:\n\n写法 1:\n\n```js\nasync function block() {\n  const promise1 = request(url1)\n  const promise2 = request(url2)\n  const result1 = await promise1\n  const result2 = await promise2\n}\n```\n\n写法 2:\n\n```js\nasync function block() {\n  const [result1, result2] = await Promise.all([request(url1), request(url2)])\n}\n```\n\n### async 函数的实现原理\n\n```js\nasync function fn {}\n```\n\n`async` 函数在低版本浏览器中其实就是转为 `co + Generator`\n\n```js\nfunction fn {\n  return co(function* () {\n\n  })\n}\n```\n\n关于简版 `co`, 可以看在 [Generator 函数的异步应用](https://github.com/MuYunyun/blog/blob/master/BasicSkill/readES6/Generator%E6%9C%AD%E8%AE%B0.md#generator-%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8) 的实现。\n\n### 异步遍历器\n\n> [proposal-async-iteration](https://github.com/tc39/proposal-async-iteration), 异步遍历器也已经到了 stage 4。\n\n#### 异步迭代器\n\n同步场景下可以通过如下获取 `value`、 `done`:\n\n```js\nconst { value, done } = syncIterator.next()\n```\n\n异步场景下可以通过如下方式获取 `value`、 `done`\n\n```js\nasyncIterator.next().then({ value, done } => {})\n```\n\n#### for await .. of\n\n```js\nfor await (const line of readLines(filePath)) {\n  console.log(line)\n}\n```\n\n"}}]);