(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3812],{73812:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>h});var r=t(59713),o=t.n(r),a=t(6479),l=t.n(a),i=(t(67294),t(3905));function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){o()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var s={};function h(e){var n=e.components,t=l()(e,["components"]);return(0,i.kt)("wrapper",p(p(p({},s),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",null,"337. House Robber III"),(0,i.kt)("p",null,"The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root."),(0,i.kt)("p",null,"Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night."),(0,i.kt)("p",null,"Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police."),(0,i.kt)("p",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"           3\n        ↙   ↘\n      2         3\n        ↘        ↘\n          3         1\n\n\n\nInput: root = [3,2,3,null,3,null,1]\nOutput: 7\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n")),(0,i.kt)("p",null,"Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"           3\n        ↙   ↘\n      4         5\n   ↙   ↘        ↘\n 1        3         1\n\nInput: root = [3,4,5,1,3,null,1]\nOutput: 9\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Constraints:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ","[1, 104]","."),(0,i.kt)("li",{parentName:"ul"},"0 <= Node.val <= 104")))),(0,i.kt)("h3",null,"Analyze"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar rob = function(root) {\n\n};\n")))}h.isMDXComponent=!0}}]);