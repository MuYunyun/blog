(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2157],{72157:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var l=n(59713),a=n.n(l),i=n(6479),r=n.n(i),p=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s={};function c(e){var t=e.components,n=r()(e,["components"]);return(0,p.kt)("wrapper",u(u(u({},s),n),{},{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"flex 基本用法"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-css"}),".demo {\n  flex: 1 1 100px;\n}\n")),(0,p.kt)("p",null,"三个值分别为:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"flex-grow"),": 占比, 默认为 0;"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"flex-shrink"),": 缩减比例, 0 为不缩减, 默认为 1;"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"flex-basis"),": flex 基本尺寸, 默认为 auto;")),(0,p.kt)("h3",null,"How to calculate the flex-shrink"),(0,p.kt)("p",null,(0,p.kt)("img",u({parentName:"p"},{src:"http://with.muyunyun.cn/1431bcfc07c05820a123d5716955b860.jpg",alt:null}))),(0,p.kt)("p",null,"The calculate step is a little difficulty, you can see it in the ",(0,p.kt)("a",u({parentName:"p"},{href:"https://stackoverflow.com/questions/36550840/how-to-calculate-flex-shrink-when-flex-items-have-a-different-flex-basis"}),"how-to-calculate-flex-shrink"),"."),(0,p.kt)("h3",null,"justify-content"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"space-around: The spacing between each pair of adjacent items is the same, The empty space before the first and after the last item equals ",(0,p.kt)("inlineCode",{parentName:"li"},"half of the space")," between each pair of adjacent items."),(0,p.kt)("li",{parentName:"ul"},"space-evenly: The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, ",(0,p.kt)("inlineCode",{parentName:"li"},"are all exactly the sam"))),(0,p.kt)("h3",null,"flex 特殊用法"),(0,p.kt)("h4",null,"flex + z-index"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"我们知道 ",(0,p.kt)("inlineCode",{parentName:"li"},"z-index")," 要与定位元素(absolute、relative、absolute、sticky)一起使用, 但使用了 flex 布局后, 尽管仍然是 ",(0,p.kt)("inlineCode",{parentName:"li"},"position: static"),", ",(0,p.kt)("inlineCode",{parentName:"li"},"z-index")," 仍然是生效的。")),(0,p.kt)("h4",null,"flex + margin"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"flex")," 和 ",(0,p.kt)("inlineCode",{parentName:"p"},"margin")," 结合使用能达到垂直居中的妙用。"),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"见 ",(0,p.kt)("a",u({parentName:"p"},{href:"%5B./%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%5D(https://github.com/MuYunyun/blog/blob/master/BasicSkill/css/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.md).md"}),"水平垂直居中"))),(0,p.kt)("p",null,"场景: 右侧图标的导航栏的场景也适用此方式。"),(0,p.kt)("p",null,(0,p.kt)("img",u({parentName:"p"},{src:"http://with.muyunyun.cn/234bae5566a4662a6995ff01191865e3.jpg",alt:null}))),(0,p.kt)("p",null,"方法: 在 flex 布局中, 使用 ",(0,p.kt)("inlineCode",{parentName:"p"},"margin-left: auto"),"。"),(0,p.kt)("h4",null,"flex + height: 100%"),(0,p.kt)("p",null,"在 ios10 以下的 ios 版本中, 在 flex 布局中不推荐与 ",(0,p.kt)("inlineCode",{parentName:"p"},"height: 100%")," 一起连用;"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"原因一: 父元素为 flex 布局, 若父元素不设置 ",(0,p.kt)("inlineCode",{parentName:"li"},"height: 100%"),", 子元素设置 ",(0,p.kt)("inlineCode",{parentName:"li"},"height: 100%")," 是继承不到父元素的高度的;"),(0,p.kt)("li",{parentName:"ul"},"原因二: 父元素为 flex 布局, 即使父元素设置了 ",(0,p.kt)("inlineCode",{parentName:"li"},"height: 100%"),", 子元素使用 ",(0,p.kt)("inlineCode",{parentName:"li"},"height: 100%")," 继承的高度也是有偏差的;")),(0,p.kt)("p",null,"一般使用 ",(0,p.kt)("inlineCode",{parentName:"p"},"flex: 1")," 取代 ",(0,p.kt)("inlineCode",{parentName:"p"},"height: 100%"),", 此外要让父元素的高度传给子元素通常需要配合 ",(0,p.kt)("inlineCode",{parentName:"p"},"flex-direction"),"。使用如下:"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-css"}),".parentDemo {\n  display: flex;\n  flex-direction: column;\n}\n")),(0,p.kt)("h4",null,"Flex 布局中省略号失效"),(0,p.kt)("p",null,"Flex 布局中, 省略号属性是失效的。"),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-css"}),".demo {\n  display: flex;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\n")))}c.isMDXComponent=!0}}]);