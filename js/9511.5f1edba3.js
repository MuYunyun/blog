(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9511],{59511:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),l=t.n(r),a=t(6479),o=t.n(a),p=(t(67294),t(3905));function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var s={};function c(e){var n=e.components,t=o()(e,["components"]);return(0,p.kt)("wrapper",i(i(i({},s),t),{},{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"144.Binary Tree Preorder Traversal"),(0,p.kt)("p",null,"Given a binary tree, return the ",(0,p.kt)("inlineCode",{parentName:"p"},"preorder traversal")," of its nodes' values."),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"Input: [1,null,2,3]\n   1\n  / \\\nnull 2\n    / \\\n   3 null\n\nOutput: [1,2,3]\n")),(0,p.kt)("p",null,"Follow up: Recursive solution is trivial, could you do it ",(0,p.kt)("inlineCode",{parentName:"p"},"iteratively"),"?"),(0,p.kt)("h3",null,"Analyze"),(0,p.kt)("p",null,"构建 tree"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"var tree1 = new TreeNode(1)\nvar tree2 = new TreeNode(2)\nvar tree3 = new TreeNode(3)\ntree2.left = tree3\ntree1.left = null\ntree1.right = tree2\n")),(0,p.kt)("h3",null,"递归法"),(0,p.kt)("p",null,"首先给出递归解法, 代码很简洁。"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n  if (root) {\n    return [root.val, ...preorderTraversal(root.left), ...preorderTraversal(root.right)]\n  } else {\n    return []\n  }\n}\n")),(0,p.kt)("h3",null,"扩展 —— 递归和栈的关系"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"     1\n    / \\\n   2   5\n  / \\\n 3   4\n")),(0,p.kt)("p",null,"针对如图剖析树在先序遍历下的递归操作, 其执行过程如下:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"步骤一: 将根节点 1 推入栈;"),(0,p.kt)("li",{parentName:"ul"},"步骤二: 从栈中取出顶部元素 1 并打印。",(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"由于存在右节点 5, 将其推入栈中;"),(0,p.kt)("li",{parentName:"ul"},"由于存在左节点 2, 将其推入栈中;"))),(0,p.kt)("li",{parentName:"ul"},"步骤三: 从栈中取出顶部元素 2 并打印。",(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"由于存在右节点 4, 将其推入栈中;"),(0,p.kt)("li",{parentName:"ul"},"由于存在左节点 3, 将其推入栈中;"))),(0,p.kt)("li",{parentName:"ul"},"步骤四: 从栈中取出顶部元素 3 并打印。"),(0,p.kt)("li",{parentName:"ul"},"步骤五: 从栈中取出顶部元素 4 并打印。"),(0,p.kt)("li",{parentName:"ul"},"步骤六: 从栈中取出顶部元素 5 并打印。")),(0,p.kt)("p",null,"模拟系统栈实现图解:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"步骤一:\n1\n\n步骤二: 取出 1 并打印;\n2\n5\n\n步骤三: 取出 2 并打印;\n3\n4\n5\n\n步骤四: 取出 3 并打印;\n步骤四: 取出 4 并打印;\n步骤四: 取出 5 并打印;\n")),(0,p.kt)("p",null,"代码实现:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n  const printArr = []\n  const stack = []\n  if (!root) return []\n  stack.push(root)\n  while (stack.length > 0) {\n    const popValue = stack.pop()\n    printArr.push(popValue.val)\n    popValue.right && stack.push(popValue.right)\n    popValue.left && stack.push(popValue.left)\n  }\n  return printArr\n}\n")),(0,p.kt)("h3",null,"颜色标记法(迭代法, 模拟系统栈)"),(0,p.kt)("p",null,"使用",(0,p.kt)("inlineCode",{parentName:"p"},"颜色标记法"),"剖析树在中序遍历下的递归操作, 思路如下:"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"将访问过的元素标记为灰色, 未访问过的元素标记为白色;"),(0,p.kt)("li",{parentName:"ol"},"从栈顶取出访问元素:",(0,p.kt)("ol",{parentName:"li"},(0,p.kt)("li",{parentName:"ol"},"若为灰色元素, 则打印之;"),(0,p.kt)("li",{parentName:"ol"},"若为白色元素, 按照",(0,p.kt)("inlineCode",{parentName:"li"},"右 -> 左 -> 中"),"的顺序推入栈, 同时将白色元素标记为灰色元素;")))),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"推荐使用颜色标记法, 它的解题思路适用于解前序、中序、后序遍历。")),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"     1\n    / \\\n   2   5\n  / \\\n 3   4\n")),(0,p.kt)("p",null,"在如上所示树中, 模拟系统栈图解其执行过程如下:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"gray  1\nwhite 2\nwhite 5\n\nwhite 2\nwhite 5\n\ngray  2\nwhite 3\nwhite 4\nwhite 5\n")),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const stack = []\n  stack.push({\n    color: 'white',\n    node: root\n  })\n\n  while (stack.length > 0) {\n    const pickValue = stack.pop()\n    const { color, node } = pickValue\n    if (color === 'gray') {\n      printArr.push(node.val)\n    } else {\n      node.right && stack.push({ color: 'white', node: node.right })\n      node.left && stack.push({ color: 'white', node: node.left })\n      stack.push({ color: 'gray', node })\n    }\n  }\n\n  return printArr\n}\n")),(0,p.kt)("h3",null,"Sister Title"),(0,p.kt)("p",null,"94、145"))}c.isMDXComponent=!0}}]);