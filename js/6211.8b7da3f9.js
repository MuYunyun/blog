(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6211],{6211:n=>{n.exports="### Roadmap\n\n[roadmap](https://github.com/Microsoft/TypeScript/wiki/Roadmap)\n\n### 3.7\n\n#### Optional Chaining Operator(可选链操作符)\n\nOptional Chaining Operator can help us `reduce some code` when we judge `foo.bar.baz` as follow:\n\n```js\n// Before\nif (foo && foo.bar && foo.bar.baz) {\n  // ...\n}\n\n// After-ish\nif (foo?.bar?.baz) {\n  // ...\n}\n```\n\n`?:`: check in `undefined` and `null`.\n\n```js\nundefined ?: 1 // undefined\nnull ?: 1      // undefined\n0 ?: 1         // 1\n'' ?: 1        // 1\nNaN ?: 1       // 1\n```\n\n> `&&` has different behaviour. Not only `undefined` and `null`, but `falsy value` will be also checked. eg:\n\n```js\nundefined && 1 // undefined\nnull && 1      // null\n0 && 1         // 0\n'' && 1        // ''\nNaN && 1       // NaN\n```\n\n#### Nullish Coalescing Operator(空值合并操作符)\n\n`??` means you can take the value that isn't `undefined` or `null`.\n\n```js\nundefined ?? 1 // 1\nnull ?? 1      // 1\n0 ?? 1         // 0\n'' ?? 1        // ''\n```\n\n> `||` has different behaviour. Not only `undefined` and `null`, but `falsy value` will be also checked. eg:\n\n```js\nundefined || 1 // 1\nnull || 1      // 1\n0 || 1         // 1\n'' || 1        // 1\n```"}}]);