(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7],{90007:e=>{e.exports="### 逆向工程思维\n\n阅读源码可以分三步走:\n\n1. 观察\n2. 假设\n3. 验证\n\n#### 一些技巧\n\n* 使用逆向工程思维阅读源码可以一边在本地看 `source` 代码(结合 IDE 找代码更加快)，一边使用 [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) 的方式调试 demo / 验证猜想;\n* 读源码的时候可以将零星的知识记录下来，最后合成一张思维导图;\n* 有些复杂的递归逻辑可以结合自己的原生知识在需要的位置上进行断点调试;\n* `debugger` 在 `chrome` 上运用 `decorator`, 如下图;\n\n![debugger 在 chrome 上的方法](https://cdn-images-1.medium.com/max/1600/1*h9Uo6Su5-Y1LcVRfox4UqA.jpeg)\n\n### 一些注意\n\n\n\n\n* pr 到 master 分支\n\n* [good-first-issues](https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22good+first+issue%22)\n\n### 代码库概览\n\n> [官网 repo](https://github.com/reactjs/reactjs.org)、[React 依赖的工具库](https://github.com/facebook/fbjs)\n\n#### 根目录\n\n* [packages](https://github.com/facebook/react/tree/master/packages): 核心模块\n* [fixtures](https://github.com/facebook/react/tree/master/fixtures): 一些测试 App\n* build: 开发者本地执行 yarn build 后生成\n\n#### monorepo\n\n* [packages/react](https://github.com/facebook/react/tree/master/packages/react): 包含 React.createElement()、React.component、React.children;\n* [packages/react-dom](https://github.com/facebook/react/tree/master/packages/react-dom): 浏览器端渲染;\n* [packages/events](https://github.com/facebook/react/tree/master/packages/events): 合成事件;\n* [packages/scheduler](https://github.com/facebook/react/tree/master/packages/scheduler): 调度事件;\n* [packages/react-native-renderer](https://github.com/facebook/react/tree/master/packages/react-native-renderer): `React-Native` 端渲染\n* [packages/react-test-renderer](https://github.com/facebook/react/tree/master/packages/react-test-renderer): 用在 `jest` 的 `Snapshot Test` 中;\n* [packages/react-art](https://github.com/facebook/react/tree/master/packages/react-art): `Canvas`, `SVG` 等渲染;\n* [packages/react-reconciler](https://github.com/facebook/react/tree/master/packages/react-reconciler): `Fiber Reconciler` 的实现;\n* [packages/shared](https://github.com/facebook/react/tree/master/packages/shared): 共享工具函数;\n\n> 最为重要的是前 4 块内容。\n\n### React 中的设计原则\n\n* 组合。组件是可以互相组合的函数。\n* 抽象。`React` 只会抽象一些确实对使用者有帮助的特性(比如 `State、LifeCycle`)，而不会抽象一些使用者自己可以实现的功能。`React 团队` 会在 [Big Picture](https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22Type:+Big+Picture%22) 中和大家商榷这些抽象。\n\n### React 项目运行\n\n### React 16 之后的打包方式\n\n* 16 之前是每个文件单独打包在 lib 文件夹下, [15.6.2](https://unpkg.com/react@15.6.2/lib/)\n* 16 版本只暴露两个包在 umd 文件夹下, [16.0.0](https://unpkg.com/react@16.0.0/umd/)\n\n> 打包方式有这个转变的原因是因为之前打成多个包的形式对于打包器来说是低效的(会多出大量胶水代码)。\n\n### 相关资源\n\n* [Level Up Your Reverse Engineering Skills](https://blog.angularindepth.com/level-up-your-reverse-engineering-skills-8f910ae10630): 这篇文章中介绍了逆向工程思维是什么 —— 去探究新知识点，并为之兴奋;\n* [Practical application of reverse-engineering guidelines and principles](https://medium.com/react-in-depth/practical-application-of-reverse-engineering-guidelines-and-principles-784c004bb657): 结合 React 介绍逆向工程思维;\n* [How to Contribute](https://reactjs.org/docs/how-to-contribute.html)\n* [Repository Infrastructure](https://react.docschina.org/blog/2017/12/15/improving-the-repository-infrastructure.html)"}}]);