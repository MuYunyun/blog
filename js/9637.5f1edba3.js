(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9637],{38723:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),l=t.n(r),o=t(6479),i=t.n(o),a=(t(67294),t(3905));function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var u={};function c(e){var n=e.components,t=i()(e,["components"]);return(0,a.kt)("wrapper",s(s(s({},u),t),{},{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",null,"107.Binary Tree Level Order Traversal II"),(0,a.kt)("p",null,"Given a binary tree, return the ",(0,a.kt)("inlineCode",{parentName:"p"},"bottom-up")," level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root)."),(0,a.kt)("p",null,"For example:\nGiven binary tree ","[3,9,20,null,null,15,7]",","),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,a.kt)("p",null,"return its bottom-up level order traversal as:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"[\n  [15,7],\n  [9,20],\n  [3]\n]\n")),(0,a.kt)("h3",null,"Analyze"),(0,a.kt)("p",null,"解析: 该题考察的是",(0,a.kt)("inlineCode",{parentName:"p"},"树的广度遍历(BFS)"),", 运用到了",(0,a.kt)("inlineCode",{parentName:"p"},"队列"),"相关知识;"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrderBottom = function(root) {\n  const printArr = []\n  if (!root) return printArr\n  const list = []\n  list.push({ node: root, level: 0 })\n  while (list.length > 0) {\n    const { node, level } = list.shift()\n    if (!printArr[level]) {\n      printArr.unshift([])\n    }\n    printArr[0].push(node.val)\n    node.left && (list.push({ node: node.left, level: level + 1 }))\n    node.right && (list.push({ node: node.right, level: level + 1 }))\n  }\n  return printArr\n}\n")),(0,a.kt)("h3",null,"Similar Title"),(0,a.kt)("p",null,"102(Sister Title)、103、199"))}c.isMDXComponent=!0}}]);