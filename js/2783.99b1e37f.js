(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2783],{42783:(n,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>c});var r=e(59713),a=e.n(r),l=e(6479),i=e.n(l),u=(e(67294),e(3905));function p(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?p(Object(e),!0).forEach((function(t){a()(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):p(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}var s={};function c(n){var t=n.components,e=i()(n,["components"]);return(0,u.kt)("wrapper",o(o(o({},s),e),{},{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h3",null,"131.Palindrome Partitioning"),(0,u.kt)("p",null,"Given a string s, partition s such that every substring of the partition is a palindrome."),(0,u.kt)("p",null,"Return ",(0,u.kt)("inlineCode",{parentName:"p"},"all possible palindrome partitioning")," of s."),(0,u.kt)("p",null,"Example:"),(0,u.kt)("pre",null,(0,u.kt)("code",o({parentName:"pre"},{className:"language-js"}),'Input: "aab"\nOutput:\n[\n  ["aa","b"],\n  ["a","a","b"]\n]\n')),(0,u.kt)("h3",null,"Analyze"),(0,u.kt)("p",null,"本题为",(0,u.kt)("inlineCode",{parentName:"p"},"回溯法"),"的典型案例。"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"a",(0,u.kt)("ul",{parentName:"li"},(0,u.kt)("li",{parentName:"ul"},"a",(0,u.kt)("ul",{parentName:"li"},(0,u.kt)("li",{parentName:"ul"},"b √"))),(0,u.kt)("li",{parentName:"ul"},"ab"))),(0,u.kt)("li",{parentName:"ul"},"aa",(0,u.kt)("ul",{parentName:"li"},(0,u.kt)("li",{parentName:"ul"},"b   √"))),(0,u.kt)("li",{parentName:"ul"},"aab")),(0,u.kt)("pre",null,(0,u.kt)("code",o({parentName:"pre"},{className:"language-js"}),"/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n  const result = []\n  partitionSub(s, 0, [], result)\n  return result\n};\n\nvar partitionSub = function(s, start, arr, result) {\n  if (arr.join('').length === s.length) {\n    result.push([...arr])\n    return\n  }\n  for (let i = start + 1; i <= s.length; i++) {\n    const curSubString = s.slice(start, i)\n    if (ifPalindrome(curSubString)) {\n      arr.push(curSubString)\n      partitionSub(s, i, arr, result)\n      arr.pop() // key code for back track\n    } else {\n      continue\n    }\n  }\n}\n\n// judge if it's palindrome\nvar ifPalindrome = function(curSubString) {\n  return curSubString === curSubString.split('').reverse().join('')\n}\n")),(0,u.kt)("h3",null,"推荐指数"),(0,u.kt)("p",null,"※※※※※"),(0,u.kt)("h3",null,"相关问题"),(0,u.kt)("p",null,"46"))}c.isMDXComponent=!0}}]);