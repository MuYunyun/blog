(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6798],{86798:n=>{n.exports="### Optimize fibonacci sequence\n\n> 题目: 求斐波那契数列（兔子数列） 1,1,2,3,5,8,13,21,34,55,89...中的第 n 项\n\n斐波那契数列考察的是递归算法, 但是要注意优化哦, 探寻下面优化前后的代码片段\n\n```js\n优化前\n\nlet count1 = 0\nfunction fn(n) {\n  count1++\n  if (n === 1 || n === 2) {\n    return 1\n  }\n  return fn(n - 1) + fn(n - 2)\n}\n\nconsole.log(fn(20), count1) // 6765 13529\n```\n\n```js\n优化后\n\nlet count2 = 0\nfunction fn(n) {\n  const cache = {}\n  function _fn(n) {\n    if (cache[n]) {\n      return cache[n]\n    }\n    count2++\n    if (n === 1 || n === 2) {\n      return 1\n    }\n    cache[n - 1] = _fn(n - 1)\n    cache[n - 2] = _fn(n - 2)\n    return cache[n - 1] + cache[n - 2]\n  }\n  return _fn(n)\n}\n\nconsole.log(fn(20), count2) // 6765 20\n```\n\n小结: 通过创建闭包进行缓存数据, 可以看到大大提高了运行性能。"}}]);