(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2598],{62598:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),u=t.n(r),i=t(6479),o=t.n(i),s=(t(67294),t(3905));function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){u()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var a={};function c(e){var n=e.components,t=o()(e,["components"]);return(0,s.kt)("wrapper",p(p(p({},a),t),{},{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h3",null,"队列"),(0,s.kt)("p",null,"队列的核心是 FIFO, 下面实现一个简单的队列:"),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"function Queue() {\n  this.items = []\n}\n\nQueue.prototype.push = function(item) {\n  this.items.push(item)\n}\n\nQueue.prototype.shift = function() {\n  return this.items.shift()\n}\n\nQueue.prototype.isEmpty = function() {\n  return this.items.length === 0\n}\n\nQueue.prototype.size = function() {\n  return this.items.length\n}\n\nQueue.prototype.clear = function() {\n  this.items = []\n}\n")),(0,s.kt)("h3",null,"队列知识延伸"),(0,s.kt)("p",null,"使用队列的一个典型场景是",(0,s.kt)("inlineCode",{parentName:"p"},"树的广度遍历(BFS)"),", 以下从 leetcode 中摘录了一些题目:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",p({parentName:"li"},{href:"https://github.com/MuYunyun/blog/blob/master/LeetCode/102.Binary_Tree_Level_Order_Traversal/README.md"}),"Binary Tree Level Order Traversal"))),(0,s.kt)("h3",null,"两种特殊队列"),(0,s.kt)("h4",null,"最小优先队列"),(0,s.kt)("p",null,"最小优先队列在生活中的例子: 比如普通用户上医院需要排队挂号, 但是具有 VIP 的用户能'插队'办理业务。用代码实现如下:"),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"// 继承 Queue 类\nconst PriorityQueue = function () {\n  Queue.apply(this)\n}\n\nPriorityQueue.prototype = Object.create(Queue.prototype)\n\nPriorityQueue.prototype.constructor = PriorityQueue\n\n// 修改 push 方法\nPriorityQueue.prototype.push = function(item, level) {\n  if (this.isEmpty()) {\n    this.items.push({ item, level })\n  } else {\n    let add = true\n    for (let i = 0; i < this.size(); i++) {\n      if (level < this.items[i].level) {\n        add = false\n        this.items.splice(i, 0, { item, level })\n        return\n      }\n    }\n    add && this.items.push({ item, level })\n  }\n}\n\nPriorityQueue.prototype.print = function() {\n  for (let obj of this.items) {\n    console.log(obj.item)\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"// 调用\nconst queue = new PriorityQueue()\nqueue.push('张三', 2)\nqueue.push('李四', 1)\nqueue.push('赵五', 1)\nqueue.print() // 李四 赵五 张三\n")),(0,s.kt)("p",null,"可以看到具有相同权限的李四和赵五依旧遵守队列的先进先出原则, 同时排在了张三的前面。"),(0,s.kt)("h4",null,"循环队列"),(0,s.kt)("p",null,"循环队列以击鼓传花为例, 代码实现如下:"),(0,s.kt)("pre",null,(0,s.kt)("code",p({parentName:"pre"},{className:"language-js"}),"const drumGame = function(names, number) {\n  const queue = new Queue()\n  for (let i = 0; i < names.length; i++) {\n    queue.push(names[i])\n  }\n\n  while (queue.size() > 1) {\n    for (let i = 0; i < number; i++) {\n      queue.push(queue.shift())  // 这句是循环队列的核心\n    }\n    const loser = queue.shift()\n    console.log(loser + ' 出局')\n  }\n  return queue.shift()           // 留下的最后一个就是胜利者\n}\n\nconst names = ['John', 'Jack', 'Camila', 'Ingrid', 'Carl']\nconst winner = drumGame(names, 7) // 假设每轮传花 7 次\nconsole.log('胜利者是: ' + winner)\n\n// Camila 出局\n// Jack 出局\n// Carl 出局\n// Ingrid 出局\n// 胜利者是: John\n")))}c.isMDXComponent=!0}}]);