(self.webpackChunkblog=self.webpackChunkblog||[]).push([[571],{30571:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(59713),s=n.n(r),u=n(6479),a=n.n(u),l=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var c={};function i(e){var t=e.components,n=a()(e,["components"]);return(0,l.kt)("wrapper",m(m(m({},c),n),{},{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",null,"title"),(0,l.kt)("p",null,"Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",m({parentName:"pre"},{className:"language-js"}),"Given array nums = [-1, 2, 1, -4], and target = 1.\n\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n")),(0,l.kt)("h3",null,"analyze"),(0,l.kt)("p",null,"1.排序;\n2.有个巧妙的地方, 比较三个数之和与 target 的大小, 具体看题解;"),(0,l.kt)("pre",null,(0,l.kt)("code",m({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumClosest = function (nums, target) {\n  let sum = 0\n  let close = nums[0] + nums[1] + nums[2]\n  let sortedNums = nums.sort((a, b) => a - b)\n\n  for (let i = 0; i < sortedNums.length; i++) {\n    let l = i + 1, r = sortedNums.length - 1\n    while (l < r) {\n      // 分别对应左、中、右三个下标对应的值\n      sum = nums[i] + nums[l] + nums[r]\n      if (Math.abs(sum - target) < Math.abs(close - target)) {\n        close = sum\n      }\n      if (sum < target) {\n        l++\n      } else if (sum > target) {\n        r--\n      } else {\n        return sum\n      }\n    }\n  }\n  return close\n}\n")),(0,l.kt)("h3",null,"Sister Title"),(0,l.kt)("p",null,"1、15、18"))}i.isMDXComponent=!0}}]);