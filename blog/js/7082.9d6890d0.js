(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7082],{97082:n=>{n.exports="### 113. Path Sum II\n\nGiven a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\n\nNote: A leaf is a node with no children.\n\nExample:\n\nGiven the below binary tree and sum = 22,\n\n```js\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\    / \\\n7    2  5   1\n```\n\nReturn:\n\n```js\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n```\n\n### Analyze\n\n思路: 结合 DFS 中的先序遍历将所有解推入数组中。\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number[][]}\n */\nvar pathSum = function(root, sum) {\n  const result = []\n  if (!root) return []\n  analyzeSum(root, '', result, sum)\n  return result.map(val => {\n    return val.split('->')\n  })\n};\n\n/**\n * node: analyze node\n * str: join str using '->', affected by [257.Binary Tree Paths](https://github.com/MuYunyun/blog/blob/master/LeetCode/257.Binary_Tree_Paths.md)\n * result: result array\n * extra: extra sum need to satisfy\n */\nvar analyzeSum = function(node, str, result, extra) {\n  if (!node) return\n  if (!node.left && !node.right && extra === node.val) {\n    str += node.val\n    result.push(str)\n    return\n  }\n\n  str += `${node.val}->`\n\n  analyzeSum(node.left, str, result, extra - node.val)\n  analyzeSum(node.right, str, result, extra - node.val)\n}\n```\n\n### link\n\n* [112](https://github.com/MuYunyun/blog/blob/master/LeetCode/112.Path_Sum.md)\n* [257](https://github.com/MuYunyun/blog/blob/master/LeetCode/257.Binary_Tree_Paths.md)"}}]);