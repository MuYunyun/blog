(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4273],{4273:n=>{n.exports="### 129.Sum Root to Leaf Numbers\n\nGiven a binary tree `containing digits from 0-9 only`, each root-to-leaf path could represent a number.\n\nAn example is the root-to-leaf path 1->2->3 which represents the number 123.\n\nFind the total sum of all root-to-leaf numbers.\n\nNote: A leaf is a node with no children.\n\nExample:\n\n```js\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\n```\n\nExplanation:\n\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n\nExample 2:\n\n```js\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\n\nExplanation:\n\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n```\n\n### Analyze\n\n递归解题\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n  const analyzeObj = { sum: 0 }\n  if (!root) return analyzeObj.sum\n\n  analyzeSum(root, '', analyzeObj)\n  return analyzeObj.sum\n};\n\nvar analyzeSum = function(node, str, analyzeObj) {\n  if (!node) return\n  if (!node.left && !node.right) {\n    str += String(node.val)\n    analyzeObj.sum = analyzeObj.sum + parseInt(str, 10)\n    return\n  }\n\n  str += String(node.val)\n\n  analyzeSum(node.left, str, analyzeObj)\n  analyzeSum(node.right, str, analyzeObj)\n}\n```\n\n### Similar Title\n\n113、257"}}]);