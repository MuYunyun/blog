(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1358],{41358:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>i});var a=t(59713),r=t.n(a),l=t(6479),o=t.n(l),c=(t(67294),t(3905));function p(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?p(Object(t),!0).forEach((function(e){r()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var u={};function i(n){var e=n.components,t=o()(n,["components"]);return(0,c.kt)("wrapper",s(s(s({},u),t),{},{components:e,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",s({parentName:"p"},{href:"https://github.com/MuYunyun/blog/tree/master/BasicSkill/node/koa"}),"项目实现源码")),(0,c.kt)("p",null,"该简版 koa 的实现包含以下 4 个步骤:"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"http 模块的封装"),(0,c.kt)("li",{parentName:"ul"},"整合 Request、Response、Context 对象"),(0,c.kt)("li",{parentName:"ul"},"中间件"),(0,c.kt)("li",{parentName:"ul"},"错误捕获")),(0,c.kt)("h3",null,"http 模块的封装"),(0,c.kt)("p",null,"koa 区别于 express 的一个点是其采用了 ES6 语法进行书写。"),(0,c.kt)("p",null,(0,c.kt)("a",s({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/7bdad6158a6d49bc3a99123a054b0934034cc598/BasicSkill/node/koa/application.js#L17"}),"相关代码")),(0,c.kt)("h3",null,"整合 Request、Response、Context 对象"),(0,c.kt)("p",null,"koa 的用法区别于 express 的一点, 是将 req, res 封装进 ctx 对象中"),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"// express\napp.get('/test/abc', function (req, res) {\n  res.end('hello express')\n})\n\n// koa\napp.use(async (ctx) => {\n  ctx.body = `hello koa`\n})\n")),(0,c.kt)("p",null,(0,c.kt)("a",s({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/7bdad6158a6d49bc3a99123a054b0934034cc598/BasicSkill/node/koa/application.js#L52"}),"相关代码")),(0,c.kt)("h3",null,"中间件"),(0,c.kt)("p",null,"koa2 的中间件是基于 async 实现的, 所以一起来探究关于 async 前置知识点:"),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"async function m1(next) {\n  console.log('m1')\n  await next()\n}\n\nasync function m2(next) {\n  console.log('m2')\n  await next()\n}\n\nasync function m3() {\n  console.log('m3')\n}\n")),(0,c.kt)("p",null,"如何将 m1, m2, m3 串联起来呢？"),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var next1 = async function() {\n  await m2(next2)\n}\n\nvar next2 = async function() {\n  await m3()\n}\n\nm1(next1)\n")),(0,c.kt)("p",null,"接着将以上函数进行抽象:"),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var createAsync = function(fn, next) {\n  return async function() {\n    await fn(next)\n  }\n}\n\nvar next3 = createAsync(m3, null)\nvar next2 = createAsync(m2, next3)\nvar next1 = createAsync(m1, next2)\n\nnext1()\n")),(0,c.kt)("p",null,"再尝试优化:"),(0,c.kt)("pre",null,(0,c.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var arr = [m1, m2, m3]\nvar next\n\nfor (let i = arr.length - 1; i > 0; i--) {\n  next = createAsync(arr[i], next)\n}\n\nnext()\n")),(0,c.kt)("p",null,"在上篇 express 的实现中, ",(0,c.kt)("a",s({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/7bdad6158a6d49bc3a99123a054b0934034cc598/BasicSkill/node/express/index.js#L55"}),"中间件")," 采用了 generator 来实现, 而本篇 koa 则使用了上文所述的 async/await 知识点来完成。"),(0,c.kt)("p",null,(0,c.kt)("a",s({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/7bdad6158a6d49bc3a99123a054b0934034cc598/BasicSkill/node/koa/application.js#L25"}),"相关代码")),(0,c.kt)("h3",null,"错误捕获"),(0,c.kt)("p",null,"此外完善的框架都有相应的错误捕获机制, 因此当程序 ",(0,c.kt)("inlineCode",{parentName:"p"},"throw new Error()")," 抛错时, 也进行了相应的错误捕获, ",(0,c.kt)("a",s({parentName:"p"},{href:"https://github.com/MuYunyun/blog/blob/7bdad6158a6d49bc3a99123a054b0934034cc598/BasicSkill/node/koa/application.js#L70"}),"相关代码")))}i.isMDXComponent=!0}}]);