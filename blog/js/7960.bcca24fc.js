(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7960],{27960:n=>{n.exports="### Delete Node in a Linked List\n\nWrite a function to delete a node (except the tail) in a singly linked list, given only access to that node.\n\nExample 1:\n\n```js\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\n```\n\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n\nExample 2:\n\n```js\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\n```\n\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n\nNote:\n\n* The linked list will have `at least two elements`.\n* All of the nodes' values will be unique.\n* The given node will `not be the tail` and it will always be a valid node of the linked list.\n* `Do not return anything from your function`.\n\n### Analyze\n\n相较于 [203.Remove_Linked_List_Elements](https://github.com/MuYunyun/blog/blob/master/BasicSkill/LeetCode/203.Remove_Linked_List_Elements/README.md), 此题一个点是在函数中不能返回任何值, 因此不能引入 dummyHead。另外一个点是没有传入 head 指针, 所以没法拿到当前要删除的上个节点。\n\n```js\n4 -> 5 -> 1 -> 9 -> null\n          .\n          .\n          node\n4 -> 5 -> 9 -> 9 -> null\n          .\n          .\n4 -> 5 -> 9 -> null\n```\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} node\n * @return {void} Do not return anything, modify node in-place instead.\n */\nvar deleteNode = function(node) {\n  node.val = node.next.val\n  node.next = node.next.next\n}\n```\n\n### 姊妹题\n\n203"}}]);