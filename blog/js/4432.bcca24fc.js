(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4432],{94432:e=>{e.exports="```js\nconst http = require('http')\nconst EventEmitter = require('events')\nconst context = require('./context')\nconst request = require('./request')\nconst response = require('./response')\n\nclass Koa extends EventEmitter {\n  constructor() {\n    super()\n    this.middlewares = []\n    this.context = context\n    this.request = request\n    this.response = response\n  }\n\n  listen(...args) {\n    http.createServer(this.callback()).listen(...args)\n  }\n\n  use(fn) {\n    this.middlewares.push(fn)\n  }\n\n  // 引人中间件\n  compose(ctx) {\n    const createAsync = function (fn, next) {\n      return async function () {\n        await fn(ctx, next)\n      }\n    }\n    let next = async function() { // 返回 Promise 对象, 从而进行后文 fn.then().catch() 调用\n      return Promise.resolve()\n    }\n\n    for (let i = this.middlewares.length - 1; i >= 0; i--) {\n      next = createAsync(this.middlewares[i], next)\n    }\n\n    return next()\n  }\n\n  callback() {\n    return (req, res) => {\n      const ctx = this.createCtx(req, res)\n      const handle = () => this.handleRes(ctx)\n      const errHandle = (err) => this.handleErr(err, ctx)\n      const fn = this.compose(ctx)\n      fn.then(handle).catch(errHandle)\n    }\n  }\n\n  // 将 req,  res 封装进 ctx 对象中\n  createCtx(req, res) {\n    const ctx = Object.create(this.context)\n    ctx.request = Object.create(this.request)\n    ctx.response = Object.create(this.response)\n    ctx.req = ctx.request.req = req\n    ctx.res = ctx.response.res = res\n    return ctx\n  }\n\n  handleRes(ctx) {\n    if (typeof(ctx.body) === 'string') {\n      ctx.statusCode && ctx.res.writeHead(ctx.statusCode)\n      ctx.res.end(ctx.body)\n    } else if (typeof(ctx.body) === 'object') {\n      ctx.statusCode && ctx.res.writeHead(ctx.statusCode)\n      ctx.res.end(JSON.stringify(ctx.body))\n    }\n  }\n\n  // 引人错误机制\n  handleErr(err, ctx) {\n    if (err.code === 'ENOENT') {\n      ctx.statusCode = 404\n    } else {\n      ctx.statusCode = 500\n    }\n    const msg = err.message || 'Internal Error'\n    ctx.res.end(msg)\n    this.emit('error', err)\n  }\n}\n\nmodule.exports = Koa\n```"}}]);