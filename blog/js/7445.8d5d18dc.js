(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7445],{47445:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),l=t.n(r),i=t(6479),o=t.n(i),p=(t(67294),t(3905));function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){l()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var u={};function c(e){var n=e.components,t=o()(e,["components"]);return(0,p.kt)("wrapper",a(a(a({},u),t),{},{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"199.Binary Tree Right Side View"),(0,p.kt)("p",null,"Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered ",(0,p.kt)("inlineCode",{parentName:"p"},"from top to bottom"),"."),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",a({parentName:"pre"},{className:"language-js"}),"Input: [1, 2, 3, null, 5, null, 4]\nOutput: [1, 3, 4]\n")),(0,p.kt)("p",null,"Explanation:"),(0,p.kt)("p",null,"   1            <---\n/   \\\n2     3         <---\n\\     \\\n5     4       <---"),(0,p.kt)("h3",null,"Analyze"),(0,p.kt)("p",null,"将题目表述转化下为: 展示当前行的最右侧元素即可; 该题考察的是",(0,p.kt)("inlineCode",{parentName:"p"},"树的广度遍历(BFS)"),", 运用到了",(0,p.kt)("inlineCode",{parentName:"p"},"队列"),"相关知识。"),(0,p.kt)("pre",null,(0,p.kt)("code",a({parentName:"pre"},{className:"language-js"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar rightSideView = function(root) {\n  const printList = []\n  if (!root) { return [] }\n  const list = []\n  list.push({ level: 0, node: root })\n\n  while(list.length > 0) {\n    const { level, node } = list.shift()\n    if (!printList[level]) {\n      printList[level] = []\n    }\n    printList[level].push(node.val)\n\n    node.left && list.push({ level: level + 1, node: node.left })\n    node.right && list.push({ level: level + 1, node: node.right })\n  }\n\n  const result = []\n  printList.map(printListArr => {\n    result.push(printListArr[printListArr.length - 1])\n  })\n  return result\n}\n")),(0,p.kt)("h3",null,"Similar Title"),(0,p.kt)("p",null,"102(Sister Title)、107、103"))}c.isMDXComponent=!0}}]);