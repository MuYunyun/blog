(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3533],{63533:n=>{n.exports="### 236.Lowest Common Ancestor of a Binary Search Tree\n\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\n\nExample 1:\n\n```js\n       3\n     /   \\\n    5      1\n   / \\    / \\\n  6   2  0   8\n     / \\\n    7   4\n```\n\n```js\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\n```\n\nExplanation: The LCA of nodes 5 and 1 is 3.\n\nExample 2:\n\n```js\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\n```\n\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n\nExample 3:\n\n```js\n    1\n  /\n 2\n```\n\n```js\nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n```\n\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 105].\n-109 <= Node.val <= 109\n`All Node.val are unique`.\n`p != q`\n`p and q will exist in the tree`.\n\n### Analyze\n\n* Using `post-order traversal` of birnary tree in recursive.\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n  return lca(root, p, q)\n};\n\nvar lca = function(node, p, q) {\n  if (!node) return null\n  // node is the lowest common ancestor of p and q.\n  if (node.val === p.val || node.val === q.val) return node\n\n  const leftLca = lca(node.left, p, q)\n  const rightLca = lca(node.right, p, q)\n\n  // get value of post-order traversal\n  if (!leftLca) {\n    return rightLca\n  }\n  if (!rightLca) {\n    return leftLca\n  }\n  return node\n}\n```"}}]);