(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5911],{95911:n=>{n.exports="### title\n\n编写一个算法来判断一个数是不是“快乐数”。\n\n一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它`每个位置上的数字的平方和`，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。\n\n示例: \n\n```js\n输入: 19\n输出: true\n解释:\n1^2 + 9^2 = 82\n8^2 + 2^2 = 68\n6^2 + 8^2 = 100\n1^2 + 0^2 + 0^2 = 1\n```\n\n### 题解\n\n* 使用`字典 Map` 来记录循环过程中各个位置上的数字的平方和\n  * 若平方和的值为 1, 则跳出循环, 这个数是快乐数;\n  * 若平方和的值不为 1, 则判断字典 Map 中是否已有该值;\n    * 若字典 Map 中已有该值, 则这个数不是快乐数;\n\n```js\n/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n  const mapResult = new Map()\n\n  let currentSum = getSum(n)\n  while (currentSum !== 1) {\n    const getMapResult = mapResult.get(currentSum)\n    if (!getMapResult) {\n      mapResult.set(currentSum, 1)\n    } else {\n      return false\n    }\n    currentSum = getSum(currentSum)\n  }\n  return true\n}\n\n/* 获取数字各个位数之和 */\nvar getSum = function(num) {\n  let sum = 0\n  const numStr = String(num)\n  for (let i = 0; i < numStr.length; i++) {\n    sum = sum + Math.pow(numStr[i], 2)\n  }\n  return sum\n}\n```\n\n### 相关题目\n\n205、242、290、349、350、451"}}]);