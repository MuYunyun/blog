(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3345],{23345:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>b});var r=n(59713),o=n.n(r),a=n(6479),p=n.n(a),l=(n(67294),n(3905));function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var u={};function b(e){var t=e.components,n=p()(e,["components"]);return(0,l.kt)("wrapper",i(i(i({},u),n),{},{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",null,"Reflect"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Reflect")," 是 ",(0,l.kt)("inlineCode",{parentName:"p"},"ES6")," 新引人的特性, 其目的是把一些 ",(0,l.kt)("inlineCode",{parentName:"p"},"JavaScript")," 特有的属性 ",(0,l.kt)("inlineCode",{parentName:"p"},"api")," 抽离出来。其有如下优点:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"返回值更加合理")),(0,l.kt)("pre",null,(0,l.kt)("code",i({parentName:"pre"},{className:"language-js"}),"var obj = {}\n\n// 在 obj 中定义 a 属性\nObject.defineProperty(obj, 'a', {\n  value: 2\n})\n\n// 使用 Object.defineProperty 在 obj 中重复定义 a 属性就会抛错\ntry {\n  Object.defineProperty(obj, 'a', { value: 3 })\n} catch(e) {\n  console.log(e) // Uncaught TypeError: Cannot redefine property: a\n}\n\n// 使用 Reflect.defineProperty 在 obj 中重复定义 a 属性则是返回 false\nif (Reflect.defineProperty(obj, 'a', { value: 3 })) {\n  console.log('属性添加成功')\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"将一些对象属性的操作判断统一为函数操作。")),(0,l.kt)("p",null,"比如 ",(0,l.kt)("inlineCode",{parentName:"p"},"props in Obj")," 现在可写成 ",(0,l.kt)("inlineCode",{parentName:"p"},"Reflect.has(Obj, props)"),", 又比如 ",(0,l.kt)("inlineCode",{parentName:"p"},"delete Obj[props]")," 现在可写成 ",(0,l.kt)("inlineCode",{parentName:"p"},"Reflect.deleteProperty(Obj, props)")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"与 ",(0,l.kt)("a",i({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler#Methods"}),"Proxy Handler")," 方法参数同步")))}b.isMDXComponent=!0}}]);