(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5383],{55383:n=>{n.exports="### router 的简易实现\n\n### 基于 hash 的实现\n\n以下为 `hashChange` 的简版实现\n\n```js\nclass Router {\n  constructor() {\n    this.router = {}\n    window.addEventListener('hashchange', (e) => {\n      const tag = location.hash.slice(1)\n      this.router[tag] && this.router[tag]()\n    })\n  }\n\n  route(path, fn) {\n    this.router[path] = fn\n  }\n}\n\nconst router = new Router()\nconst changeColor = (color) => {\n  document.body.style.background = color\n}\nrouter.route('red', () => { changeColor('red') })\nrouter.route('yellow', () => { changeColor('yellow') })\nrouter.route('blue', () => { changeColor('blue') })\n```\n\n```html\n<ul>\n  <a href=\"#red\">red</a>\n  <a href=\"#yellow\">yellow</a>\n  <a href=\"#blue\">blue</a>\n</ul>\n```\n\n### 基于 history 的实现\n\n> 以下代码需要运行在 http 端口。\n\n```js\nclass Router {\n  constructor() {\n    this.router = {}\n    window.addEventListener('popstate', (e) => {\n      const path = e.state.path\n      this.router[path] && this.router[path]()\n    })\n  }\n\n  route(path, fn) {\n    this.router[path] = fn\n  }\n\n  go(path) {\n    history.pushState({ path: path }, null, path) // 核心思路, pushState 进去的第一个对象会在点击回退/前进按钮时触发 popstate\n    this.router[path] && this.router[path]()\n  }\n}\n\nconst router = new Router()\nconst changeColor = (color) => {\n  document.body.style.background = color\n}\nrouter.route('red', () => { changeColor('red') })\nrouter.route('yellow', () => { changeColor('yellow') })\nrouter.route('blue', () => { changeColor('blue') })\ndocument.getElementsByTagName('ul')[0].addEventListener('click', (e) => {\n  router.go(e.target.innerText)\n})\n```\n\n```html\n<ul>\n  <li href=\"red\">red</li>\n  <li href=\"yellow\">yellow</li>\n  <li href=\"blue\">blue</li>\n</ul>\n```\n\n### 路由的监听\n\n* hash 路由\n\nwindow.addEventListener('hashchange')\n\n* history 路由\n\n### 参考\n\n[面试官: 你了解前端路由吗?](https://juejin.im/post/5ac61da66fb9a028c71eae1b)"}}]);