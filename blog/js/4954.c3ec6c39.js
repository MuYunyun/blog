(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4954],{34954:n=>{n.exports="### 重构改善既有代码的设计\n\n本文是重构改善既有代码的设计阅读笔记\n\n### 重构与性能优化\n\n* 重构: 目标是更易理解;(面向人)\n* 性能优化: 目标是使程序运行更快;(面向机器)\n\n### 重构的好处\n\n1. 帮助快速找到 bug\n2. 提高编程速度\n\n### 重构手段\n\n#### 提炼函数(Extract Function)\n\n背景: 一整段函数不利于阅读;\n方式: 按语义进行重构, 将不利于阅读的函数其拆分成小份, 并给它们取上恰当的名字以便于阅读;\n\n#### 内联函数(Inline Function)\n\n背景: 函数拆得太细, 和提炼函数相反的一种重构手段;\n方式: 可以逐行替换;\n\n#### 函数重命名\n\n当希望修改的函数名存在大量使用时, 可以采用渐进式的做法(旧代码调用旧函数, 旧函数调用新函数)对函数重命名:\n\n```js\nfunction circum(radius) {\n  return 2 * Math.PI * radius\n}\n```\n\n```js\nfunction circum(radius) {\n  return circumference(radius)\n}\n\nfunction circumference(radius) {\n  return 2 * Math.PI * radius\n}\n```\n\n> 如何给一个 function 起好名字: 先给 function 写一段注释, 再把该注释压缩为函数的名字。\n\n#### 统一访问原则\n\n```js\nclass Test {\n  a() {\n    return 'a'\n  }\n\n  get b() {\n    return 'b'\n  }\n}\n\nvar test = new Test()\n\ntest.a() // 'a'\ntest.b   // 'b'\n```\n\n推崇 `get` 的写法, 用户调用该类的时候无需关系是字段还是推演计算的值。\n\n当前阅读到: 拆分阶段。\n"}}]);