(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4436],{94436:n=>{n.exports="### 143.Reorder List\n\nGiven a singly linked list L: L0 → L1 → .. → Ln-1 → Ln,\nreorder it to: L0 → Ln → L1 → Ln-1 → L2 → Ln-2 →\n\nYou may `not modify the values in the list's nodes`, only nodes itself may be changed.\n\nExample 1:\n\n```js\nGiven 1->2->3->4, reorder it to 1->4->2->3.\n```\n\nExample 2:\n\n```js\nGiven 1->2->3->4->5, reorder it to 1->5->2->4->3.\n```\n\n### Analyze\n\n这道题可作如下转化:\n\n1. 步骤一: 找到链表中点后分割其为 left 链表、right 链表两部分;\n2. 步骤二: 翻转 right 链表, 翻转链表思路同 [206.Reverse_Linked_List](https://github.com/MuYunyun/blog/blob/master/LeetCode/206.Reverse_Linked_List/README.md);\n3. 步骤三: 接着从 left 链表的左侧, 翻转后的 right 链表的左侧各取一个值进行交替拼接;\n\n> 快慢指针即 quick 指针每次走两步, slow 指针每次走一步, 同 [148.Sort_List](https://github.com/MuYunyun/blog/blob/master/LeetCode/148.Sort_List/README.md)\n\n```js\n                   s               q\ndummy -> 1 -> 2 -> 3 -> 4 -> 5 -> NULL\n\n步骤一: 拆分 head 链表成 `left`、`right` 两个链表;\n\nl\n1 -> 2 -> 3 -> null\n\nr\n4 -> 5 -> NULL\n\n步骤二: 翻转 right 链表\n\nl\n1 -> 2 -> 3 -> null\n\nr\n5 -> 4 -> NULL\n\n步骤三: 衔接 left、right 两个链表;\n\n          l\n1 -> 5 -> 2 -> 3 -> NULL\n\nr\n4 -> NULL\n```\n\n步骤二中翻转链表的图解大致如下:\n\n```js\n cur  next\n  1 -> 2 -> 3 -> null\n\n       prev cur\nnull <- 1 <- 2 -> 3 -> null\n\n            prev cur\nnull <- 1 <- 2 <- 3 -> null\n\n                 prev\nnull <- 1 <- 2 <- 3 -> null\n```\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {void} Do not return anything, modify head in-place instead.\n */\nvar reorderList = function(head) {\n  const dummy = new ListNode(0)\n  dummy.next = head\n\n  let slow = dummy\n  let quick = dummy\n\n  while (quick && quick.next) {\n    slow = slow.next\n    quick = quick.next\n    quick = quick.next\n  }\n\n  let right = slow.next\n  slow.next = null\n  let left = dummy.next\n\n  right = reverseList(right)\n\n  while (left && right) {\n    let lNext = left.next\n    let rNext = right.next\n    right.next = left.next\n    left.next = right\n    left = lNext\n    right = rNext\n  }\n\n  return dummy.next\n}\n\nvar reverseList = (list) => {\n  let prev = null\n  let cur = list\n\n  while (cur) {\n    let next = cur.next\n    cur.next = prev\n\n    prev = cur\n    cur = next\n  }\n\n  return prev\n}\n```\n\n![](http://with.muyunyun.cn/3f207867435faf3edeeb4e9d2f5f5b29.jpg)\n\n### Similar Title\n\n148(快慢指针)、234"}}]);