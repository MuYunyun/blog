(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6940],{46940:n=>{n.exports="### 22.Generate Parentheses\n\n给出 n 代表生成括号的对数, 请你写出一个函数, 使其能够生成所有可能的并且有效的括号组合。\n\n例如, 给出 n = 3, 生成结果为:\n\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n\n### analyze\n\n回溯法:\n\n思路: 标记可使用的左括号和右括号数量, 中断条件为左右可使用括号数都为 0\n\n* 若可使用的左括号的数量等于可使用的右括号的数量, 则加 '(';\n* 若可使用的左括号的数量为 0, 则加 ')';\n* 若可使用的左括号的数量小于可使用的右括号的数量, 则可以加 '(' 又可以加 ')'\n\n```js\n/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const result = []\n  let str = ''\n  function judege(left, right, str) {\n    if (left === 0 && right === 0) {\n      result.push(str)\n      str = ''\n      return\n    }\n\n    if (left === right) {\n      judege(left - 1, right, str + '(')\n    } else if (left === 0) {\n      judege(left, right - 1, str + ')')\n    } else {\n      judege(left - 1, right, str + '(')\n      judege(left, right - 1, str + ')')\n    }\n  }\n\n  judege(n, n, str)\n  return result\n};\n```"}}]);