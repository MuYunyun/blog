(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1626],{11626:n=>{n.exports="### 文档\n\n比如 textArea 组件距离需要看两份文档。\n\n1. [taro textArea](http://taro-docs.jd.com/taro/docs/components/forms/textarea.html)\n2. [微信小程序文档 textArea](https://developers.weixin.qq.com/miniprogram/dev/component/textarea.html)\n\n### 关于 textArea 的坑点\n\n1. 原生的组件永远的层级永远大于非原生组件的层级\n2. [textArea 在 iphone 手机中存在内边距](https://segmentfault.com/a/1190000017086890)\n\n目前一种方案是对 textArea 组件进行了相应封装, 展示的时候显示为自定义组件, 输入的时候使用原生 textArea.\n\n`basicTextArea.js`\n\n```js\nimport Taro, { Component } from '@tarojs/taro'\nimport { Textarea, View } from '@tarojs/components'\nimport cx from 'classnames'\nimport './index.scss'\n\ninterface BasicTextAreaProps {\n  onChange: (...arg) => void\n  onFocus: (...arg) => void\n  onBlur: (...arg) => void\n  placeholder?: string\n  maxlength?: number\n  value: string\n  focus: boolean\n}\n\nconst noop = () => {}\n\nexport default class BasicTextArea extends Component<BasicTextAreaProps, any> {\n  static defaultProps: BasicTextAreaProps = {\n    onChange: noop,\n    onFocus: noop,\n    onBlur: noop,\n    placeholder: '',\n    maxlength: -1,\n    value: '',\n    focus: false\n  }\n\n  handleInput = (...arg) => this.props.onChange(...arg)\n\n  handleFocus = (...arg) => this.props.onFocus(...arg)\n\n  handleBlur = (...arg) => this.props.onBlur(...arg)\n\n  render() {\n    const { platform } = Taro.getSystemInfoSync()\n    const { value, focus, placeholder, maxlength } = this.props\n    return (\n      <View\n        className={cx({\n          textarea_ios: platform === 'ios',\n          'textarea_android-placeholder': platform === 'android' && !value\n        })}\n      >\n        <Textarea\n          className={cx('textarea_text')}\n          value={value}\n          onInput={this.handleInput}\n          focus={focus}\n          onBlur={this.handleBlur}\n          placeholder={placeholder}\n          maxlength={maxlength}\n        />\n      </View>\n    )\n  }\n}\n```\n\n`textArea.ts`, 切换相应组件的代码主要在这里进行处理。\n\n```js\nimport Taro, { Component } from '@tarojs/taro'\nimport { View, Text, ScrollView } from '@tarojs/components'\nimport cx from 'classnames'\nimport BasicTextArea from './basicTextArea'\nimport './index.scss'\n\ninterface TextAreaProps {\n  placeholder?: string\n  maxlength?: number\n  onChange: (e: {detail: {value: string}}) => void\n  value: string\n}\n\nexport default class TextArea extends Component<TextAreaProps, any> {\n  static defaultProps: Pick<TextAreaProps, 'placeholder' | 'maxlength'> = {\n    placeholder: '',\n    maxlength: -1,\n  }\n\n  state = {\n    isFocus: false,\n  }\n\n  handleChange(e) {\n    const { onChange } = this.props\n    onChange(e)\n  }\n\n  // 处理原生 textArea 失焦/聚焦\n  bindTextareaHandle(type: string) {\n    if (type == 'blur') {\n      this.setState({\n        isFocus: false,\n      })\n    } else if (type == 'focus') {\n      this.setState({\n        isFocus: true,\n      })\n    }\n  }\n\n  render() {\n    const { isFocus } = this.state\n    const { placeholder, maxlength, value } = this.props\n    const { platform } = Taro.getSystemInfoSync()\n    return (\n      <View>\n        {this.state.isFocus ?\n          <View className='textarea_content'>\n            <BasicTextArea\n              value={value}\n              onChange={this.handleChange.bind(this)}\n              focus={isFocus}\n              onBlur={this.bindTextareaHandle.bind(this, 'blur')}\n              maxlength={maxlength}\n              placeholder={placeholder}\n            />\n          </View> :\n          <View\n            onClick={this.bindTextareaHandle.bind(this, 'focus')}\n          >\n            <ScrollView\n              scrollY={true}\n              className={'textarea_content'}\n            >\n              <Text className={cx('textarea_text', {\n                'textarea_text-placeholder': !value,\n                'textarea_text-ios': platform === 'ios',\n              })}>{value ? value : placeholder}</Text>\n            </ScrollView>\n          </View>\n        }\n      </View>\n    )\n  }\n}\n```\n\n`index.scss`\n\n```css\n.textarea_content {\n  width: 100%;\n  height: 192px;\n  padding-top: 24px;\n  padding-bottom: 24px;\n  font-size: 32px;\n  line-height: 48px;\n  border-radius: 16px;\n  background-color: #FFF;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  position: relative;\n}\n\n.textarea_text {\n  word-break: break-all;\n  width: 100%;\n  font-size: 32px;\n  line-height: 48px;\n  -webkit-appearance: none;\n  height: 144px;\n  overflow: scroll;\n\n  &-placeholder {\n    color: #999;\n    /* 模拟光标占位 */\n    padding-left: 2px;\n  }\n\n  &-ios {\n    /* 尽可能模拟原生 textArea 的字间距 */\n    letter-spacing: 0.1px;\n  }\n}\n\n/*微信原生 textarea placeholder 颜色, 误删 */\n.textarea-placeholder {\n  color: #999;\n  font-size: 32px;\n}\n\n/* 修复 ios 下有 padding 的问题 */\n.textarea_ios {\n  margin-top: -12px;\n  margin-left: -8px;\n}\n\n/* 安卓手机上的 placeholder 会偏上, 但是目前这解法会有一个影响用户的动画 */\n.textarea_android-placeholder {\n  margin-top: 8px;\n}\n```"}}]);