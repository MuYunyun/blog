(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4664],{94664:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>s});var t=r(59713),a=r.n(t),o=r(6479),l=r.n(o),d=(r(67294),r(3905));function i(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function u(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a()(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}var m={};function s(n){var e=n.components,r=l()(n,["components"]);return(0,d.kt)("wrapper",u(u(u({},m),r),{},{components:e,mdxType:"MDXLayout"}),(0,d.kt)("h3",null,"130. Surrounded Regions"),(0,d.kt)("p",null,"Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'."),(0,d.kt)("p",null,"A region is captured by flipping all 'O's into 'X's in that surrounded region."),(0,d.kt)("p",null,"Example:"),(0,d.kt)("p",null,"[","['X', 'X', 'X', 'X']",", ","['X', 'O', 'O', 'X']",", ","['X', 'X', 'O', 'X']",", ","['X', 'O', 'X', 'X']","]"),(0,d.kt)("pre",null,(0,d.kt)("code",u({parentName:"pre"},{className:"language-js"}),"X X X X\nX O O X\nX X O X\nX O X X\n")),(0,d.kt)("pre",null,(0,d.kt)("code",u({parentName:"pre"},{className:"language-js"}),"X X X X\nX O O X\nX X O X\nX - X X\n")),(0,d.kt)("p",null,"After running your function, the board should be:"),(0,d.kt)("pre",null,(0,d.kt)("code",u({parentName:"pre"},{className:"language-js"}),"X X X X\nX X X X\nX X X X\nX O X X\n")),(0,d.kt)("p",null,"Explanation:"),(0,d.kt)("p",null,(0,d.kt)("inlineCode",{parentName:"p"},"Surrounded regions shouldn’t be on the border"),", which means that any 'O' on the border of the board are not flipped to 'X'. ",(0,d.kt)("inlineCode",{parentName:"p"},"Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'"),". Two cells are connected if they are adjacent cells connected horizontally or vertically."),(0,d.kt)("p",null,"Example:"),(0,d.kt)("p",null,"var test = [",'["O","O","O"]',",",'["O","O","O"]',",",'["O","O","O"]',"]"),(0,d.kt)("pre",null,(0,d.kt)("code",u({parentName:"pre"},{className:"language-js"}),"O O O\nO O O\nO O O\n")),(0,d.kt)("p",null,"After running your function, the board should be:"),(0,d.kt)("pre",null,(0,d.kt)("code",u({parentName:"pre"},{className:"language-js"}),"O O O\nO O O\nO O O\n")),(0,d.kt)("h3",null,"Analyze"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"分析终止迭代(不合法)的条件",(0,d.kt)("ol",{parentName:"li"},(0,d.kt)("li",{parentName:"ol"},"m, n 坐标已经使用过;"),(0,d.kt)("li",{parentName:"ol"},"m, n 坐标位于边界而且 board","[m][n]"," 为 'O'"),(0,d.kt)("li",{parentName:"ol"},"board","[m][n]"," 为 'X'")))),(0,d.kt)("pre",null,(0,d.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n  const used = []\n  for (let m = 0; m < board.length; m++) {\n    for (let n = 0; n < board[m].length; n++) {\n      if (used.indexOf(`${m},${n}`) === -1) {\n        recursive(board, m, n, used)\n      }\n    }\n  }\n  return board\n};\n\nvar direction = [[1, 0], [0, 1], [-1, 0], [0, -1]] // 下、右、上、左\n\n// m: row; n: column\nvar isValid = (board, m, n, used) => {\n  if (!board[m] || !board[m][n]) return false\n  const notUsed = used.indexOf(`${m},${n}`) === -1\n  used.push(`${m},${n}`)\n  return notUsed\n}\n\n// judge if it is in board\nvar isInBorder = (board, m, n) => m === 0 || n === 0 || m === board.length - 1 || n === board[0].length - 1\n\nvar recursive = function(board, m, n, used) {\n  // end condition.\n  if (!isValid(board, m, n, used) || (isInBorder(board, m, n) && board[m][n] === 'O') || board[m][n] === 'X') {\n    return false\n  }\n  for (let i = 0; i < direction.length; i++) {\n    const tag = recursive(board, m + direction[i][0], n + direction[i][1], used)\n    // recursive to set value\n    if (tag && board[m][n] === 'O') {\n      board[m][n] = 'X'\n    }\n    // 若不在边界的坐标 m,n 四周的值都不合理, 且 borad[m][n] === 'O', 则要让 board[m][n] = 'X'\n    // todo: board[m][n - 1] === 'O'\n    if (i === 3 && !isInBorder(board, m, n) && board[m][n] === 'O') {\n      board[m][n] = 'X'\n    }\n  }\n  return true\n}\n")),(0,d.kt)("p",null,"「若不在边界的坐标 m,n 四周的值都不合理, 且 borad","[m][n]"," === 'O', 则要让 board","[m][n]"," = 'X'」, 这个条件在如下测试用例面前是过不去的砍👀"),(0,d.kt)("pre",null,(0,d.kt)("code",u({parentName:"pre"},{}),"O O O\nO O O\nO O O\n")),(0,d.kt)("p",null,"观察评论区调整了下思路:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},"将边界的 O 以及与其相连的 O 标记为 ",(0,d.kt)("inlineCode",{parentName:"li"},"_"),"。"),(0,d.kt)("li",{parentName:"ol"},"遍历节点",(0,d.kt)("ol",{parentName:"li"},(0,d.kt)("li",{parentName:"ol"},"将剩余的 O 全部替换为 X。"),(0,d.kt)("li",{parentName:"ol"},"将全部的 _ 替换为 O。")))),(0,d.kt)("blockquote",null,(0,d.kt)("p",{parentName:"blockquote"},"点子比行动更重要！")),(0,d.kt)("pre",null,(0,d.kt)("code",u({parentName:"pre"},{className:"language-js"}),"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n  const used = []\n  for (let m = 0; m < board.length; m++) {\n    for (let n = 0; n < board[m].length; n++) {\n      if (isInBorder(m, n, board) && board[m][n] === 'O') {\n        replaceWith_(board, m, n, used)\n      }\n    }\n  }\n\n  for (let m = 0; m < board.length; m++) {\n    for (let n = 0; n < board[m].length; n++) {\n      if (board[m][n] === 'O') {\n        board[m][n] = 'X'\n      }\n      if (board[m][n] === '_') {\n        board[m][n] = 'O'\n      }\n    }\n  }\n  return board\n};\n\n// judge if it is in board\nvar isInBorder = (m, n, board) => m === 0 || n === 0 || m === board.length - 1 || n === board[0].length - 1\n\nvar isValid = (board, m, n, used) => {\n  if (!board[m] || !board[m][n]) return false\n  const notUsed = used.indexOf(`${m},${n}`) === -1\n  used.push(`${m},${n}`)\n  return notUsed\n}\n\nvar direction = [[1, 0], [0, 1], [-1, 0], [0, -1]] // 下、右、上、左\n\nvar replaceWith_ = (board, m, n, used) => {\n  if (!isValid(board, m, n, used) || board[m][n] === 'X') return\n  if (board[m][n] === 'O') {\n    board[m][n] = '_'\n  }\n\n  for (let i = 0; i < direction.length; i++) {\n    replaceWith_(board, m + direction[i][0], n + direction[i][1], used)\n  }\n}\n")),(0,d.kt)("h3",null,"Sister Title"),(0,d.kt)("p",null,"79、200"))}s.isMDXComponent=!0}}]);