(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7550],{57550:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var r=t(59713),a=t.n(r),l=t(6479),i=t.n(l),o=(t(67294),t(3905));function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){a()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var s={};function c(e){var n=e.components,t=i()(e,["components"]);return(0,o.kt)("wrapper",u(u(u({},s),t),{},{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",null,"Types vs Interfaces"),(0,o.kt)("h3",null,"相同点"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"两者都可用来表达 ",(0,o.kt)("inlineCode",{parentName:"li"},"Objects / Functions"),", 不过它们语法不同。")),(0,o.kt)("p",null,"Interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"interface Point0 {\n  x: number;\n  y: number;\n}\n\ninterface SetPoint0 {\n  (x: number, y: number): void\n}\n")),(0,o.kt)("p",null,"Type:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type Point1 = {\n  x: number;\n  y: number;\n}\n\ntype SetPoint1 = (x: number, b: number) => void\n")),(0,o.kt)("ol",u({},{start:2}),(0,o.kt)("li",{parentName:"ol"},"两者都可以继承自 Interface 或者 Type。")),(0,o.kt)("p",null,"继承自 Interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"interface PartialPointX0 { x: number }\ninterface Point extends PartialPointX0 { y: number }\n\ninterface PartialPointX3 { x: number }\ntype PointX1 = PartialPointX3 & { y: number }\n")),(0,o.kt)("p",null,"继承自 Type:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"type PartialPointX1 = { x: number }\ntype PointX1 = PartialPointX1 & { y: number }\n\ntype PartialPointX2 = { x: number }\ninterface Point extends PartialPointX2 { y: number }\n")),(0,o.kt)("h3",null,"不同点"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Type 可用来定义声明 ",(0,o.kt)("inlineCode",{parentName:"li"},"primitives"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"unions")," 以及 ",(0,o.kt)("inlineCode",{parentName:"li"},"tuples")," 类型。")),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"// primitive\ntype Name = string;\n\n// union\ntype Point = string | number\n\n// tuple\ntype Data = [string, number]\n")),(0,o.kt)("ol",u({},{start:2}),(0,o.kt)("li",{parentName:"ol"},"Interface 可声明多次, 多次声明的类型会进行合并。Type 则只能声明一次。")),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"interface Point { x: number }\ninterface Point { y: number }\n\nconst point: Point = { x: 1, y: 2 }\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",u({parentName:"p"},{href:"https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/52682220#52682220"}),"Types_vs_Interfaces"))))}c.isMDXComponent=!0}}]);