(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7686],{57686:n=>{n.exports="### 47.Permutations_II\n\nGiven a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n\nExample 1:\n\n```js\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n```\n\nExample 2:\n\n```js\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n```\n\nConstraints:\n* 1 <= nums.length <= 8\n* -10 <= nums[i] <= 10\n\n### analyze\n\n[1 1 2]\n\n* 1\n  * 1\n    * 2\n  * 2\n    * 1\n* 1 (jump, 该位置上 1 已经在之前被使用过了, 因此需跳过)\n* 2\n  * 1\n    * 1\n  * 1 (jump)\n\n思路: 回溯法解排列问题。\n\n需要注意此题允许 nums 里面存有相同的数字。在此引入 `used` 数组来存储回溯过程中已使用的值。\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function (nums) {\n  const res = []\n  backtracking(nums, [], [], res)\n  return res\n};\n\nvar backtracking = function(nums, used, temp, res) {\n  if (temp.length === nums.length) {\n    for (let i = 0; i < res.length; i++) {\n      // a digit appears only once.\n      if (res[i].toString() === temp.toString()) return\n    }\n    res.push([...temp])\n    return\n  }\n\n  for (let i = 0; i < nums.length; i++) {\n    // jump same used index.\n    if (used.indexOf(i) > -1) continue\n    temp.push(nums[i])\n    used.push(i)\n    backtracking(nums, used, temp, res)\n    temp.pop(nums[i])\n    used.pop(i)\n  }\n}\n```\n\n上述解法在去重的步骤上比较耗时, 提交的时候报超时错误, 进行如下优化:\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function (nums) {\n  const res = []\n  const sortNums = nums.sort((r1, r2) => r1 - r2)\n  backtracking(sortNums, [], [], res)\n  return res\n};\n\nvar backtracking = function(nums, used, temp, res) {\n  if (temp.length === nums.length) {\n    res.push([...temp])\n    return\n  }\n\n  for (let i = 0; i < nums.length; i++) {\n    // 如果当前下标被使用过或者当前下标对应的值已经在之前被使用过了, 则跳过。\n    if (used.indexOf(i) > -1 || (nums[i] === nums[i - 1] && used.indexOf(i - 1) === -1)) continue\n    temp.push(nums[i])\n    used.push(i)\n    backtracking(nums, used, temp, res)\n    temp.pop(nums[i])\n    used.pop(i)\n  }\n}\n```"}}]);