(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2488],{42488:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>s});var a=t(59713),r=t.n(a),l=t(6479),i=t.n(l),p=(t(67294),t(3905));function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var m={};function s(e){var n=e.components,t=i()(e,["components"]);return(0,p.kt)("wrapper",u(u(u({},m),t),{},{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"path 模块"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"path.basename(path[, ext])"),": 返回文件名。")),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"path.basename('/foo/bar/baz/asdf/quux.html')\n// Returns: 'quux.html'\n\npath.basename('/foo/bar/baz/asdf/quux.html', '.html')\n// Returns: 'quux'\n")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"path.dirname(path)"),": 返回路径地址。")),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"path.dirname('/foo/bar/baz/asdf/quux')\n// Returns: '/foo/bar/baz/asdf'\n")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"path.exename(path)"),": 如果最后一个 ",(0,p.kt)("inlineCode",{parentName:"li"},".")," 之前若有字符, 则返回 ",(0,p.kt)("inlineCode",{parentName:"li"},".")," 和后面的字符, 否则返回 ''。")),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"path.extname('index.html')\n// Returns: '.html'\n\npath.extname('index.coffee.md')\n// Returns: '.md'\n\npath.extname('index.')\n// Returns: '.'\n\npath.extname('index')\n// Returns: ''\n\npath.extname('.index')\n// Returns: ''\n\npath.extname('.index.md')\n// Returns: '.md'\n")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"path.join()"),": 将传入的参数进行合并。")),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')\n// Returns: '/foo/bar/baz/asdf'\n")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"path.resolve()"),": 返回绝对路径(绝对路径以 ",(0,p.kt)("inlineCode",{parentName:"li"},"/")," 开头), 注意该 api 遵循",(0,p.kt)("inlineCode",{parentName:"li"},"从右向左最小匹配"),"原则。")),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"path.resolve('/foo', '/bar', 'baz')\n// 根据从右向左匹配原则, /bar 与 baz 组成了绝对路径, 所以返回的结果是 /bar/baz\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif');\n// If the current working directory is /home/myself/node,\n// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'\n")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"path.relative(from, to)"),": 返回相对路径, 其为 ",(0,p.kt)("inlineCode",{parentName:"li"},"to 路径"),"相对 ",(0,p.kt)("inlineCode",{parentName:"li"},"from 路径"),"的差值。")),(0,p.kt)("pre",null,(0,p.kt)("code",u({parentName:"pre"},{className:"language-js"}),"path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')\n// Returns: '../../impl/bbb'\n")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"path.normalize"),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"使用场景: 兼容跨平台路径")))))}s.isMDXComponent=!0}}]);