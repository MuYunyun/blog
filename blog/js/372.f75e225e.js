(self.webpackChunkblog=self.webpackChunkblog||[]).push([[372],{372:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>m});var a=t(59713),r=t.n(a),l=t(6479),o=t.n(l),p=(t(67294),t(3905));function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var u={};function m(e){var n=e.components,t=o()(e,["components"]);return(0,p.kt)("wrapper",i(i(i({},u),t),{},{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h3",null,"Code Spliting"),(0,p.kt)("p",null,"在 16.6 版本之前，",(0,p.kt)("inlineCode",{parentName:"p"},"code-spliting")," 通常是由第三方库来完成的，比如 ",(0,p.kt)("a",i({parentName:"p"},{href:"https://github.com/jamiebuilds/react-loadable"}),"react-loadble"),"(核心思路为: 高阶组件 + webpack dynamic import), 在 16.6 版本中提供了 ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 和 ",(0,p.kt)("inlineCode",{parentName:"p"},"lazy")," 这两个钩子, 因此在之后的版本中便可以使用其来实现 ",(0,p.kt)("inlineCode",{parentName:"p"},"Code Spliting"),"。"),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"目前阶段, 服务端渲染中的 ",(0,p.kt)("inlineCode",{parentName:"p"},"code-spliting")," 还是得使用 ",(0,p.kt)("inlineCode",{parentName:"p"},"react-loadable"),", 可查阅 ",(0,p.kt)("a",i({parentName:"p"},{href:"https://reactjs.org/docs/code-splitting.html#reactlazy"}),"React.lazy"),", 暂时先不探讨原因。")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"Code Spliting")," 在 ",(0,p.kt)("inlineCode",{parentName:"p"},"React")," 中的使用方法是在 ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 组件中使用 ",(0,p.kt)("inlineCode",{parentName:"p"},"<LazyComponent>")," 组件:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),'import { Suspense, lazy } from \'react\'\n\nconst DemoA = lazy(() => import(\'./demo/a\'))\nconst DemoB = lazy(() => import(\'./demo/b\'))\n\n<Suspense>\n  <NavLink to="/demoA">DemoA</NavLink>\n  <NavLink to="/demoB">DemoB</NavLink>\n\n  <Router>\n    <DemoA path="/demoA" />\n    <DemoB path="/demoB" />\n  </Router>\n</Suspense>\n')),(0,p.kt)("p",null,"源码中 ",(0,p.kt)("inlineCode",{parentName:"p"},"lazy")," 将传入的参数封装成一个 ",(0,p.kt)("inlineCode",{parentName:"p"},"LazyComponent")),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"function lazy(ctor) {\n  return {\n    $$typeof: REACT_LAZY_TYPE, // 相关类型\n    _ctor: ctor,\n    _status: -1,   // dynamic import 的状态\n    _result: null, // 存放加载文件的资源\n  };\n}\n")),(0,p.kt)("p",null,"观察 ",(0,p.kt)("a",i({parentName:"p"},{href:"https://github.com/MuYunyun/react/blob/29b7b775f2ecf878eaf605be959d959030598b07/packages/react-reconciler/src/ReactFiberLazyComponent.js#L30-L87"}),"readLazyComponentType")," 后可以发现 ",(0,p.kt)("inlineCode",{parentName:"p"},"dynamic import")," 本身类似 ",(0,p.kt)("inlineCode",{parentName:"p"},"Promise")," 的执行机制, 也具有 ",(0,p.kt)("inlineCode",{parentName:"p"},"Pending"),"、",(0,p.kt)("inlineCode",{parentName:"p"},"Resolved"),"、",(0,p.kt)("inlineCode",{parentName:"p"},"Rejected")," 三种状态, 这就比较好理解为什么 ",(0,p.kt)("inlineCode",{parentName:"p"},"LazyComponent")," 组件需要放在 ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 中执行了(",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 中提供了相关的捕获机制, 下文会进行模拟实现`), 相关源码如下:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"function readLazyComponentType(lazyComponent) {\n  const status = lazyComponent._status;\n  const result = lazyComponent._result;\n  switch (status) {\n    case Resolved: { // Resolve 时，呈现相应资源\n      const Component = result;\n      return Component;\n    }\n    case Rejected: { // Rejected 时，throw 相应 error\n      const error = result;\n      throw error;\n    }\n    case Pending: {  // Pending 时, throw 相应 thenable\n      const thenable = result;\n      throw thenable;\n    }\n    default: { // 第一次执行走这里\n      lazyComponent._status = Pending;\n      const ctor = lazyComponent._ctor;\n      const thenable = ctor(); // 可以看到和 Promise 类似的机制\n      thenable.then(\n        moduleObject => {\n          if (lazyComponent._status === Pending) {\n            const defaultExport = moduleObject.default;\n            lazyComponent._status = Resolved;\n            lazyComponent._result = defaultExport;\n          }\n        },\n        error => {\n          if (lazyComponent._status === Pending) {\n            lazyComponent._status = Rejected;\n            lazyComponent._result = error;\n          }\n        },\n      );\n      // Handle synchronous thenables.\n      switch (lazyComponent._status) {\n        case Resolved:\n          return lazyComponent._result;\n        case Rejected:\n          throw lazyComponent._result;\n      }\n      lazyComponent._result = thenable;\n      throw thenable;\n    }\n  }\n}\n")),(0,p.kt)("h3",null,"Async Data Fetching"),(0,p.kt)("p",null,"为了解决获取的数据在不同时刻进行展现的问题(在 ",(0,p.kt)("a",i({parentName:"p"},{href:"https://github.com/demos-platform/suspenseDemo"}),"suspenseDemo")," 中有相应演示), ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 给出了解决方案。"),(0,p.kt)("p",null,"下面放两段代码，可以从中直观地感受在 ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 中使用 ",(0,p.kt)("inlineCode",{parentName:"p"},"Async Data Fetching")," 带来的便利。"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"一般进行数据获取的代码如下:")),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"export default class Demo extends Component {\n  state = {\n    data: null,\n  };\n\n  componentDidMount() {\n    fetchAPI(`/api/demo/${this.props.id}`).then((data) => {\n      this.setState({ data });\n    });\n  }\n\n  render() {\n    const { data } = this.state;\n\n    if (data == null) {\n      return <Spinner />;\n    }\n\n    const { name } = data;\n\n    return (\n      <div>{name}</div>\n    );\n  }\n}\n")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"在 ",(0,p.kt)("inlineCode",{parentName:"li"},"Suspense")," 中进行数据获取的代码如下:")),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"const resource = unstable_createResource((id) => {\n  return fetchAPI(`/api/demo`)\n})\n\nfunction Demo {\n  const data = resource.read(this.props.id)\n\n  const { name } = data;\n\n  return (\n    <div>{name}</div>\n  );\n}\n")),(0,p.kt)("p",null,"可以看到在 ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 中进行数据获取的代码量相比正常的进行数据获取的代码少了将近一半！少了哪些地方呢?"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"减少了 ",(0,p.kt)("inlineCode",{parentName:"li"},"loading")," 状态的维护(在最外层的 Suspense 中统一维护子组件的 loading)"),(0,p.kt)("li",{parentName:"ul"},"减少了不必要的生命周期的书写")),(0,p.kt)("h3",null,"总结: 如何在 Suspense 中使用 Data Fetching"),(0,p.kt)("p",null,"当前 ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 的使用分为三个部分:"),(0,p.kt)("p",null,"第一步: 用 ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspens")," 组件包裹子组件"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"import { Suspense } from 'react'\n\n<Suspense fallback={<Loading />}>\n  <ChildComponent>\n</Suspense>\n")),(0,p.kt)("p",null,"第二步: 在子组件中使用 ",(0,p.kt)("inlineCode",{parentName:"p"},"unstable_createResource"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"import { unstable_createResource } from 'react-cache'\n\nconst resource = unstable_createResource((id) => {\n  return fetch(`/demo/${id}`)\n})\n")),(0,p.kt)("p",null,"第三步: 在 ",(0,p.kt)("inlineCode",{parentName:"p"},"Component")," 中使用第一步创建的 ",(0,p.kt)("inlineCode",{parentName:"p"},"resource"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"const data = resource.read('demo')\n")),(0,p.kt)("h3",null,"相关思路解读"),(0,p.kt)("p",null,"来看下源码中 ",(0,p.kt)("inlineCode",{parentName:"p"},"unstable_createResource")," 的部分会比较清晰:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"export function unstable_createResource(fetch, maybeHashInput) {\n  const resource = {\n    read(input) {\n      ...\n      const result = accessResult(resource, fetch, input, key);\n      switch (result.status) {\n        case Pending: {\n          const suspender = result.value;\n          throw suspender;\n        }\n        case Resolved: {\n          const value = result.value;\n          return value;\n        }\n        case Rejected: {\n          const error = result.value;\n          throw error;\n        }\n        default:\n          // Should be unreachable\n          return (undefined: any);\n      }\n    },\n  };\n  return resource;\n}\n")),(0,p.kt)("p",null,"结合该部分源码, 进行如下推测:"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"第一次请求没有缓存, 子组件 ",(0,p.kt)("inlineCode",{parentName:"li"},"throw")," 一个 ",(0,p.kt)("inlineCode",{parentName:"li"},"thenable")," 对象, ",(0,p.kt)("inlineCode",{parentName:"li"},"Suspense")," 组件内的 ",(0,p.kt)("inlineCode",{parentName:"li"},"componentDidCatch")," 捕获之, 此时展示 ",(0,p.kt)("inlineCode",{parentName:"li"},"Loading")," 组件;"),(0,p.kt)("li",{parentName:"ol"},"当 ",(0,p.kt)("inlineCode",{parentName:"li"},"Promise")," 态的对象变为完成态后, 页面刷新此时 ",(0,p.kt)("inlineCode",{parentName:"li"},"resource.read()")," 获取到相应完成态的值;"),(0,p.kt)("li",{parentName:"ol"},"之后如果相同参数的请求, 则走 ",(0,p.kt)("inlineCode",{parentName:"li"},"LRU")," 缓存算法, 跳过 ",(0,p.kt)("inlineCode",{parentName:"li"},"Loading")," 组件返回结果(缓存算法见后记);")),(0,p.kt)("p",null,"官方作者是说法如下:"),(0,p.kt)("p",null,(0,p.kt)("img",i({parentName:"p"},{src:"http://with.muyunyun.cn/22849313e0b8b19e833df9a9a59a8546.jpg-400",alt:null}))),(0,p.kt)("p",null,"所以说法大致相同, 下面实现一个简单版的 ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-jsx"}),"class Suspense extends React.Component {\n  state = {\n    promise: null\n  }\n\n  componentDidCatch(e) {\n    if (e instanceof Promise) {\n      this.setState({\n        promise: e\n      }, () => {\n        e.then(() => {\n          this.setState({\n            promise: null\n          })\n        })\n      })\n    }\n  }\n\n  render() {\n    const { fallback, children } = this.props\n    const { promise } = this.state\n    return <>\n      { promise ? fallback : children }\n    </>\n  }\n}\n")),(0,p.kt)("p",null,"进行如下调用"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-jsx"}),'<Suspense fallback={<div>loading...</div>}>\n  <PromiseThrower />\n</Suspense>\n\nlet cache = "";\nlet returnData = cache;\nconst fetch = () =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve("数据加载完毕");\n    }, 2000);\n  });\n\nclass PromiseThrower extends React.Component {\n  getData = () => {\n    const getData = fetch();\n\n    getData.then(data => {\n      returnData = data;\n    });\n    if (returnData === cache) {\n      throw getData;\n    }\n    return returnData;\n  };\n\n  render() {\n    return <>{this.getData()}</>;\n  }\n}\n')),(0,p.kt)("p",null,(0,p.kt)("img",i({parentName:"p"},{src:"http://with.muyunyun.cn/90586c1edf33c7d143f2a3ec59667ab4.gif",alt:null}))),(0,p.kt)("p",null,"效果调试可以点击",(0,p.kt)("a",i({parentName:"p"},{href:"https://codesandbox.io/s/1zy82mm0j4"}),"这里"),", 在 ",(0,p.kt)("inlineCode",{parentName:"p"},"16.6")," 版本之后, ",(0,p.kt)("inlineCode",{parentName:"p"},"componentDidCatch")," 只能捕获 ",(0,p.kt)("inlineCode",{parentName:"p"},"commit phase")," 的异常。所以在 ",(0,p.kt)("inlineCode",{parentName:"p"},"16.6")," 版本之后实现的 ",(0,p.kt)("inlineCode",{parentName:"p"},"<PromiseThrower>")," 又有一些差异(即将 ",(0,p.kt)("inlineCode",{parentName:"p"},"throw thenable")," 移到 ",(0,p.kt)("inlineCode",{parentName:"p"},"componentDidMount")," 中进行)。"),(0,p.kt)("h3",null,"ConcurrentMode + Suspense"),(0,p.kt)("p",null,"当网速足够快, 数据立马就获取到了，此时页面存在的 ",(0,p.kt)("inlineCode",{parentName:"p"},"Loading")," 按钮就显得有些多余了。(在 ",(0,p.kt)("a",i({parentName:"p"},{href:"https://github.com/demos-platform/suspenseDemo"}),"suspenseDemo")," 中有相应演示), ",(0,p.kt)("inlineCode",{parentName:"p"},"Suspense")," 在 ",(0,p.kt)("inlineCode",{parentName:"p"},"Concurrent Mode")," 下给出了相应的解决方案, 其提供了 ",(0,p.kt)("inlineCode",{parentName:"p"},"maxDuration")," 参数。用法如下:"),(0,p.kt)("pre",null,(0,p.kt)("code",i({parentName:"pre"},{className:"language-js"}),"<Suspense maxDuration={500} fallback={<Loading />}>\n  ...\n</Suspense>\n")),(0,p.kt)("p",null,"该 Demo 的效果为当获取数据的时间大于(是否包含等于还没确认) 500 毫秒, 显示自定义的 ",(0,p.kt)("inlineCode",{parentName:"p"},"<Loading />")," 组件, 当获取数据的时间小于 500 毫秒, 略过 ",(0,p.kt)("inlineCode",{parentName:"p"},"<Loading>")," 组件直接展示用户的数据。",(0,p.kt)("a",i({parentName:"p"},{href:"https://github.com/MuYunyun/react/blob/29b7b775f2ecf878eaf605be959d959030598b07/packages/react-reconciler/src/ReactFiberUnwindWork.js#L232-L242"}),"相关源码"),"。"),(0,p.kt)("p",null,"需要注意的是 ",(0,p.kt)("inlineCode",{parentName:"p"},"maxDuration")," 属性只有在 ",(0,p.kt)("inlineCode",{parentName:"p"},"Concurrent Mode")," 下才生效, 可参考",(0,p.kt)("a",i({parentName:"p"},{href:"https://github.com/MuYunyun/react/blob/29b7b775f2ecf878eaf605be959d959030598b07/packages/react-reconciler/src/ReactFiberUnwindWork.js#L270-L277"}),"源码中的注释"),"。在 Sync 模式下, ",(0,p.kt)("inlineCode",{parentName:"p"},"maxDuration")," 始终为 0。"),(0,p.kt)("h3",null,"后记: 缓存算法"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"LRU")," 算法: ",(0,p.kt)("inlineCode",{parentName:"li"},"Least Recently Used")," 最近最少使用算法(根据时间);"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"LFU")," 算法: ",(0,p.kt)("inlineCode",{parentName:"li"},"Least Frequently Used")," 最近最少使用算法(根据次数);")),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},(0,p.kt)("a",i({parentName:"p"},{href:"https://juejin.im/post/5c0392656fb9a049fb4366fa"}),"漫画：什么是 LRU 算法"))),(0,p.kt)("p",null,"若数据的长度限定是 ",(0,p.kt)("inlineCode",{parentName:"p"},"3"),", 访问顺序为 ",(0,p.kt)("inlineCode",{parentName:"p"},"set(2,2),set(1,1),get(2),get(1),get(2),set(3,3),set(4,4)"),", 则根据 ",(0,p.kt)("inlineCode",{parentName:"p"},"LRU")," 算法删除的是 ",(0,p.kt)("inlineCode",{parentName:"p"},"(1, 1)"),", 根据 ",(0,p.kt)("inlineCode",{parentName:"p"},"LFU")," 算法删除的是 ",(0,p.kt)("inlineCode",{parentName:"p"},"(3, 3)"),"。"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"react-cache")," 采用的是 ",(0,p.kt)("inlineCode",{parentName:"p"},"LRU")," 算法。"),(0,p.kt)("h3",null,"相关资料"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",i({parentName:"li"},{href:"https://github.com/demos-platform/suspenseDemo"}),"suspenseDemo"),": 文字相关案例都集成在该 demo 中"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",i({parentName:"li"},{href:"https://github.com/facebook/react/issues/13206"}),"Releasing Suspense"),": ",(0,p.kt)("inlineCode",{parentName:"li"},"Suspense")," 开发进度"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",i({parentName:"li"},{href:"https://medium.com/@ryanflorence/the-suspense-is-killing-redux-e888f9692430"}),"the suspense is killing redux"))))}m.isMDXComponent=!0}}]);