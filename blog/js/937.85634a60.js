(self.webpackChunkblog=self.webpackChunkblog||[]).push([[937],{937:n=>{n.exports="### 题目\n\n给定一个数组 nums 和一个值 val, `你需要原地移除所有数值等于 val 的元素, 返回移除后数组的新长度`。\n\n不要使用额外的数组空间, 你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n示例 1:\n\n```js\n给定 nums = [3,2,2,3], val = 3,\n\n函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n示例 2:\n\n```js\n给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n\n函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n\n注意这五个元素可为任意顺序。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n### 解题\n\n解法一: 一般思路\n\n```js\n/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */\nvar removeElement = function (nums, val) {\n  let place\n  while (~nums.indexOf(val)) {\n    place = nums.indexOf(val)\n    nums.splice(place, 1)\n  }\n  return nums.length\n}\n```\n\n解法二: 双指针\n\n![](http://with.muyunyun.cn/e4ea67e0bdbf4af9ee3ad2a0ede55571.jpg)\n\n```js\n/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */\nvar removeElement = function (nums, val) {\n  let cur = 0\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== val) {\n      nums[cur] = nums[i]\n      cur++\n    }\n  }\n  return cur\n}\n```\n\n### 同类题目\n\n26、80、283。"}}]);