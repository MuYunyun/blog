(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6836],{26836:n=>{n.exports='### 题目: 反转字符串\n\n编写一个函数，其作用是将输入的`字符串反转过来`。输入字符串以字符数组 char[] 的形式给出。\n\n`不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题`。\n\n你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。\n\n示例 1：\n\n```js\n输入：["h","e","l","l","o"]\n输出：["o","l","l","e","h"]\n```\n\n示例 2：\n\n```js\n输入：["H","a","n","n","a","h"]\n输出：["h","a","n","n","a","H"]\n```\n\n### 解题\n\n方法一: 使用数组的 `reverse` 方法。\n\n```js\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    s.reverse()\n}\n```\n\n方法二: `指针碰撞`\n\n```js\n/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n  let left = 0, right = s.length - 1\n\n  while (left <= right) {\n    swap(s, left, right)\n    left++\n    right--\n  }\n}\n\n/* 交换位置\n  nums 数组, a, b 为下标\n*/\nvar swap = function(nums, a, b) {\n  const tmp = nums[a]\n  nums[a] = nums[b]\n  nums[b] = tmp\n}\n```\n\n### 相似问题\n\n125、167、345'}}]);