(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3933],{93933:n=>{n.exports="### 命令模式\n\n命令模式与[策略模式](https://github.com/MuYunyun/blog/blob/master/Basic%20Skill/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.md)有些类似, 在 JavaScript 中它们都是隐式的。\n\n重要性: 较低\n\n### JavaScript 中的命令模式\n\n命令模式在 JavaScript 中也比较简单, 下面代码中对`按钮`和`命令`进行了抽离, 因此可以复杂项目中可以使用命令模式将界面的代码和功能的代码交付给不同的人去写。\n\n```js\nconst setCommand = function(button, command) {\n  button.onClick = function() {\n    command.excute()\n  }\n}\n\n// --------------------  上面的界面逻辑由A完成, 下面的由B完成\n\nconst menu = {\n  updateMenu: function() {\n    console.log('更新菜单')\n  },\n}\n\nconst UpdateCommand = function(receive) {\n  return {\n    excute: receive.updateMenu,\n  }\n}\n\nconst updateCommand = UpdateCommand(menu) // 创建命令\n\nconst button1 = document.getElementById('button1')\nsetCommand(button1, updateCommand)\n```"}}]);