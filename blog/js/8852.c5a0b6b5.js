(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8852],{48852:n=>{n.exports="### 职责链模式\n\n职责链模式: 类似多米诺骨牌, 通过请求第一个条件, 会持续执行后续的条件, 直到返回结果为止。\n\n![](http://with.muyunyun.cn/cbc8c10bbae202bcd243f6b0704de3ba.jpg-300)\n\n重要性: 4 星, 在项目中能对 if-else 语句进行优化\n\n### 场景 demo\n\n场景: 某电商针对已付过定金的用户有优惠政策, 在正式购买后, 已经支付过 500 元定金的用户会收到 100 元的优惠券, 200 元定金的用户可以收到 50 元优惠券, 没有支付过定金的用户只能正常购买。\n\n```js\n// orderType: 表示订单类型, 1: 500 元定金用户；2: 200 元定金用户；3: 普通购买用户\n// pay: 表示用户是否已经支付定金, true: 已支付；false: 未支付\n// stock: 表示当前用于普通购买的手机库存数量, 已支付过定金的用户不受此限制\n\nconst order = function( orderType, pay, stock ) {\n  if ( orderType === 1 ) {\n    if ( pay === true ) {\n      console.log('500 元定金预购, 得到 100 元优惠券')\n    } else {\n      if (stock > 0) {\n        console.log('普通购买, 无优惠券')\n      } else {\n        console.log('库存不够, 无法购买')\n      }\n    }\n  } else if ( orderType === 2 ) {\n    if ( pay === true ) {\n      console.log('200 元定金预购, 得到 50 元优惠券')\n    } else {\n      if (stock > 0) {\n        console.log('普通购买, 无优惠券')\n      } else {\n        console.log('库存不够, 无法购买')\n      }\n    }\n  } else if ( orderType === 3 ) {\n    if (stock > 0) {\n        console.log('普通购买, 无优惠券')\n    } else {\n      console.log('库存不够, 无法购买')\n    }\n  }\n}\n\norder( 3, true, 500 ) // 普通购买, 无优惠券\n```\n\n下面用职责链模式改造代码:\n\n```js\nconst order500 = function(orderType, pay, stock) {\n  if ( orderType === 1 && pay === true ) {\n    console.log('500 元定金预购, 得到 100 元优惠券')\n  } else {\n    order200(orderType, pay, stock)\n  }\n}\n\nconst order200 = function(orderType, pay, stock) {\n  if ( orderType === 2 && pay === true ) {\n    console.log('200 元定金预购, 得到 50 元优惠券')\n  } else {\n    orderCommon(orderType, pay, stock)\n  }\n}\n\nconst orderCommon = function(orderType, pay, stock) {\n  if ((orderType === 3 || !pay) && stock > 0) {\n    console.log('普通购买, 无优惠券')\n  } else {\n    console.log('库存不够, 无法购买')\n  }\n}\n\norder500( 3, true, 500 ) // 普通购买, 无优惠券\n```\n\n改造后可以发现代码相对清晰了, 但是链路代码和业务代码依然耦合在一起, 进一步优化:\n\n```js\n// 业务代码\nconst order500 = function(orderType, pay, stock) {\n  if ( orderType === 1 && pay === true ) {\n    console.log('500 元定金预购, 得到 100 元优惠券')\n  } else {\n    return 'nextSuccess'\n  }\n}\n\nconst order200 = function(orderType, pay, stock) {\n  if ( orderType === 2 && pay === true ) {\n    console.log('200 元定金预购, 得到 50 元优惠券')\n  } else {\n    return 'nextSuccess'\n  }\n}\n\nconst orderCommon = function(orderType, pay, stock) {\n  if ((orderType === 3 || !pay) && stock > 0) {\n    console.log('普通购买, 无优惠券')\n  } else {\n    console.log('库存不够, 无法购买')\n  }\n}\n\n// 链路代码\nconst chain = function(fn) {\n  this.fn = fn\n  this.sucessor = null\n}\n\nchain.prototype.setNext = function(sucessor) {\n  this.sucessor = sucessor\n}\n\nchain.prototype.init = function() {\n  const result = this.fn.apply(this, arguments)\n  if (result === 'nextSuccess') {\n    this.sucessor.init.apply(this.sucessor, arguments)\n  }\n}\n\nconst order500New = new chain(order500)\nconst order200New = new chain(order200)\nconst orderCommonNew = new chain(orderCommon)\n\norder500New.setNext(order200New)\norder200New.setNext(orderCommonNew)\n\norder500New.init( 3, true, 500 ) // 普通购买, 无优惠券\n```\n\n重构后, 链路代码和业务代码彻底地分离。假如未来需要新增 order300, 那只需新增与其相关的函数而不必改动原有业务代码。\n\n另外结合 AOP 还能简化上述链路代码:\n\n```js\n// 业务代码\nconst order500 = function(orderType, pay, stock) {\n  if ( orderType === 1 && pay === true ) {\n    console.log('500 元定金预购, 得到 100 元优惠券')\n  } else {\n    return 'nextSuccess'\n  }\n}\n\nconst order200 = function(orderType, pay, stock) {\n  if ( orderType === 2 && pay === true ) {\n    console.log('200 元定金预购, 得到 50 元优惠券')\n  } else {\n    return 'nextSuccess'\n  }\n}\n\nconst orderCommon = function(orderType, pay, stock) {\n  if ((orderType === 3 || !pay) && stock > 0) {\n    console.log('普通购买, 无优惠券')\n  } else {\n    console.log('库存不够, 无法购买')\n  }\n}\n\n// 链路代码\nFunction.prototype.after = function(fn) {\n  const self = this\n  return function() {\n    const result = self.apply(self, arguments)\n    if (result === 'nextSuccess') {\n      return fn.apply(self, arguments) // 这里 return 别忘记了~\n    }\n  }\n}\n\nconst order = order500.after(order200).after(orderCommon)\n\norder( 3, true, 500 ) // 普通购买, 无优惠券\n```\n\n职责链模式比较重要, 项目中能用到它的地方会有很多, 用上它能解耦 1 个请求对象和 n 个目标对象的关系。\n"}}]);