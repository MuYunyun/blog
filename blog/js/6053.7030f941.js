(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6053],{86053:(n,o,t)=>{"use strict";t.r(o),t.d(o,{default:()=>b});var e=t(59713),l=t.n(e),r=t(6479),a=t.n(r),u=(t(67294),t(3905));function i(n,o){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);o&&(e=e.filter((function(o){return Object.getOwnPropertyDescriptor(n,o).enumerable}))),t.push.apply(t,e)}return t}function s(n){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?i(Object(t),!0).forEach((function(o){l()(n,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(o){Object.defineProperty(n,o,Object.getOwnPropertyDescriptor(t,o))}))}return n}var c={};function b(n){var o=n.components,t=a()(n,["components"]);return(0,u.kt)("wrapper",s(s(s({},c),t),{},{components:o,mdxType:"MDXLayout"}),(0,u.kt)("h3",null,"37. Sudoku Solver"),(0,u.kt)("p",null,"Write a program to solve a Sudoku puzzle by filling the empty cells."),(0,u.kt)("p",null,"A sudoku solution must satisfy all of the following rules:"),(0,u.kt)("ol",null,(0,u.kt)("li",{parentName:"ol"},"Each of the digits 1-9 must occur exactly once in each row."),(0,u.kt)("li",{parentName:"ol"},"Each of the digits 1-9 must occur exactly once in each column."),(0,u.kt)("li",{parentName:"ol"},"Each of the digits 1-9 must occur exactly once in each of the 9 ",(0,u.kt)("inlineCode",{parentName:"li"},"3 x 3")," sub-boxes of the grid.")),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"The '.' character indicates empty cells.")),(0,u.kt)("p",null,(0,u.kt)("img",s({parentName:"p"},{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png",alt:null}))),(0,u.kt)("pre",null,(0,u.kt)("code",s({parentName:"pre"},{className:"language-js"}),'Input:\nboard =\n[\n  ["5","3",".",".","7",".",".",".","."],\n  ["6",".",".","1","9","5",".",".","."],\n  [".","9","8",".",".",".",".","6","."],\n  ["8",".",".",".","6",".",".",".","3"],\n  ["4",".",".","8",".","3",".",".","1"],\n  ["7",".",".",".","2",".",".",".","6"],\n  [".","6",".",".",".",".","2","8","."],\n  [".",".",".","4","1","9",".",".","5"],\n  [".",".",".",".","8",".",".","7","9"]\n]\n\nOutput:\n[\n  ["5","3","4","6","7","8","9","1","2"],\n  ["6","7","2","1","9","5","3","4","8"],\n  ["1","9","8","3","4","2","5","6","7"],\n  ["8","5","9","7","6","1","4","2","3"],\n  ["4","2","6","8","5","3","7","9","1"],\n  ["7","1","3","9","2","4","8","5","6"],\n  ["9","6","1","5","3","7","2","8","4"],\n  ["2","8","7","4","1","9","6","3","5"],\n  ["3","4","5","2","8","6","1","7","9"]\n]\n')),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"Explanation: The input board is shown above and the only valid solution is shown below:")),(0,u.kt)("p",null,(0,u.kt)("img",s({parentName:"p"},{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png",alt:null}))),(0,u.kt)("p",null,"Constraints:"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"board.length == 9"),(0,u.kt)("li",{parentName:"ul"},"board","[i]",".length == 9"),(0,u.kt)("li",{parentName:"ul"},"board","[i][j]"," is a digit or '.'.")),(0,u.kt)("p",null,"It is guaranteed that the input board has only one solution."),(0,u.kt)("h3",null,"Analyze"),(0,u.kt)("p",null,"该题有一个难点: 需要明确递归的队列是啥。"),(0,u.kt)("ol",null,(0,u.kt)("li",{parentName:"ol"},"在这里递归队列是数独中的 ",(0,u.kt)("inlineCode",{parentName:"li"},".")," 的下标。"),(0,u.kt)("li",{parentName:"ol"},"接着根据该队列进行递归操作, 对横向、竖向、3 x 3 内的位置信息作记录。")),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"若横向、纵向、3 x 3 的位置没有使用过, 则将相应位置标记为已使用(true)"),(0,u.kt)("li",{parentName:"ul"},"若横向、纵向、3 x 3 的位置已经使用过, 则进入下一个递归")),(0,u.kt)("pre",null,(0,u.kt)("code",s({parentName:"pre"},{className:"language-js"}),"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n  const obj = {}\n  const used = []\n  for (let x = 0; x < 9; x++) {\n    for (let y = 0; y < 9; y++) {\n      if (!obj[`rows ${x}`]) obj[`rows ${x}`] = {}\n      if (!obj[`columns ${y}`]) obj[`columns ${y}`] = {}\n      const blockX = Math.floor(x / 3)\n      const blockY = Math.floor(y / 3)\n      if (!obj[`block ${blockX}${blockY}`]) obj[`block ${blockX}${blockY}`] = {}\n      if (board[x][y] !== '.') {\n        obj[`rows ${x}`][board[x][y]] = true\n        obj[`columns ${y}`][board[x][y]] = true\n        obj[`block ${blockX}${blockY}`][board[x][y]] = true\n      } else {\n        used.push({\n          x,\n          y\n        })\n      }\n    }\n  }\n\n  dfs(board, 0, obj, used)\n\n  return board\n};\n\nvar dfs = function(board, pos, obj, used) {\n  if (pos === used.length) {\n    for (let m = 0; m < 9; m++) {\n      for (let n = 1; n <= 9; n++) {\n        if (typeof obj[`rows ${m}`][n] === 'number') {\n          board[m][obj[`rows ${m}`][n]] = String(n)\n        }\n      }\n    }\n    return\n  }\n  const { x, y } = used[pos]\n  // data source\n  for (let i = 1; i <= 9; i++) {\n    const blockX = Math.floor(x / 3)\n    const blockY = Math.floor(y / 3)\n    if (\n      (obj[`rows ${x}`][String(i)] === undefined || obj[`rows ${x}`][String(i)] === false)\n      && !obj[`columns ${y}`][String(i)]\n      && !obj[`block ${blockX}${blockY}`][String(i)]\n    ) {\n      obj[`rows ${x}`][String(i)] = y\n      obj[`columns ${y}`][String(i)] = true\n      obj[`block ${blockX}${blockY}`][String(i)] = true\n      dfs(board, pos + 1, obj, used)\n      obj[`rows ${x}`][String(i)] = false\n      obj[`columns ${y}`][String(i)] = false\n      obj[`block ${blockX}${blockY}`][String(i)] = false\n    }\n  }\n}\n")))}b.isMDXComponent=!0}}]);