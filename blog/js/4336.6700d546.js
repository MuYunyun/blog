(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4336],{54336:n=>{n.exports="### 组件设计 —— 重新认识受控与非受控组件\n\n![](http://with.muyunyun.cn/21ec115261725fc7a37543143c1e89ed.jpg-400)\n\n### 重新定义受控与非受控组件的边界\n\n![](http://with.muyunyun.cn/3e1327ce86f89d2763d8fed9c169887d.jpg-400)\n\n[React 官网中](https://reactjs.org/docs/uncontrolled-components.html)对非受控组件与受控组件作了如图中下划线的边界定义。一经推敲, 该定义是缺乏了些`完整性`和`严谨性`的, 比如针对非表单组件(弹框、轮播图)如何划分受控与非受控的边界? 又比如非受控组件是否真的如文案上所说的数据的展示与变更都由 dom 自身接管呢?\n\n在非受控组件中, 通常业务调用方只需传入一个`初始默认值`便可使用该组件。以 Input 组件为例:\n\n```js\n// 组件提供方\nfunction Input({ defaultValue }) {\n  return <input defaultValue={defaultValue} />\n}\n\n// 调用方\nfunction Demo() {\n  return <Input defaultValue={1} />\n}\n```\n\n在受控组件中, 数值的`展示与变更`则分别由组件的 `state` 与 `setState` 接管。同样以 Input 组件为例:\n\n```js\n// 组件提供方\nfunction Input() {\n  const [value, setValue] = React.useState(1)\n  return <input value={value} onChange={e => setValue(e.target.value)} />\n}\n\n// 调用方\nfunction Demo() {\n  return <Input />\n}\n```\n\n有意思的一个问题来了, `Input` 组件到底是受控的还是非受控的? 我们甚至还可以对代码稍加改动成 `<Input defaultValue={1} />` 的最初调用方式:\n\n```js\n// 组件提供方\nfunction Input({ defaultValue }) {\n  const [value, setValue] = React.useState(defaultValue)\n  return <input value={value} onChange={e => setValue(e.target.value)} />\n}\n\n// 调用方\nfunction Demo() {\n  return <Input defaultValue={1} />\n}\n```\n\n尽管此时 Input 组件本身是一个受控组件, 但与之相对的调用方失去了更改 Input 组件值的`控制权`, 所以对调用方而言, Input 组件是一个非受控组件。值得一提的是, `以非受控组件的使用方式去调用受控组件`是一种反模式, 在下文中会分析其中的弊端。\n\n如何做到不管对于组件提供方还是调用方 Input 组件都为受控组件呢? 提供方让出控制权即可, 调整代码如下\n\n[codesandbox](https://codesandbox.io/s/clever-montalcini-kysbg)\n\n```js\n// 组件提供方\nfunction Input({ value, onChange }) {\n  return <input value={value} onChange={onChange} />\n}\n\n// 调用方\nfunction Demo() {\n  const [value, setValue] = React.useState(1)\n  return <Input value={value} onChange={e => setValue(e.target.value)} />\n}\n```\n\n经过上述代码的推演后, 概括如下: 受控以及非受控组件的边界划分取决于`当前组件对于子组件值的变更是否拥有控制权`。如若有则该子组件是当前组件的受控组件; 如若没有则该子组件是当前组件的非受控组件。\n\n### 职能范围\n\n基于调用方对于受控组件拥有控制权这一认知, 因此受控组件相较非受控组件能赋予调用方更多的定制化职能。这一思路与软件开发中的[开放/封闭原则](https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99)有异曲同工之妙, 同时让笔者受益匪浅的 [Inversion of Control](https://kentcdodds.com/blog/inversion-of-control) 也是类似的思想。\n\n借助受控组件的赋能, 以 Input 组件为例, 比如调用方可以更为自由地对值进行校验限制, 又比如在值发生变更时执行一些额外逻辑。\n\n```js\n// 组件提供方\nfunction Input({ value, onChange }) {\n  return <input value={value} onChange={onChange} />\n}\n\n// 调用方\nfunction Demo() {\n  const [value, setValue] = React.useState(1)\n  return <Input value={value} onChange={e =>\n    // 只支持数值的变更\n    if (/\\D/.test(e.target.value)) return\n    setValue(e.target.value)}\n  />\n}\n```\n\n因此综合基础组件`扩展性`与`通用性`的考虑, 受控组件的职能相较非受控组件更加宽泛, 建议`优先使用受控组件`来构建基础组件。\n\n### 反模式 —— 以非受控组件的使用方式调用受控组件\n\n首先何谓反模式(可以看文末的案例)? 笔者将其总结为`增大隐性 bug 出现概率的模式`, 该模式是`最佳实践的对立经验`。如若使用了反模式就不得不花更多的精力去避免潜在 bug。官网对反模式也有很好的[概括总结](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#common-bugs-when-using-derived-state)。\n\n缘何上文提到以非受控组件的使用方式去调用受控组件是一种反模式? 观察 Input 组件的第一行代码, 其将 defaultValue 赋值给 value, 这种`将 props 赋值给 state` 的赋值行为在一定程度上会增加某些隐性 bug 的出现概率。\n\n比如在切换导航栏的场景中, 恰巧两个导航中传进组件的 defaultValue 是相同的值, 在导航切换的过程中便会将导航一中的 Input 的状态值带到导航二中, 这显然会让使用方感到困惑。[codesandbox](https://codesandbox.io/s/controllerinput-bobkp)\n\n```js\n// 组件提供方\nfunction Input({ defaultValue }) {\n  // 反模式\n  const [value, setValue] = React.useState(defaultValue);\n  React.useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n  return <input value={value} onChange={e => setValue(e.target.value)} />;\n}\n\n// 调用方\nfunction Demo({ defaultValue }) {\n  return <Input defaultValue={defaultValue} />;\n}\n\nfunction App() {\n  const [tab, setTab] = React.useState(1);\n  return (\n    <>\n      {tab === 1 ? <Demo defaultValue={1} /> : <Demo defaultValue={1} />}\n      <button onClick={() => (tab === 1 ? setTab(2) : setTab(1))}>\n        切换 Tab\n      </button>\n    </>\n  );\n}\n```\n\n如何避免使用该反模式同时有效解决问题呢? 官方提供了两种较为优质的解法, 笔者将其留给大家思考。\n\n1. 方法一: [使用完全受控组件](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component)(更为推荐)\n2. 方法二: [使用完全非受控组件 + key](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key)\n\n### 反模式案例\n\n* 使用过 `getDerivedStateFromProps` 么? 了解它的反模式么? 如何避免?\n\n来看下使用 Derived 会导致的常见 bug:\n\n#### 反模式一: 无条件复制 props 到 state\n\n案例: 在开发 `Picker 组件`的时候, 如下图浮层内的数据源有外部传进的 props 属性以及浮层内进行滑动的 state。\n\n![](http://with.muyunyun.cn/7614ba8c5be96ee769b8a68112848700.jpg)\n\n如果这样子写大家看看是否有问题\n\n```js\nclass Picker extends Component {\n  state = {\n    data: this.props.data\n  }\n\n  getDerivedStateFromProps(props, state) {\n    if (JSON.stringify(props.data) !== JSON.stringify(state.data)) {\n      return {\n        data: props.data\n      }\n    }\n    return null\n  }\n  ...\n}\n```\n\n这样子写代码当在浮层上进行滑动时, state 的变化并不会生效, 这是为什么呢, 官网上截图如下\n\n![](http://with.muyunyun.cn/1d13387bf1d927c36cf3d1a0feaf3134.jpg)\n\n此时的 state 变化使 Picker 父组件重新 render 后会造成 `getDerivedStateFromProps` 的调用, 导致 JSON.stringify(props.data)、JSON.stringify(state.data) 间一直会不相等, 所以返回的一直是 props。\n\n#### 反模式二: 当 props 改变的时候执行重置 state\n\n```js\nclass Picker extends Component {\n  state = {\n    data: this.props.data\n  }\n\n  getDerivedStateFromProps(props, state) {\n    if (JSON.stringify(props.data) !== JSON.stringify(this.props.data)) {\n      return {\n        data: props.data\n      }\n    }\n    return null\n  }\n  ...\n}\n```\n\n这样子比第一种情况好, 大多数情况是没问题的。但是有时候会出现 `JSON.stringify(props.data)`、`JSON.stringify(this.props.data)` 相等的情况, 这种情况下这样使用就会失效了。\n"}}]);