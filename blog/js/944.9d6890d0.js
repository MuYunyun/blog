(self.webpackChunkblog=self.webpackChunkblog||[]).push([[944],{80944:e=>{e.exports="### 方案调研\n\n1. https://blog.csdn.net/m0_37792354/article/details/82012278: 这个方案可以实现, 利用动态切换样式表, 每种主题需要一份样式, 可以实现但后期维护成本高(不考虑);\n2. CSS Variables 的方案, 基于项目本身是 scss 不考虑此种方案, 但是其浏览器支持度还是可以的;\n\n![](http://with.muyunyun.cn/fe11d88b92efa1249d58fe13d5c737dd.jpg)\n\n3. 入口文件引入自定义变量(参照 antd/饿了么/taro 的方案); 因为组内组件使用了 css module, 所以该方案不能适用我们的业务场景;\n4. [浏览器端涂色板换色方案](https://github.com/ElemeFE/element/issues/3054#issuecomment-282527907);\n\n所以最终方案分为两步:\n\n* 编译阶段在 sass-loader 中注入颜色生成算法;\n* 浏览器调色板可以使用 element、taro 的正则替换思路;\n\n### antd\n\n1. 整理组件将和颜色相关的属性进行整理梳理出一份 [default.less](https://github.com/ant-design/ant-design/blob/c6f991d5af/components/style/themes/default.less);\n2. 整理一份 [color.less](https://github.com/ant-design/ant-design/blob/c6f991d5af/components/style/color/colors.less) 文件, 颜色由 [colorPalette.less](https://github.com/ant-design/ant-design/blob/c6f991d5af/components/style/color/colorPalette.less) 动态生成;\n\n用户使用方式:\n\n1. 选择一个颜色(切换主题色)\n2. 下载\n3. 引用\n\n### 相关项目\n\n1. [theme-preview](实时换色方案):\n   1. 先把默认主题文件中涉及到颜色的 CSS 值替换成关键词：https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L250-L274;\n   2. 根据用户选择的主题色生成一系列对应的颜色值：https://github.com/ElementUI/theme-preview/blob/master/src/utils/formula.json;\n   3. 把关键词再换回刚刚生成的相应的颜色值：https://github.com/ElementUI/theme-preview/blob/master/src/utils/color.js;\n   4. 直接在页面上加 style 标签，把生成的样式填进去：https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L198-L211;\n2. [theme-chalk](https://github.com/ElementUI/theme-chalk);\n\n### scss 中使用 antd 来自定义主题\n\n如果业务方使用 less/css: 基于 css modules 的 hash 不能覆盖的点，~~一个方案是本地打好包给业务方使用方案了(兜底方案)，但是比较笨重(相当于是要打包出多份不同的 css 样式文件在项目中了, 然后业务方每要一种主题就要新增维护一份打包文件)~~\n\n如果业务方使用 scss: 如果 css modules hash 不能去掉, 有一个 scss + css variable 的方案可以代替 sass-loader 方案(成本是要写相应的插件); 如果 css modules hash 能去掉, 可以使用之前提到的 taro 上的第一种方案, 在 app 进入的地方引入主题色进行覆盖 scss Variable;\n\n### 自适应颜色\n\n`colorPalette` 函数。\n\nRGB 可以方便的进行计算机存储和读取, 但对人进行颜色判断十分不友好, 因此有了 HSB/HSV。\n\n* RGB: 面向硬件\n* HSB: 面向用户\n\nHSB(Hue, Saturation, Brightness) 分别表示色调(色相), 饱和度, 亮度。\n\n* [HSB 模型](https://baike.baidu.com/item/HSB模型)\n* [HSV 模型](https://baike.baidu.com/item/HSV/547122): 有关 H、S 的解释这个更清晰\n* [antd 色彩](https://ant.design/docs/spec/colors-cn)\n\n### Version One\n\n<details>\n  <summary>version one</summary>\n\n```scss\n$theme-color: #1199ee !default;\n\n/* mix white */\n@function tint($theme-color, $percent) {\n  @return mix(#fff, $theme-color, $percent);\n}\n\n/* mix black */\n@function shade($theme-color, $percentage) {\n  @return mix(black, $theme-color, $percentage);\n}\n\n/* There are ten color in on theme, from left to right, they are\n*  tint($theme-color, 50%), tint($theme-color, 40%), tint($theme-color, 30%), tint($theme-color, 20%), tint($theme-color, 10%),\n*  $theme-color, shade($theme-color, 10%), shade($theme-color, 20%), shade($theme-color, 30%), shade($theme-color, 40%)\n,*/\n@function colorPallete1($theme-color) {\n  @return tint($theme-color, 50%);\n}\n\n@function colorPallete2($theme-color) {\n  @return tint($theme-color, 40%);\n}\n\n@function colorPallete3($theme-color) {\n  @return tint($theme-color, 30%);\n}\n\n/* 悬停态 */\n@function colorPallete4($theme-color) {\n  @return tint($theme-color, 20%);\n}\n\n@function colorPallete5($theme-color) {\n  @return tint($theme-color, 10%);\n}\n\n/* 主色 */\n@function colorPallete6($theme-color) {\n  @return $theme-color;\n}\n\n@function colorPallete7($theme-color) {\n  @return shade($theme-color, 10%);\n}\n\n/* 点击态 */\n@function colorPallete8($theme-color) {\n  @return shade($theme-color, 20%);\n}\n\n@function colorPallete9($theme-color) {\n  @return shade($theme-color, 30%);\n}\n\n@function colorPallete10($theme-color) {\n  @return shade($theme-color, 40%);\n}\n```\n</details>\n\n### Sass 踩坑\n\n`sass-loader` 的 options 配置要参阅 [sass 文档](https://sass-lang.com/documentation/js-api)\n\n> I think itl's necessary to prompt what features can be used in the options.😄 And the usage of the custom function is found in [this issue](https://github.com/webpack-contrib/sass-loader/issues/210) instead of doc.\n\n* [sass 中使用 JavaScript 的口子](https://sass-lang.com/documentation/js-api#new-types-color-red-green-blue-alpha-1)\n* [tinyColor](https://github.com/bgrins/TinyColor)\n\n### 设计师的角度\n\n#### 关于悬浮态\n\n> 悬浮态颜色变浅: hover 相当于 button 被你的鼠标吸起来了，所以上升后离光源更近，所以变白了。（类似前面某位同学提到的：距离越近越亮\n\n> 悬浮态颜色变深: 特别是有的商家/客服显示器很差，Hover 上去底色变亮了字是白的，可能有些情况影响识别度\n\n### 参阅资料\n\n* [聊一聊前端换肤](https://juejin.im/post/5ca41617f265da3092006155)\n* [Ant Design 色板生成算法演进之路](https://zhuanlan.zhihu.com/p/32422584)\n"}}]);