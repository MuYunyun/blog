(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8303],{98303:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});var r=t(59713),s=t.n(r),l=t(6479),o=t.n(l),c=(t(67294),t(3905));function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var p={};function a(e){var n=e.components,t=o()(e,["components"]);return(0,c.kt)("wrapper",u(u(u({},p),t),{},{components:n,mdxType:"MDXLayout"}),(0,c.kt)("pre",null,(0,c.kt)("code",u({parentName:"pre"},{className:"language-js"}),"// ---- some useful fn to do with linked_list ----\n\nfunction ListNode(val) {\n  this.val = val;\n  this.next = null;\n}\n\n/**\n * create init linked list for leetcode.\n */\nvar list = (function createLinkedList(...args) {\n  const reverseArgs = args.reverse()\n  const tmplistNode = new ListNode(0)\n  let length = reverseArgs.length\n  let cur = new ListNode(reverseArgs[length - 1])\n  tmplistNode.next = cur\n  while (length-- && length >= 1) {\n    let next = new ListNode(reverseArgs[length - 1])\n    cur.next = next\n    cur = next\n  }\n\n  return tmplistNode.next\n})(1, 2, 3, 4, 5)\n\n/**\n * print the linked list\n */\nvar printList = function (list) {\n  let cur = list\n  let str = ''\n  while (cur) {\n    str += `${cur.val} -> `;\n    cur = cur.next\n    cur === null && (str += 'null')\n  }\n  console.log(str)\n}\n")))}a.isMDXComponent=!0}}]);