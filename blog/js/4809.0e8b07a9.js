(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4809],{34809:n=>{n.exports="### 78.Subsets\n\nGiven an integer array nums, return all possible subsets (the power set).\n`The solution set must not contain duplicate subsets`.\n\nExample 1:\n\n```js\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n```\n\nExample 2:\n\n```js\nInput: nums = [0]\nOutput: [[],[0]]\n```\n \nConstraints:\n* 1 <= nums.length <= 10\n* -10 <= nums[i] <= 10\n### Analyze\n\n由题意可知该题是组合问题, 可以使用回溯法解决。\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function (nums) {\n  const list = []\n  const tmpList = []\n\n  backTrack(list, tmpList, nums, 0)\n\n  return list\n};\n\nfunction backTrack(list, tmpList, nums, start) {\n  list.push(tmpList.slice())\n\n  for (let i = start; i < nums.length; i++) {\n    tmpList.push(nums[i])\n    backTrack(list, tmpList, nums, i + 1)\n    tmpList.splice(tmpList.length - 1, 1)\n  }\n}\n```"}}]);