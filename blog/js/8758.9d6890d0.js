(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8758],{28758:n=>{n.exports="### Remove Linked List Elements\n\nRemove all elements from a linked list of integers that have value val.\n\nExample:\n\n```js\nInput:  1->2->6->3->4->5->6, val = 6\nOutput: 1->2->3->4->5\n```\n\n### Analyze\n\n```js\nprev  cur  next\n  1 -> 2 -> 6 -> 3 -> 4 -> 5 -> 6\n```\n\n思路:\n\n* 借助指针 prev, cur, next\n  * 若 cur.val 与传入 val 相等, 则让 prev.next 指向 next\n\n> 如果只用 cur、next 两个指针, 若 next.val 与 传入 val 相等, 则让 cur = next.next 后的 cur.val 与传入的 val 仍然相等, 此时就无法改变移除当前的 cur 了, 因此需要引入第三个指针 prev。\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */\nvar removeElements = function(head, val) {\n  const dummyHead = new ListNode(head)\n  dummyHead.next = head\n  let prev = dummyHead\n  let cur = dummyHead.next\n\n  while (cur) {\n    let next = cur.next\n    if (cur.val === val) {\n      prev.next = next\n    } else {\n      prev = cur\n    }\n    cur = next\n  }\n\n  return dummyHead.next\n}\n```\n\n### Similar Title\n\n21, 82(Sister Title)"}}]);