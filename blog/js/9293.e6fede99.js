(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9293],{9293:n=>{n.exports="### 234.Palindrome Linked List\n\nGiven a singly linked list, determine if it is a palindrome.\n\nExample 1:\n\n```js\nInput: 1->2\nOutput: false\n```\n\nExample 2:\n\n```js\nInput: 1->2->2->1\nOutput: true\n```\n\nFollow up:\nCould you do it in O(n) time and O(1) space?\n\n### Analyze\n\n思路比较清晰直观, 步骤如下:\n\n1. 第一步: 使用快慢指针找到链表中点, 链表分割为左右两部分;\n2. 第二步: 翻转右边的链表节点;\n3. 第三步: 比较左右两边的节点;\n\n> 该题与题目 [143.Reorder_List](https://github.com/MuYunyun/blog/blob/master/LeetCode/143.Reorder_List/README.md) 十分类似。\n\n步骤图解:\n\n```js\n第一步: 找中点, 分割链表;\n                        q\n              s\ndummy -> 1 -> 2 -> 2 -> 1 -> NULL\n              .\n              .\n                        q\n              s\ndummy -> 1 -> 2 -> 2 -> 1 -> NULL\n\nleft 链表:\n1 -> 2 -> null\n\nright 链表:\n2 -> 1 -> null\n\n第二步: 翻转右边的链表节点;\n\nleft 链表:\n1 -> 2 -> null\n\nright 链表:\n1 -> 2 -> null\n\n第三步: 判断 left 链表与 right 链表;\n```\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar isPalindrome = function(head) {\n  const dummy = new ListNode(0)\n  dummy.next = head\n\n  let slow = dummy, quick = dummy\n  while (quick && quick.next) {\n    slow = slow.next\n    quick = quick.next.next\n  }\n\n  let right = slow.next\n  slow.next = null\n  let left = dummy.next\n\n  right = reverseLink(right)\n\n  while (left && right) {\n    if (left.val !== right.val) {\n      return false\n    }\n    left = left.next\n    right = right.next\n  }\n  return true\n}\n\nfunction reverseLink(list) {\n  const dummy = new ListNode(0)\n  dummy.next = list\n\n  let prev = null\n  let cur = dummy.next\n\n  while (cur) {\n    const next = cur.next\n    cur.next = prev\n    prev = cur\n    cur = next\n  }\n\n  return prev\n}\n```\n\n![](http://with.muyunyun.cn/f1d261951e75505802e0b5b8ea8848bc.jpg)\n\n\n### Sister Title\n\n* [143.Reorder_List]((https://github.com/MuYunyun/blog/blob/master/LeetCode/143.Reorder_List/README.md))"}}]);