(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2277],{36664:n=>{n.exports='### 操作远程文件\n\n```bash\ngit push origin :[branch] 删除远程分支\ngit rm -r --cached [file] 删除远程文件\n```\n\n### git commit 提交规范\n\n```bash\nfeat: 新功能\nfix: 修复 bug\ntest: 增加/修改测试用例\nchore: 修改工具相关\ndocs: 修改文档\nperf: 提升性能\nreflactor: 重构, 不影响当前逻辑\nstyle: 修改样式\ndeps: 升级依赖\n```\n\n### PR 相关\n\n```bash\ngit remote -v               列出远程仓库 url\ngit remote add [name] [url] 添加远程仓库 url\ngit fetch [name]            拉取远程仓库最新代码\ngit merge [name]/master     合并远程分支最新代码到本地\n```\n\n### git pull 和 git fetch 的区别\n\n`git pull` 等价于 `git fetch` 和 `git checkout -b`\n\n### git merge 和 git rebase 的区别\n\n* `git merge` 会多产生一次 merge 的 log 记录;\n* `git rebase` 会将主干新增的日志记录前置到当前分支之前;\n\n> git merge --no-ff 在每次合并都会产生一个新的合并记录; git merge 的话只有解决冲突的时候才会产生一个新的合并记录。\n\n### git reset 和 git revert 的区别\n\n* git revert 回退会产生一个新的 commit, 是向前的操作\n* git reset 回退不会产生一个新的 commit, 是向后的操作\n\n### git reset 撤销操作\n\n以下都为 `commit` 了的情况, 下面对 `--mixed`、`--hard`、`--soft`\n\n* git reset --soft Head~1: 撤销到上个分支, 撤销到 commit 之前, add 之后, 保留代码\n* git reset --mixed Head~1: 撤销到上个分支, 撤销到 add 之前, 保留代码\n* git reset --hard Head~1: 撤销到上个分支, 不保留代码\n\n> 可以看到从上往下回复程度是在加强的。\n\n### git cherry-pick\n\n使用场景: 在一个分支中拉取另外一个分支`某一个 commit` 或`一段区间的 commit`\n\n```bash\ngit cherry-pick <commit id>\ngit cherry-pick 371c2…971209 // (2,5]\ngit cherry-pick 371c2^…971209 // [2,5]\n```\n\n### git log\n\n查看文件修改内容\n\n```js\ngit lg -p\n```\n\n### 对线上代码 (master 分支) 进行修复\n\n1. 在 `master` 分支上使用 `git reset --hard xxxxxx`;\n2. 使用 `git checkout -b` 创建 `fix/xxx` 分支, 在该分支上进行 bug 修复;\n3. 回到 `master` 分支, 可以使用 `git reflog` 查看之前 reset 过来的分支节点, 再执行 `git reset --hard xxxxxx` 回到那个节点。\n4. 在 master 的最新节点上使用 `git merge --no-ff fix/xxx`\n\n### github 使用技巧\n\n选择一句话, 按 r 对该话进行引用回复。\n\n### 关于 pull request\n\n如果是比较复杂的 Feature 可以在开发过程提 pr(标为 WIP), 这样子可以提早的指出问题代码。\n\n当有人提了 `pr`, 需要观察 pr 的代码是否存在问题。比如使用如下命令:\n\n```bash\ngit remote add lanyincao git@github.com:snakeUni/snake-design.git\n```\n\n### git reflog\n\ngit reflog 可以查看所有分支的所有操作记录\n\n### 一个痛点\n\n输入 `git branch` 分支情况如下:\n\n![](http://with.muyunyun.cn/c5586a56a252a983713f306ea2902255.jpg)\n\n输入 `git branch --merged` 后查看已合并的分支\n\n![](http://with.muyunyun.cn/38861f42cde27e6d1ae0ecc73a7f2357.jpg)\n\n如何一键快速删除这些已合并的分支并删除远端的分支呢\n\n参考此脚本, 后续跟进。\n\n### 打 tag\n\n```bash\ngit tag v0.1\ngit tag -d v0.1         // 删标签\ngit push orgin v0.1 // 推标签\n```\n\n### git 项目大小写\n\ngit 默认初始化的项目是不区分文件名大小写的, 可以执行下这行命令\n\n```js\ngit config core.ignorecase false\n```\n\n### 查看两个分支的差异\n\n```js\ngit diff xxx xxx > my.patch\n```\n\n### 误提交敏感信息到 github 怎么办\n\nthe first step:\n\n```bash\ngit filter-branch --force --index-filter \\\n  "git rm --cached --ignore-unmatch yarn.lock" \\\n  --prune-empty --tag-name-filter cat -- --all\n```\n\nthe second step:\n\n```bash\ngit push origin --force --all\n```\n\n* [removing-sensitive-data-from-a-repository](https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository)\n\nask for Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com/), asking them to remove cached views and references to the sensitive data in pull requests on GitHub.\n\n### clean up git commit\n\n使用交互式 rebase 则有更多的功能，可以细致的操作每一条 commit，这样我们就能合并，修改 commit\n\n```\ngit rebase -i [start-commit] [end-commit]\n# (start-commit, end-commit] 前开后闭区间，默认 end-commit 为当前 HEAD\n```\n\nfor example\n\n```\ngit rebase -i HEAD~4\n```\n\n```\n1 pick 05a703d fix: 左右按键遇见 label 标签、加粗文字, 光标位置与预期不符\n2 s a716c1d fix: 修复 P0 报错\n3\n4 # Rebase d974fa9..a716c1d onto d974fa9 (2 command(s))\n5 #\n6 # Commands:\n7 # p, pick = use commit\n8 # r, reword = use commit, but edit the commit message\n9 # e, edit = use commit, but stop for amending\n10 # s, squash = use commit, but meld into previous commit\n11 # f, fixup = like "squash", but discard this commit\'s log message\n12 # x, exec = run command (the rest of the line) using shell\n13 # d, drop = remove commit\n14 #\n15 # These lines can be re-ordered; they are executed from top to bottom.\n16 #\n17 # If you remove a line here THAT COMMIT WILL BE LOST.\n18 #\n19 # However, if you remove everything, the rebase will be aborted.\n20 #\n21 # Note that empty commits are commented out\n```\n\n删除不想保留的 commit。\n\n### How do you make changes on a specific commit\n\n1. git rebase -i <Earlier Commit>\n2. edit the commit info you want change from `pick` to `edit`\n3. git commit --amend --author="MuYunyun <328375795@qq.com>"\n4. git rebase --continue\n\n### Setting your Git username\n\n* for every repository\n\n```\n$ git config --global user.name "Mona Lisa"\n$ git config --global user.name\n```\n\n* for a single repository\n\n```\n$ git config user.name "MuYunyun"\n$ git config user.name\n$ git config user.email "328375795@qq.com"\n$ git config user.email\n```\n\n### How to check the conflict of two branch, but not need to merge them?\n\n[How to check the conflict of two branch, but not need to merge them?](https://stackoverflow.com/questions/10879331/how-to-check-the-conflict-of-two-branch-but-not-need-to-merge-them)\n\ngit document:\n\n> --ff\n> Do not generate a merge commit if the merge resolved as a fast-forward, only update the branch pointer. This is the default behavior.\n\n> -no-ff\n> Generate a merge commit even if the merge resolved as a fast-forward.\n\n> --commit\n> Perform the merge and commit the result. This option can be used to override --no-commit.\n\n> --no-commit\n> With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance to inspect and further tweak the merge result before committing.'}}]);