(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3107],{73107:n=>{n.exports="### 关系型数据库\n\n使用多个表格管理的数据库。\n\n### 创建数据库\n\n```js\nCREATE DATABASE 数据库名;\n```\n\n### 删除数据库\n\n```js\nDROP DATABASE 数据库名;\n```\n\n### 数据库类型\n\n数据库类型分为数字类型、时间类型、字符串类型。\n\n|    类型     |       用途       |     格式     |\n| :---------: | :--------------: | :----------: |\n| INT(INEGER) |     大整数值     |              |\n|    FLOAT    |      单精度      |              |\n|    DATE     |      日期值      | 'YYYY-MM-DD' |\n|    TIME     | 时间值或持续时间 |  'HH:MM:SS'  |\n|    YEAR     |      年份值      |    'YYYY'    |\n|  DATETIME   | 混合日期和时间值 | 'YYYY-MM-DD' |\n|   VARCHAR   |    变长字符串    |              |\n\n### 创建数据表\n\n```js\nCREATE TABLE table_name (column_name column_type);\n```\n\n### 删除数据表\n\n```js\nDROP TABLE table_name;\n```\n\n### 插入数据\n\n```js\nINSERT INTO table_name ( field1, field2, ...fieldN ) VALUES ( value1, value2, ...valueN )\n```\n\n### 查询数据\n\n```js\nSELECT field1,field2\nFROM table_name1, table_name2\n[WHERE condition1 [AND [OR]] condition2\n[GROUP BY]\n[HAVING]\n[ORDER BY]\n[LIMIT N][OFFSET M]\n```\n\n* `FROM`: 可以从多个 table 中进行查询\n* `WHERE`\n  * WHERE 相当于编程语言中的 if。\n  * 可以使用在 SELECT、UPDATE、DELETE 语句中。\n  * 可以使用 AND 或者 OR 指定一个或多个条件。\n  * 操作符有 `=`、`>`、`<`、`>=`、`<=`、`!= or <>`、`IS NULL`、`IS NOT NULL`\n  * `Like`: 类似于 `=`, SQL 提供了四种匹配方式。\n    * `%`: 表示任意 0 个或多个字符。可匹配任意类型和长度的字符, 有些情况下若是中文, 请使用两个百分号（%%）表示。\n      * eg: 查询包含 javascript 字段的信息: `SELECT * FROM position WHERE name LIKE '%java%';`\n    * `_`: 表示任意单个字符。匹配单个任意字符, 它常用来限制表达式的字符长度语句。\n    * []: 表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围, 要求所匹配对象为它们中的任一个。\n    * [^]: 表示不在括号所列之内的单个字符。其取值和 [] 相同, 但它要求所匹配对象为指定字符以外的任一个字符。\n    查询内容包含通配符时,由于通配符的缘故, 导致我们查询特殊字符 “%”、“_”、“[” 的语句无法正常实现, 而把特殊字符用 “[ ]” 括起便可正常查询。\n  * `REGEXP`: 可以使用正则进行筛选。\n    * eg: `SELECT name FROM person_tbl WHERE name REGEXP '^st';`\n* `GROUP BY`: 对 SELECT 查询出来的结果集按照某个字段或者表达式进行分组，获得一组组的集合。\n  * `WITH ROLLUP`: 可以实现在分组统计数据基础上再进行相同的统计 (SUM, AVG, COUNT 等)。\n    * ![](http://with.muyunyun.cn/1d8a95a812f6ffc91d6f5a357fe9755c.jpg)\n  * `coalesce`: 针对上图 null 处, 可以使用 coalesce(a,b,c) 语法, 其等价于 JavaScript 中 `a || b || c || null`\n    * ![](http://with.muyunyun.cn/8530fc78779c7024f41053a51c160196.jpg)\n* `HAVING`: 用于对 WHERE 和 GROUP BY 查询出来的分组经行过滤，查出满足条件的分组结果。(场景使用存疑: 后续有场景进行补充)\n* `ORDER BY`:\n  * 可设置多个字段来排序: `ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]`;\n  * 可设置 `ASD`(ascending) 或 `DESD`(descending) 来表示升序或降序, 默认 ascending。\n  * 拼音场景: 如果字符集采用的是 utf8(万国码)而非 gbk，需要先对字段进行转为 gbk 码然后排序:\n    * `ORDER BY CONVERT(title using gbk);`\n* `LIMIT`: 可以设置查询返回条数\n* `OFFSET`: 可以设置起始查询条数\n* `limit N,M`: 相当于 LIMIT M OFFSET N , 从第 N 条记录开始, 返回 M 条记录\n\n### UPDATE\n\n```js\nUPDATE table_name SET field1=new-value1, field2=new-value2\n[WHERE CLAUSE]\n```\n\n### DELETE\n\n```js\nDELETE FROM table_name\n[WHERE CLAUSE]\n```\n\n### UNION\n\nUNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。\n\n```js\nSELECT field1,field2\nFROM table_name1, table_name2\n[WHERE condition1 [AND [OR]] condition2\nUNION [ALL | DISTINCT]\n```\n\n* `DISTINCT`: 默认值, 表示多个 SELECT 语句会删除重复的数据。\n* `All`: 表示多个 SELECT 语句不会删除重复的数据。\n\n### 连接的使用\n\n真正的应用中经常需要从多个数据表中读取数据。此时可以使用 JOIN 在两个或多个表中读取数据。\n\n* INNER JOIN (内连接)\n  * ![](http://with.muyunyun.cn/b6fb7c5a37b37586b7c36f7b524294bd.jpg)\n  * `SELECT field1,field2 FROM table_name1 INNER JOIN table_name2 ON condition;`\n* LEFT JOIN (左连接)\n  * ![](http://with.muyunyun.cn/52e7cfa17e2c2ff5983a2ba3c6f3eb8e.jpg)\n  * `SELECT field1,field2 FROM table_name1 LEFT JOIN ttable_name2 ON condition;`\n* RIGHT JOIN (右连接)\n  * ![](http://with.muyunyun.cn/d79d96273e72c6c308ba8744b507f562.jpg)\n  * `SELECT field1,field2 FROM table_name1 RIGHT JOIN table_name2 ON condition;`\n\n### 事务\n\n事务主要用于处理操作量大，复杂度高的数据。笔者认为事务就像数据库语句中引入 git 操作。\n\n* MySQL 中使用了 Innodb 引擎的数据库或表支持事务;\n* 事务用来管理 insert、update、delete 语句;\n\nMYSQL 事务控制语句\n\n* BEGIN: 开始一个事务\n* ROLLBACK: 事务回滚\n* COMMIT: 事务确认\n\n### ALTER\n\n修改表名或者修改表字段就要使用 ALTER 命令。\n\n* 删除表字段\n  * DROP: `ALTER TABLE testalter_tbl DROP i;`\n* 添加表字段\n  * ADD: `ALTER TABLE testalter_tbl ADD i INT;`\n* 修改表字段类型及名称\n  * MODIFY: `alter table tableName modify name1 type1 first|after name2;`\n    * name1 为想要修改的字段\n    * type1 为该字段原来类型\n    * first 与 after 二选一, first 放在第一位, after 放在 name2 字段后面\n  * CHANGE: `ALTER TABLE testalter_tbl CHANGE i j BIGINT;`\n    * 将 i 字段重命名为 j 字段\n\n### 索引\n\n空间换时间。使用索引可以加快数据库内部找寻数据的速度。\n\n* 创建索引\n  * `CREATE INDEX indexName ON table_name (column_name)`\n* 删除索引\n  * `DROP INDEX [indexName] ON mytable;`\n\n### SQL 注入\n\n线上应用应该注意防范 SQL 注入。"}}]);