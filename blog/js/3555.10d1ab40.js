(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3555],{53555:n=>{n.exports="### Merge Two Sorted Lists\n\nMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n\nExample:\n\n```js\nInput: 1->2->4, 1->3->4\nOutput: 1->1->2->3->4->4\n```\n\n### analyze\n\n解法一: 链表, 类似归并排序的合并过程, 见[归并排序](https://github.com/MuYunyun/blog/blob/master/BasicSkill/algorithm/sort/merge_sort.md)\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function (l1, l2) {\n  const dummyLink = new ListNode(0)\n  let cur = dummyLink\n  let l1Point = l1\n  let l2Point = l2\n\n  while (l1Point && l2Point) {\n    if (l1Point.val < l2Point.val) {\n      cur.next = l1Point\n      l1Point = l1Point.next\n    } else {\n      cur.next = l2Point\n      l2Point = l2Point.next\n    }\n    cur = cur.next\n  }\n\n  while (l1Point) {\n    cur.next = l1Point\n    cur = cur.next\n    l1Point = l1Point.next\n  }\n\n  while (l2Point) {\n    cur.next = l2Point\n    cur = cur.next\n    l2Point = l2Point.next\n  }\n\n  return dummyLink.next\n}\n```\n\n解法二: 递归\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function (l1, l2) {\n  if (l1 === null) {\n    return l2\n  }\n  if (l2 === null) {\n    return l1\n  }\n  if (l1.val < l2.val) {\n    l1.next = mergeTwoLists(l1.next, l2)\n    return l1\n  } else {\n    l2.next = mergeTwoLists(l1, l2.next)\n    return l2\n  }\n}\n```"}}]);